
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00001e70  00001f04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004e  0080012e  0080012e  00001f32  2**0
                  ALLOC
  3 .stab         00003fe4  00000000  00000000  00001f34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015d2  00000000  00000000  00005f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000074ea  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000074fc  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00007538  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00007cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000083d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  000083ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__ctors_end>
       4:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
       8:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
       c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      10:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      14:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      18:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      1c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      20:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      24:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      28:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      2c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      30:	0c 94 45 08 	jmp	0x108a	; 0x108a <__vector_12>
      34:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      38:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      3c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      40:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__vector_16>
      44:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      48:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      4c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      50:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      54:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      58:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      5c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      60:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      64:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      68:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      6c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      70:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      74:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      78:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      7c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      80:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      84:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      88:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      8c:	29 01       	movw	r4, r18
      8e:	33 01       	movw	r6, r6
      90:	3d 01       	movw	r6, r26
      92:	47 01       	movw	r8, r14
      94:	52 01       	movw	r10, r4
      96:	5d 01       	movw	r10, r26
      98:	68 01       	movw	r12, r16
      9a:	15 01       	movw	r2, r10
      9c:	1f 01       	movw	r2, r30
      9e:	be 02       	muls	r27, r30
      a0:	b6 02       	muls	r27, r22
      a2:	b1 02       	muls	r27, r17
      a4:	db 02       	muls	r29, r27
      a6:	ce 02       	muls	r28, r30
      a8:	d6 02       	muls	r29, r22
      aa:	c6 02       	muls	r28, r22
      ac:	8f 02       	muls	r24, r31
      ae:	87 02       	muls	r24, r23
      b0:	82 02       	muls	r24, r18
      b2:	7a 02       	muls	r23, r26
      b4:	e3 02       	muls	r30, r19
      b6:	97 02       	muls	r25, r23
      b8:	6d 02       	muls	r22, r29
      ba:	55 02       	muls	r21, r21
      bc:	03 03       	mulsu	r16, r19
      be:	ac 02       	muls	r26, r28
      c0:	a4 02       	muls	r26, r20
      c2:	9c 02       	muls	r25, r28
      c4:	23 03       	mulsu	r18, r19
      c6:	5d 02       	muls	r21, r29
      c8:	13 03       	mulsu	r17, r19
      ca:	65 02       	muls	r22, r21
      cc:	30 03       	mulsu	r19, r16
      ce:	fb 02       	muls	r31, r27
      d0:	1b 03       	fmul	r17, r19
      d2:	75 02       	muls	r23, r21
      d4:	f3 02       	muls	r31, r19
      d6:	eb 02       	muls	r30, r27
      d8:	0b 03       	fmul	r16, r19
      da:	50 02       	muls	r21, r16
      dc:	1e 02       	muls	r17, r30
      de:	16 02       	muls	r17, r22
      e0:	26 02       	muls	r18, r22
      e2:	28 03       	fmul	r18, r16
      e4:	09 02       	muls	r16, r25
      e6:	01 02       	muls	r16, r17
      e8:	2b 02       	muls	r18, r27
      ea:	e4 01       	movw	r28, r8
      ec:	48 02       	muls	r20, r24
      ee:	11 02       	muls	r17, r17
      f0:	f4 01       	movw	r30, r8
      f2:	ec 01       	movw	r28, r24
      f4:	38 02       	muls	r19, r24
      f6:	fc 01       	movw	r30, r24
      f8:	30 02       	muls	r19, r16
      fa:	dc 01       	movw	r26, r24
      fc:	c2 01       	movw	r24, r4
      fe:	40 02       	muls	r20, r16
     100:	b2 01       	movw	r22, r4
     102:	aa 01       	movw	r20, r20
     104:	cf 01       	movw	r24, r30
     106:	c7 01       	movw	r24, r14
     108:	d4 01       	movw	r26, r8
     10a:	a5 01       	movw	r20, r10
     10c:	ba 01       	movw	r22, r20
     10e:	8d 01       	movw	r16, r26
     110:	9d 01       	movw	r18, r26
     112:	88 01       	movw	r16, r16
     114:	80 01       	movw	r16, r0
     116:	78 01       	movw	r14, r16
     118:	73 01       	movw	r14, r6
     11a:	95 01       	movw	r18, r10
     11c:	94 04       	cpc	r9, r4
     11e:	e4 04       	cpc	r14, r4
     120:	84 04       	cpc	r8, r4
     122:	b4 04       	cpc	r11, r4
     124:	64 04       	cpc	r6, r4
     126:	74 04       	cpc	r7, r4
     128:	64 04       	cpc	r6, r4
     12a:	74 04       	cpc	r7, r4
     12c:	f4 04       	cpc	r15, r4
     12e:	94 04       	cpc	r9, r4
     130:	e4 04       	cpc	r14, r4
     132:	84 04       	cpc	r8, r4
     134:	b4 04       	cpc	r11, r4
     136:	a4 04       	cpc	r10, r4
     138:	54 04       	cpc	r5, r4
     13a:	a4 04       	cpc	r10, r4
     13c:	54 04       	cpc	r5, r4
     13e:	3c 05       	cpc	r19, r12
     140:	c8 05       	cpc	r28, r8
     142:	30 05       	cpc	r19, r0
     144:	48 06       	cpc	r4, r24
     146:	30 05       	cpc	r19, r0
     148:	a8 05       	cpc	r26, r8
     14a:	98 05       	cpc	r25, r8
     14c:	54 04       	cpc	r5, r4
     14e:	4c 05       	cpc	r20, r12
     150:	54 04       	cpc	r5, r4
     152:	7c 05       	cpc	r23, r12
     154:	c4 04       	cpc	r12, r4
     156:	18 06       	cpc	r1, r24
     158:	64 04       	cpc	r6, r4
     15a:	f8 05       	cpc	r31, r8
     15c:	04 05       	cpc	r16, r4
     15e:	08 06       	cpc	r0, r24
     160:	14 05       	cpc	r17, r4
     162:	28 06       	cpc	r2, r24
     164:	88 05       	cpc	r24, r8
     166:	d4 04       	cpc	r13, r4
     168:	c4 04       	cpc	r12, r4
     16a:	5c 05       	cpc	r21, r12
     16c:	24 05       	cpc	r18, r4
     16e:	94 04       	cpc	r9, r4
     170:	e4 04       	cpc	r14, r4
     172:	84 04       	cpc	r8, r4
     174:	b4 04       	cpc	r11, r4
     176:	64 04       	cpc	r6, r4
     178:	74 04       	cpc	r7, r4
     17a:	64 04       	cpc	r6, r4
     17c:	74 04       	cpc	r7, r4
     17e:	f4 04       	cpc	r15, r4
     180:	94 04       	cpc	r9, r4
     182:	b8 05       	cpc	r27, r8
     184:	d4 04       	cpc	r13, r4
     186:	84 04       	cpc	r8, r4
     188:	a4 04       	cpc	r10, r4
     18a:	54 04       	cpc	r5, r4
     18c:	a4 04       	cpc	r10, r4
     18e:	54 04       	cpc	r5, r4
     190:	3c 05       	cpc	r19, r12
     192:	d8 05       	cpc	r29, r8
     194:	6c 05       	cpc	r22, r12
     196:	f4 04       	cpc	r15, r4
     198:	e8 05       	cpc	r30, r8
     19a:	4c 05       	cpc	r20, r12
     19c:	04 05       	cpc	r16, r4
     19e:	14 05       	cpc	r17, r4
     1a0:	c4 04       	cpc	r12, r4
     1a2:	d4 04       	cpc	r13, r4
     1a4:	38 06       	cpc	r3, r24
     1a6:	24 05       	cpc	r18, r4

000001a8 <__ctors_end>:
     1a8:	11 24       	eor	r1, r1
     1aa:	1f be       	out	0x3f, r1	; 63
     1ac:	cf ef       	ldi	r28, 0xFF	; 255
     1ae:	d0 e1       	ldi	r29, 0x10	; 16
     1b0:	de bf       	out	0x3e, r29	; 62
     1b2:	cd bf       	out	0x3d, r28	; 61

000001b4 <__do_copy_data>:
     1b4:	11 e0       	ldi	r17, 0x01	; 1
     1b6:	a0 e0       	ldi	r26, 0x00	; 0
     1b8:	b1 e0       	ldi	r27, 0x01	; 1
     1ba:	e0 e7       	ldi	r30, 0x70	; 112
     1bc:	fe e1       	ldi	r31, 0x1E	; 30
     1be:	00 e0       	ldi	r16, 0x00	; 0
     1c0:	0b bf       	out	0x3b, r16	; 59
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <__do_copy_data+0x14>
     1c4:	07 90       	elpm	r0, Z+
     1c6:	0d 92       	st	X+, r0
     1c8:	ae 32       	cpi	r26, 0x2E	; 46
     1ca:	b1 07       	cpc	r27, r17
     1cc:	d9 f7       	brne	.-10     	; 0x1c4 <__do_copy_data+0x10>

000001ce <__do_clear_bss>:
     1ce:	21 e0       	ldi	r18, 0x01	; 1
     1d0:	ae e2       	ldi	r26, 0x2E	; 46
     1d2:	b1 e0       	ldi	r27, 0x01	; 1
     1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <.do_clear_bss_start>

000001d6 <.do_clear_bss_loop>:
     1d6:	1d 92       	st	X+, r1

000001d8 <.do_clear_bss_start>:
     1d8:	ac 37       	cpi	r26, 0x7C	; 124
     1da:	b2 07       	cpc	r27, r18
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <.do_clear_bss_loop>
     1de:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <main>
     1e2:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <_exit>

000001e6 <__bad_interrupt>:
     1e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ea <play_note>:
#define B8 0x0005

volatile uint16_t beat;
volatile uint16_t max_beat;
volatile uint8_t  notes;
void play_note(char note, uint8_t flat, uint8_t octave, uint8_t duration) {
     1ea:	0f 93       	push	r16
     1ec:	1f 93       	push	r17
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     1ee:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     1f0:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     1f4:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <max_beat+0x1>
     1fe:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <max_beat>
  switch (octave) {
     202:	04 2f       	mov	r16, r20
     204:	10 e0       	ldi	r17, 0x00	; 0
     206:	09 30       	cpi	r16, 0x09	; 9
     208:	11 05       	cpc	r17, r1
     20a:	28 f0       	brcs	.+10     	; 0x216 <play_note+0x2c>
      case 'G': if(flat){OCR1A=Gb8;}
        else {OCR1A=G8;}
	break;
      } 
      break;
    default: OCR1A=0x0000;
     20c:	1b bc       	out	0x2b, r1	; 43
     20e:	1a bc       	out	0x2a, r1	; 42
  }
}
     210:	1f 91       	pop	r17
     212:	0f 91       	pop	r16
     214:	08 95       	ret
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
     216:	f8 01       	movw	r30, r16
     218:	ea 5b       	subi	r30, 0xBA	; 186
     21a:	ff 4f       	sbci	r31, 0xFF	; 255
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
     21c:	08 2e       	mov	r0, r24
     21e:	00 0c       	add	r0, r0
     220:	99 0b       	sbc	r25, r25
     222:	aa 0b       	sbc	r26, r26
     224:	bb 0b       	sbc	r27, r27
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
     226:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb6;}
        else {OCR1A=G6;}
	break;
      } 
      break;
    case 7: switch (note) {
     22a:	fc 01       	movw	r30, r24
     22c:	e1 54       	subi	r30, 0x41	; 65
     22e:	f1 09       	sbc	r31, r1
     230:	e7 30       	cpi	r30, 0x07	; 7
     232:	f1 05       	cpc	r31, r1
     234:	68 f7       	brcc	.-38     	; 0x210 <play_note+0x26>
     236:	e1 5b       	subi	r30, 0xB1	; 177
     238:	ff 4f       	sbci	r31, 0xFF	; 255
     23a:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
     23e:	fc 01       	movw	r30, r24
     240:	e1 54       	subi	r30, 0x41	; 65
     242:	f1 09       	sbc	r31, r1
     244:	e7 30       	cpi	r30, 0x07	; 7
     246:	f1 05       	cpc	r31, r1
     248:	18 f7       	brcc	.-58     	; 0x210 <play_note+0x26>
     24a:	ea 5a       	subi	r30, 0xAA	; 170
     24c:	ff 4f       	sbci	r31, 0xFF	; 255
     24e:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__tablejump2__>
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
     252:	fc 01       	movw	r30, r24
     254:	e1 54       	subi	r30, 0x41	; 65
     256:	f1 09       	sbc	r31, r1
     258:	e7 30       	cpi	r30, 0x07	; 7
     25a:	f1 05       	cpc	r31, r1
     25c:	c8 f6       	brcc	.-78     	; 0x210 <play_note+0x26>
     25e:	e3 5a       	subi	r30, 0xA3	; 163
     260:	ff 4f       	sbci	r31, 0xFF	; 255
     262:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb0;}
        else {OCR1A=G0;}
	break;
      } 
      break;
    case 1: switch (note) {
     266:	fc 01       	movw	r30, r24
     268:	e1 54       	subi	r30, 0x41	; 65
     26a:	f1 09       	sbc	r31, r1
     26c:	e7 30       	cpi	r30, 0x07	; 7
     26e:	f1 05       	cpc	r31, r1
     270:	78 f6       	brcc	.-98     	; 0x210 <play_note+0x26>
     272:	ec 59       	subi	r30, 0x9C	; 156
     274:	ff 4f       	sbci	r31, 0xFF	; 255
     276:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb1;}
        else {OCR1A=G1;}
	break;
      } 
      break;
    case 2: switch (note) {
     27a:	fc 01       	movw	r30, r24
     27c:	e1 54       	subi	r30, 0x41	; 65
     27e:	f1 09       	sbc	r31, r1
     280:	e7 30       	cpi	r30, 0x07	; 7
     282:	f1 05       	cpc	r31, r1
     284:	28 f6       	brcc	.-118    	; 0x210 <play_note+0x26>
     286:	e5 59       	subi	r30, 0x95	; 149
     288:	ff 4f       	sbci	r31, 0xFF	; 255
     28a:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb2;}
        else {OCR1A=G2;}
	break;
      } 
      break;
    case 3: switch (note) {
     28e:	fc 01       	movw	r30, r24
     290:	e1 54       	subi	r30, 0x41	; 65
     292:	f1 09       	sbc	r31, r1
     294:	e7 30       	cpi	r30, 0x07	; 7
     296:	f1 05       	cpc	r31, r1
     298:	08 f0       	brcs	.+2      	; 0x29c <play_note+0xb2>
     29a:	ba cf       	rjmp	.-140    	; 0x210 <play_note+0x26>
     29c:	ee 58       	subi	r30, 0x8E	; 142
     29e:	ff 4f       	sbci	r31, 0xFF	; 255
     2a0:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb3;}
        else {OCR1A=G3;}
	break;
      } 
      break;
    case 4: switch (note) {
     2a4:	fc 01       	movw	r30, r24
     2a6:	e1 54       	subi	r30, 0x41	; 65
     2a8:	f1 09       	sbc	r31, r1
     2aa:	e7 30       	cpi	r30, 0x07	; 7
     2ac:	f1 05       	cpc	r31, r1
     2ae:	08 f0       	brcs	.+2      	; 0x2b2 <play_note+0xc8>
     2b0:	af cf       	rjmp	.-162    	; 0x210 <play_note+0x26>
     2b2:	e7 58       	subi	r30, 0x87	; 135
     2b4:	ff 4f       	sbci	r31, 0xFF	; 255
     2b6:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
	break;
      } 
      break;
    case 5: switch (note) {
     2ba:	fc 01       	movw	r30, r24
     2bc:	e1 54       	subi	r30, 0x41	; 65
     2be:	f1 09       	sbc	r31, r1
     2c0:	e7 30       	cpi	r30, 0x07	; 7
     2c2:	f1 05       	cpc	r31, r1
     2c4:	08 f0       	brcs	.+2      	; 0x2c8 <play_note+0xde>
     2c6:	a4 cf       	rjmp	.-184    	; 0x210 <play_note+0x26>
     2c8:	e0 58       	subi	r30, 0x80	; 128
     2ca:	ff 4f       	sbci	r31, 0xFF	; 255
     2cc:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb5;}
        else {OCR1A=G5;}
	break;
      } 
      break;
    case 6: switch (note) {
     2d0:	fc 01       	movw	r30, r24
     2d2:	e1 54       	subi	r30, 0x41	; 65
     2d4:	f1 09       	sbc	r31, r1
     2d6:	e7 30       	cpi	r30, 0x07	; 7
     2d8:	f1 05       	cpc	r31, r1
     2da:	08 f0       	brcs	.+2      	; 0x2de <play_note+0xf4>
     2dc:	99 cf       	rjmp	.-206    	; 0x210 <play_note+0x26>
     2de:	e9 57       	subi	r30, 0x79	; 121
     2e0:	ff 4f       	sbci	r31, 0xFF	; 255
     2e2:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__tablejump2__>
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
     2e6:	88 e5       	ldi	r24, 0x58	; 88
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	9b bd       	out	0x2b, r25	; 43
     2ec:	8a bd       	out	0x2a, r24	; 42
	break;
     2ee:	90 cf       	rjmp	.-224    	; 0x210 <play_note+0x26>
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
     2f0:	66 23       	and	r22, r22
     2f2:	09 f4       	brne	.+2      	; 0x2f6 <play_note+0x10c>
     2f4:	0f c2       	rjmp	.+1054   	; 0x714 <__LOCK_REGION_LENGTH__+0x314>
     2f6:	83 e6       	ldi	r24, 0x63	; 99
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	9b bd       	out	0x2b, r25	; 43
     2fc:	8a bd       	out	0x2a, r24	; 42
     2fe:	88 cf       	rjmp	.-240    	; 0x210 <play_note+0x26>
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
     300:	66 23       	and	r22, r22
     302:	09 f4       	brne	.+2      	; 0x306 <play_note+0x11c>
     304:	11 c2       	rjmp	.+1058   	; 0x728 <__LOCK_REGION_LENGTH__+0x328>
     306:	8f e6       	ldi	r24, 0x6F	; 111
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	9b bd       	out	0x2b, r25	; 43
     30c:	8a bd       	out	0x2a, r24	; 42
     30e:	80 cf       	rjmp	.-256    	; 0x210 <play_note+0x26>
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
     310:	86 e7       	ldi	r24, 0x76	; 118
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	9b bd       	out	0x2b, r25	; 43
     316:	8a bd       	out	0x2a, r24	; 42
	break;
     318:	7b cf       	rjmp	.-266    	; 0x210 <play_note+0x26>
        else {OCR1A=G5;}
	break;
      } 
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
     31a:	66 23       	and	r22, r22
     31c:	09 f4       	brne	.+2      	; 0x320 <play_note+0x136>
     31e:	ff c1       	rjmp	.+1022   	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
     320:	8a e4       	ldi	r24, 0x4A	; 74
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	9b bd       	out	0x2b, r25	; 43
     326:	8a bd       	out	0x2a, r24	; 42
     328:	73 cf       	rjmp	.-282    	; 0x210 <play_note+0x26>
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
	break;
      case 'G': if(flat){OCR1A=Gb6;}
     32a:	66 23       	and	r22, r22
     32c:	09 f4       	brne	.+2      	; 0x330 <play_note+0x146>
     32e:	01 c2       	rjmp	.+1026   	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
     330:	83 e5       	ldi	r24, 0x53	; 83
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	9b bd       	out	0x2b, r25	; 43
     336:	8a bd       	out	0x2a, r24	; 42
     338:	6b cf       	rjmp	.-298    	; 0x210 <play_note+0x26>
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
     33a:	66 23       	and	r22, r22
     33c:	09 f4       	brne	.+2      	; 0x340 <play_note+0x156>
     33e:	b8 c1       	rjmp	.+880    	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
     340:	82 e4       	ldi	r24, 0x42	; 66
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	9b bd       	out	0x2b, r25	; 43
     346:	8a bd       	out	0x2a, r24	; 42
     348:	63 cf       	rjmp	.-314    	; 0x210 <play_note+0x26>
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
     34a:	81 eb       	ldi	r24, 0xB1	; 177
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	9b bd       	out	0x2b, r25	; 43
     350:	8a bd       	out	0x2a, r24	; 42
	break;
     352:	5e cf       	rjmp	.-324    	; 0x210 <play_note+0x26>
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
     354:	66 23       	and	r22, r22
     356:	09 f4       	brne	.+2      	; 0x35a <play_note+0x170>
     358:	d3 c1       	rjmp	.+934    	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
     35a:	85 e8       	ldi	r24, 0x85	; 133
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	9b bd       	out	0x2b, r25	; 43
     360:	8a bd       	out	0x2a, r24	; 42
     362:	56 cf       	rjmp	.-340    	; 0x210 <play_note+0x26>
        else {OCR1A=G4;}
	break;
      } 
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
     364:	66 23       	and	r22, r22
     366:	09 f4       	brne	.+2      	; 0x36a <play_note+0x180>
     368:	c1 c1       	rjmp	.+898    	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
     36a:	85 e9       	ldi	r24, 0x95	; 149
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	9b bd       	out	0x2b, r25	; 43
     370:	8a bd       	out	0x2a, r24	; 42
     372:	4e cf       	rjmp	.-356    	; 0x210 <play_note+0x26>
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
	break;
      case 'G': if(flat){OCR1A=Gb5;}
     374:	66 23       	and	r22, r22
     376:	09 f4       	brne	.+2      	; 0x37a <play_note+0x190>
     378:	be c1       	rjmp	.+892    	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
     37a:	87 ea       	ldi	r24, 0xA7	; 167
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	9b bd       	out	0x2b, r25	; 43
     380:	8a bd       	out	0x2a, r24	; 42
     382:	46 cf       	rjmp	.-372    	; 0x210 <play_note+0x26>
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
     384:	84 e6       	ldi	r24, 0x64	; 100
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	9b bd       	out	0x2b, r25	; 43
     38a:	8a bd       	out	0x2a, r24	; 42
	break;
     38c:	41 cf       	rjmp	.-382    	; 0x210 <play_note+0x26>
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
     38e:	66 23       	and	r22, r22
     390:	09 f4       	brne	.+2      	; 0x394 <play_note+0x1aa>
     392:	bb c1       	rjmp	.+886    	; 0x70a <__LOCK_REGION_LENGTH__+0x30a>
     394:	80 ee       	ldi	r24, 0xE0	; 224
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	9b bd       	out	0x2b, r25	; 43
     39a:	8a bd       	out	0x2a, r24	; 42
     39c:	39 cf       	rjmp	.-398    	; 0x210 <play_note+0x26>
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
     39e:	8d ee       	ldi	r24, 0xED	; 237
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	9b bd       	out	0x2b, r25	; 43
     3a4:	8a bd       	out	0x2a, r24	; 42
	break;
     3a6:	34 cf       	rjmp	.-408    	; 0x210 <play_note+0x26>
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
     3a8:	66 23       	and	r22, r22
     3aa:	09 f4       	brne	.+2      	; 0x3ae <play_note+0x1c4>
     3ac:	8b c1       	rjmp	.+790    	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
     3ae:	87 ec       	ldi	r24, 0xC7	; 199
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	9b bd       	out	0x2b, r25	; 43
     3b4:	8a bd       	out	0x2a, r24	; 42
     3b6:	2c cf       	rjmp	.-424    	; 0x210 <play_note+0x26>
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
     3b8:	66 23       	and	r22, r22
     3ba:	09 f4       	brne	.+2      	; 0x3be <play_note+0x1d4>
     3bc:	74 c1       	rjmp	.+744    	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
     3be:	80 e9       	ldi	r24, 0x90	; 144
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	9b bd       	out	0x2b, r25	; 43
     3c4:	8a bd       	out	0x2a, r24	; 42
     3c6:	24 cf       	rjmp	.-440    	; 0x210 <play_note+0x26>
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
     3c8:	66 23       	and	r22, r22
     3ca:	09 f4       	brne	.+2      	; 0x3ce <play_note+0x1e4>
     3cc:	cb c1       	rjmp	.+918    	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
     3ce:	84 e8       	ldi	r24, 0x84	; 132
     3d0:	93 e0       	ldi	r25, 0x03	; 3
     3d2:	9b bd       	out	0x2b, r25	; 43
     3d4:	8a bd       	out	0x2a, r24	; 42
     3d6:	1c cf       	rjmp	.-456    	; 0x210 <play_note+0x26>
        else {OCR1A=G3;}
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
     3d8:	66 23       	and	r22, r22
     3da:	09 f4       	brne	.+2      	; 0x3de <play_note+0x1f4>
     3dc:	af c1       	rjmp	.+862    	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
     3de:	8b e2       	ldi	r24, 0x2B	; 43
     3e0:	91 e0       	ldi	r25, 0x01	; 1
     3e2:	9b bd       	out	0x2b, r25	; 43
     3e4:	8a bd       	out	0x2a, r24	; 42
     3e6:	14 cf       	rjmp	.-472    	; 0x210 <play_note+0x26>
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
	break;
      case 'G': if(flat){OCR1A=Gb3;}
     3e8:	66 23       	and	r22, r22
     3ea:	09 f4       	brne	.+2      	; 0x3ee <play_note+0x204>
     3ec:	b1 c1       	rjmp	.+866    	; 0x750 <__LOCK_REGION_LENGTH__+0x350>
     3ee:	82 ea       	ldi	r24, 0xA2	; 162
     3f0:	92 e0       	ldi	r25, 0x02	; 2
     3f2:	9b bd       	out	0x2b, r25	; 43
     3f4:	8a bd       	out	0x2a, r24	; 42
     3f6:	0c cf       	rjmp	.-488    	; 0x210 <play_note+0x26>
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
     3f8:	8c ed       	ldi	r24, 0xDC	; 220
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	9b bd       	out	0x2b, r25	; 43
     3fe:	8a bd       	out	0x2a, r24	; 42
	break;
     400:	07 cf       	rjmp	.-498    	; 0x210 <play_note+0x26>
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
     402:	66 23       	and	r22, r22
     404:	09 f4       	brne	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     406:	59 c1       	rjmp	.+690    	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
     408:	87 e1       	ldi	r24, 0x17	; 23
     40a:	92 e0       	ldi	r25, 0x02	; 2
     40c:	9b bd       	out	0x2b, r25	; 43
     40e:	8a bd       	out	0x2a, r24	; 42
     410:	ff ce       	rjmp	.-514    	; 0x210 <play_note+0x26>
        else {OCR1A=G2;}
	break;
      } 
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
     412:	66 23       	and	r22, r22
     414:	09 f4       	brne	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     416:	b0 c1       	rjmp	.+864    	; 0x778 <__LOCK_REGION_LENGTH__+0x378>
     418:	88 e5       	ldi	r24, 0x58	; 88
     41a:	92 e0       	ldi	r25, 0x02	; 2
     41c:	9b bd       	out	0x2b, r25	; 43
     41e:	8a bd       	out	0x2a, r24	; 42
     420:	f7 ce       	rjmp	.-530    	; 0x210 <play_note+0x26>
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
     422:	8a ec       	ldi	r24, 0xCA	; 202
     424:	92 e0       	ldi	r25, 0x02	; 2
     426:	9b bd       	out	0x2b, r25	; 43
     428:	8a bd       	out	0x2a, r24	; 42
	break;
     42a:	f2 ce       	rjmp	.-540    	; 0x210 <play_note+0x26>
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
     42c:	66 23       	and	r22, r22
     42e:	09 f4       	brne	.+2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     430:	35 c1       	rjmp	.+618    	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
     432:	86 e4       	ldi	r24, 0x46	; 70
     434:	96 e0       	ldi	r25, 0x06	; 6
     436:	9b bd       	out	0x2b, r25	; 43
     438:	8a bd       	out	0x2a, r24	; 42
     43a:	ea ce       	rjmp	.-556    	; 0x210 <play_note+0x26>
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
     43c:	66 23       	and	r22, r22
     43e:	09 f4       	brne	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     440:	82 c1       	rjmp	.+772    	; 0x746 <__LOCK_REGION_LENGTH__+0x346>
     442:	8a e0       	ldi	r24, 0x0A	; 10
     444:	97 e0       	ldi	r25, 0x07	; 7
     446:	9b bd       	out	0x2b, r25	; 43
     448:	8a bd       	out	0x2a, r24	; 42
     44a:	e2 ce       	rjmp	.-572    	; 0x210 <play_note+0x26>
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
     44c:	86 e9       	ldi	r24, 0x96	; 150
     44e:	95 e0       	ldi	r25, 0x05	; 5
     450:	9b bd       	out	0x2b, r25	; 43
     452:	8a bd       	out	0x2a, r24	; 42
	break;
     454:	dd ce       	rjmp	.-582    	; 0x210 <play_note+0x26>
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
     456:	8a eb       	ldi	r24, 0xBA	; 186
     458:	93 e0       	ldi	r25, 0x03	; 3
     45a:	9b bd       	out	0x2b, r25	; 43
     45c:	8a bd       	out	0x2a, r24	; 42
	break;
     45e:	d8 ce       	rjmp	.-592    	; 0x210 <play_note+0x26>
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
     460:	66 23       	and	r22, r22
     462:	09 f4       	brne	.+2      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     464:	7a c1       	rjmp	.+756    	; 0x75a <__LOCK_REGION_LENGTH__+0x35a>
     466:	81 ec       	ldi	r24, 0xC1	; 193
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	9b bd       	out	0x2b, r25	; 43
     46c:	8a bd       	out	0x2a, r24	; 42
     46e:	d0 ce       	rjmp	.-608    	; 0x210 <play_note+0x26>
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
     470:	66 23       	and	r22, r22
     472:	09 f4       	brne	.+2      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     474:	7c c1       	rjmp	.+760    	; 0x76e <__LOCK_REGION_LENGTH__+0x36e>
     476:	8b e0       	ldi	r24, 0x0B	; 11
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	9b bd       	out	0x2b, r25	; 43
     47c:	8a bd       	out	0x2a, r24	; 42
     47e:	c8 ce       	rjmp	.-624    	; 0x210 <play_note+0x26>
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
     480:	66 23       	and	r22, r22
     482:	09 f4       	brne	.+2      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     484:	7e c1       	rjmp	.+764    	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
     486:	80 e5       	ldi	r24, 0x50	; 80
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	9b bd       	out	0x2b, r25	; 43
     48c:	8a bd       	out	0x2a, r24	; 42
     48e:	c0 ce       	rjmp	.-640    	; 0x210 <play_note+0x26>
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
     490:	66 23       	and	r22, r22
     492:	09 f4       	brne	.+2      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     494:	ad c1       	rjmp	.+858    	; 0x7f0 <__LOCK_REGION_LENGTH__+0x3f0>
     496:	82 e2       	ldi	r24, 0x22	; 34
     498:	93 e0       	ldi	r25, 0x03	; 3
     49a:	9b bd       	out	0x2b, r25	; 43
     49c:	8a bd       	out	0x2a, r24	; 42
     49e:	b8 ce       	rjmp	.-656    	; 0x210 <play_note+0x26>
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
     4a0:	86 e7       	ldi	r24, 0x76	; 118
     4a2:	97 e0       	ldi	r25, 0x07	; 7
     4a4:	9b bd       	out	0x2b, r25	; 43
     4a6:	8a bd       	out	0x2a, r24	; 42
	break;
     4a8:	b3 ce       	rjmp	.-666    	; 0x210 <play_note+0x26>
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
     4aa:	66 23       	and	r22, r22
     4ac:	09 f4       	brne	.+2      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4ae:	0f c1       	rjmp	.+542    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
     4b0:	8e ec       	ldi	r24, 0xCE	; 206
     4b2:	92 e1       	ldi	r25, 0x12	; 18
     4b4:	9b bd       	out	0x2b, r25	; 43
     4b6:	8a bd       	out	0x2a, r24	; 42
     4b8:	ab ce       	rjmp	.-682    	; 0x210 <play_note+0x26>
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
	break;
      case 'G': if(flat){OCR1A=Gb0;}
     4ba:	66 23       	and	r22, r22
     4bc:	09 f4       	brne	.+2      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4be:	7a c1       	rjmp	.+756    	; 0x7b4 <__LOCK_REGION_LENGTH__+0x3b4>
     4c0:	8d e1       	ldi	r24, 0x1D	; 29
     4c2:	95 e1       	ldi	r25, 0x15	; 21
     4c4:	9b bd       	out	0x2b, r25	; 43
     4c6:	8a bd       	out	0x2a, r24	; 42
     4c8:	a3 ce       	rjmp	.-698    	; 0x210 <play_note+0x26>
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
     4ca:	66 23       	and	r22, r22
     4cc:	09 f4       	brne	.+2      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4ce:	dc c0       	rjmp	.+440    	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
     4d0:	80 e6       	ldi	r24, 0x60	; 96
     4d2:	98 e0       	ldi	r25, 0x08	; 8
     4d4:	9b bd       	out	0x2b, r25	; 43
     4d6:	8a bd       	out	0x2a, r24	; 42
     4d8:	9b ce       	rjmp	.-714    	; 0x210 <play_note+0x26>
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
	break;
      case 'G': if(flat){OCR1A=Gb8;}
     4da:	66 23       	and	r22, r22
     4dc:	09 f4       	brne	.+2      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     4de:	92 c1       	rjmp	.+804    	; 0x804 <__LOCK_REGION_LENGTH__+0x404>
     4e0:	80 e1       	ldi	r24, 0x10	; 16
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	9b bd       	out	0x2b, r25	; 43
     4e6:	8a bd       	out	0x2a, r24	; 42
     4e8:	93 ce       	rjmp	.-730    	; 0x210 <play_note+0x26>
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
     4ea:	8e e2       	ldi	r24, 0x2E	; 46
     4ec:	9b e0       	ldi	r25, 0x0B	; 11
     4ee:	9b bd       	out	0x2b, r25	; 43
     4f0:	8a bd       	out	0x2a, r24	; 42
	break;
     4f2:	8e ce       	rjmp	.-740    	; 0x210 <play_note+0x26>
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
     4f4:	66 23       	and	r22, r22
     4f6:	09 f4       	brne	.+2      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     4f8:	49 c1       	rjmp	.+658    	; 0x78c <__LOCK_REGION_LENGTH__+0x38c>
     4fa:	8b e1       	ldi	r24, 0x1B	; 27
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	9b bd       	out	0x2b, r25	; 43
     500:	8a bd       	out	0x2a, r24	; 42
     502:	86 ce       	rjmp	.-756    	; 0x210 <play_note+0x26>
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
     504:	8c e1       	ldi	r24, 0x1C	; 28
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	9b bd       	out	0x2b, r25	; 43
     50a:	8a bd       	out	0x2a, r24	; 42
	break;
     50c:	81 ce       	rjmp	.-766    	; 0x210 <play_note+0x26>
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
     50e:	66 23       	and	r22, r22
     510:	09 f4       	brne	.+2      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
     512:	41 c1       	rjmp	.+642    	; 0x796 <__LOCK_REGION_LENGTH__+0x396>
     514:	87 e0       	ldi	r24, 0x07	; 7
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	9b bd       	out	0x2b, r25	; 43
     51a:	8a bd       	out	0x2a, r24	; 42
     51c:	79 ce       	rjmp	.-782    	; 0x210 <play_note+0x26>
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
     51e:	66 23       	and	r22, r22
     520:	09 f4       	brne	.+2      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     522:	da c0       	rjmp	.+436    	; 0x6d8 <__LOCK_REGION_LENGTH__+0x2d8>
     524:	8b e0       	ldi	r24, 0x0B	; 11
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	9b bd       	out	0x2b, r25	; 43
     52a:	8a bd       	out	0x2a, r24	; 42
     52c:	71 ce       	rjmp	.-798    	; 0x210 <play_note+0x26>
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
     52e:	82 e1       	ldi	r24, 0x12	; 18
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	9b bd       	out	0x2b, r25	; 43
     534:	8a bd       	out	0x2a, r24	; 42
	break;
     536:	6c ce       	rjmp	.-808    	; 0x210 <play_note+0x26>
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
     538:	66 23       	and	r22, r22
     53a:	09 f4       	brne	.+2      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
     53c:	9b c0       	rjmp	.+310    	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
     53e:	89 e1       	ldi	r24, 0x19	; 25
     540:	99 e1       	ldi	r25, 0x19	; 25
     542:	9b bd       	out	0x2b, r25	; 43
     544:	8a bd       	out	0x2a, r24	; 42
     546:	64 ce       	rjmp	.-824    	; 0x210 <play_note+0x26>
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
     548:	66 23       	and	r22, r22
     54a:	09 f4       	brne	.+2      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
     54c:	29 c1       	rjmp	.+594    	; 0x7a0 <__LOCK_REGION_LENGTH__+0x3a0>
     54e:	80 e3       	ldi	r24, 0x30	; 48
     550:	9c e1       	ldi	r25, 0x1C	; 28
     552:	9b bd       	out	0x2b, r25	; 43
     554:	8a bd       	out	0x2a, r24	; 42
     556:	5c ce       	rjmp	.-840    	; 0x210 <play_note+0x26>
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
     558:	8c ed       	ldi	r24, 0xDC	; 220
     55a:	9d e1       	ldi	r25, 0x1D	; 29
     55c:	9b bd       	out	0x2b, r25	; 43
     55e:	8a bd       	out	0x2a, r24	; 42
	break;
     560:	57 ce       	rjmp	.-850    	; 0x210 <play_note+0x26>
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
     562:	8a e3       	ldi	r24, 0x3A	; 58
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	9b bd       	out	0x2b, r25	; 43
     568:	8a bd       	out	0x2a, r24	; 42
	break;
     56a:	52 ce       	rjmp	.-860    	; 0x210 <play_note+0x26>
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
     56c:	66 23       	and	r22, r22
     56e:	09 f4       	brne	.+2      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
     570:	35 c1       	rjmp	.+618    	; 0x7dc <__LOCK_REGION_LENGTH__+0x3dc>
     572:	80 e2       	ldi	r24, 0x20	; 32
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	9b bd       	out	0x2b, r25	; 43
     578:	8a bd       	out	0x2a, r24	; 42
     57a:	4a ce       	rjmp	.-876    	; 0x210 <play_note+0x26>
        else {OCR1A=G6;}
	break;
      } 
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
     57c:	66 23       	and	r22, r22
     57e:	09 f4       	brne	.+2      	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
     580:	32 c1       	rjmp	.+612    	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
     582:	84 e2       	ldi	r24, 0x24	; 36
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	9b bd       	out	0x2b, r25	; 43
     588:	8a bd       	out	0x2a, r24	; 42
     58a:	42 ce       	rjmp	.-892    	; 0x210 <play_note+0x26>
      case 'E': if(flat){OCR1A=Eb7;}
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
	break;
      case 'G': if(flat){OCR1A=Gb7;}
     58c:	66 23       	and	r22, r22
     58e:	09 f4       	brne	.+2      	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
     590:	76 c0       	rjmp	.+236    	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
     592:	89 e2       	ldi	r24, 0x29	; 41
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	9b bd       	out	0x2b, r25	; 43
     598:	8a bd       	out	0x2a, r24	; 42
     59a:	3a ce       	rjmp	.-908    	; 0x210 <play_note+0x26>
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
	break;
      case 'E': if(flat){OCR1A=Eb7;}
     59c:	66 23       	and	r22, r22
     59e:	09 f4       	brne	.+2      	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     5a0:	78 c0       	rjmp	.+240    	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
     5a2:	81 e3       	ldi	r24, 0x31	; 49
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	9b bd       	out	0x2b, r25	; 43
     5a8:	8a bd       	out	0x2a, r24	; 42
     5aa:	32 ce       	rjmp	.-924    	; 0x210 <play_note+0x26>
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
     5ac:	8b e2       	ldi	r24, 0x2B	; 43
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	9b bd       	out	0x2b, r25	; 43
     5b2:	8a bd       	out	0x2a, r24	; 42
	break;
     5b4:	2d ce       	rjmp	.-934    	; 0x210 <play_note+0x26>
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
     5b6:	66 23       	and	r22, r22
     5b8:	09 f4       	brne	.+2      	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     5ba:	93 c0       	rjmp	.+294    	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
     5bc:	87 e3       	ldi	r24, 0x37	; 55
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	9b bd       	out	0x2b, r25	; 43
     5c2:	8a bd       	out	0x2a, r24	; 42
     5c4:	25 ce       	rjmp	.-950    	; 0x210 <play_note+0x26>
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
     5c6:	66 23       	and	r22, r22
     5c8:	09 f4       	brne	.+2      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     5ca:	4f c0       	rjmp	.+158    	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
     5cc:	88 e1       	ldi	r24, 0x18	; 24
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	9b bd       	out	0x2b, r25	; 43
     5d2:	8a bd       	out	0x2a, r24	; 42
     5d4:	1d ce       	rjmp	.-966    	; 0x210 <play_note+0x26>
        else {OCR1A=G1;}
	break;
      } 
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
     5d6:	66 23       	and	r22, r22
     5d8:	09 f4       	brne	.+2      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
     5da:	f6 c0       	rjmp	.+492    	; 0x7c8 <__LOCK_REGION_LENGTH__+0x3c8>
     5dc:	82 eb       	ldi	r24, 0xB2	; 178
     5de:	94 e0       	ldi	r25, 0x04	; 4
     5e0:	9b bd       	out	0x2b, r25	; 43
     5e2:	8a bd       	out	0x2a, r24	; 42
     5e4:	15 ce       	rjmp	.-982    	; 0x210 <play_note+0x26>
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
	break;
      case 'G': if(flat){OCR1A=Gb1;}
     5e6:	66 23       	and	r22, r22
     5e8:	09 f4       	brne	.+2      	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
     5ea:	16 c1       	rjmp	.+556    	; 0x818 <__LOCK_REGION_LENGTH__+0x418>
     5ec:	8d e8       	ldi	r24, 0x8D	; 141
     5ee:	9a e0       	ldi	r25, 0x0A	; 10
     5f0:	9b bd       	out	0x2b, r25	; 43
     5f2:	8a bd       	out	0x2a, r24	; 42
     5f4:	0d ce       	rjmp	.-998    	; 0x210 <play_note+0x26>
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
     5f6:	66 23       	and	r22, r22
     5f8:	09 f4       	brne	.+2      	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
     5fa:	d7 c0       	rjmp	.+430    	; 0x7aa <__LOCK_REGION_LENGTH__+0x3aa>
     5fc:	86 e1       	ldi	r24, 0x16	; 22
     5fe:	9e e0       	ldi	r25, 0x0E	; 14
     600:	9b bd       	out	0x2b, r25	; 43
     602:	8a bd       	out	0x2a, r24	; 42
     604:	05 ce       	rjmp	.-1014   	; 0x210 <play_note+0x26>
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
     606:	66 23       	and	r22, r22
     608:	09 f4       	brne	.+2      	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
     60a:	f7 c0       	rjmp	.+494    	; 0x7fa <__LOCK_REGION_LENGTH__+0x3fa>
     60c:	80 ec       	ldi	r24, 0xC0	; 192
     60e:	90 e1       	ldi	r25, 0x10	; 16
     610:	9b bd       	out	0x2b, r25	; 43
     612:	8a bd       	out	0x2a, r24	; 42
     614:	fd cd       	rjmp	.-1030   	; 0x210 <play_note+0x26>
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
     616:	66 23       	and	r22, r22
     618:	09 f4       	brne	.+2      	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
     61a:	d1 c0       	rjmp	.+418    	; 0x7be <__LOCK_REGION_LENGTH__+0x3be>
     61c:	8f e2       	ldi	r24, 0x2F	; 47
     61e:	94 e0       	ldi	r25, 0x04	; 4
     620:	9b bd       	out	0x2b, r25	; 43
     622:	8a bd       	out	0x2a, r24	; 42
     624:	f5 cd       	rjmp	.-1046   	; 0x210 <play_note+0x26>
        else {OCR1A=G0;}
	break;
      } 
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
     626:	66 23       	and	r22, r22
     628:	09 f4       	brne	.+2      	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
     62a:	f1 c0       	rjmp	.+482    	; 0x80e <__LOCK_REGION_LENGTH__+0x40e>
     62c:	87 e6       	ldi	r24, 0x67	; 103
     62e:	99 e0       	ldi	r25, 0x09	; 9
     630:	9b bd       	out	0x2b, r25	; 43
     632:	8a bd       	out	0x2a, r24	; 42
     634:	ed cd       	rjmp	.-1062   	; 0x210 <play_note+0x26>
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
     636:	66 23       	and	r22, r22
     638:	09 f4       	brne	.+2      	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
     63a:	cb c0       	rjmp	.+406    	; 0x7d2 <__LOCK_REGION_LENGTH__+0x3d2>
     63c:	8d e8       	ldi	r24, 0x8D	; 141
     63e:	9c e0       	ldi	r25, 0x0C	; 12
     640:	9b bd       	out	0x2b, r25	; 43
     642:	8a bd       	out	0x2a, r24	; 42
     644:	e5 cd       	rjmp	.-1078   	; 0x210 <play_note+0x26>
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
     646:	8d e5       	ldi	r24, 0x5D	; 93
     648:	96 e1       	ldi	r25, 0x16	; 22
     64a:	9b bd       	out	0x2b, r25	; 43
     64c:	8a bd       	out	0x2a, r24	; 42
	break;
     64e:	e0 cd       	rjmp	.-1088   	; 0x210 <play_note+0x26>
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
	break;
      case 'G': if(flat){OCR1A=Gb2;}
     650:	66 23       	and	r22, r22
     652:	09 f4       	brne	.+2      	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
     654:	e6 c0       	rjmp	.+460    	; 0x822 <__LOCK_REGION_LENGTH__+0x422>
     656:	86 e4       	ldi	r24, 0x46	; 70
     658:	95 e0       	ldi	r25, 0x05	; 5
     65a:	9b bd       	out	0x2b, r25	; 43
     65c:	8a bd       	out	0x2a, r24	; 42
     65e:	d8 cd       	rjmp	.-1104   	; 0x210 <play_note+0x26>
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
     660:	8d ee       	ldi	r24, 0xED	; 237
     662:	9e e0       	ldi	r25, 0x0E	; 14
     664:	9b bd       	out	0x2b, r25	; 43
     666:	8a bd       	out	0x2a, r24	; 42
	break;
     668:	d3 cd       	rjmp	.-1114   	; 0x210 <play_note+0x26>
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
     66a:	85 e1       	ldi	r24, 0x15	; 21
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	9b bd       	out	0x2b, r25	; 43
     670:	8a bd       	out	0x2a, r24	; 42
     672:	ce cd       	rjmp	.-1124   	; 0x210 <play_note+0x26>
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
     674:	82 eb       	ldi	r24, 0xB2	; 178
     676:	97 e1       	ldi	r25, 0x17	; 23
     678:	9b bd       	out	0x2b, r25	; 43
     67a:	8a bd       	out	0x2a, r24	; 42
     67c:	c9 cd       	rjmp	.-1134   	; 0x210 <play_note+0x26>
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
	break;
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
     67e:	86 e2       	ldi	r24, 0x26	; 38
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	9b bd       	out	0x2b, r25	; 43
     684:	8a bd       	out	0x2a, r24	; 42
     686:	c4 cd       	rjmp	.-1144   	; 0x210 <play_note+0x26>
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
     688:	87 ee       	ldi	r24, 0xE7	; 231
     68a:	97 e0       	ldi	r25, 0x07	; 7
     68c:	9b bd       	out	0x2b, r25	; 43
     68e:	8a bd       	out	0x2a, r24	; 42
     690:	bf cd       	rjmp	.-1154   	; 0x210 <play_note+0x26>
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
	break;
      case 'E': if(flat){OCR1A=Eb7;}
        else {OCR1A=E7;}
     692:	8e e2       	ldi	r24, 0x2E	; 46
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	9b bd       	out	0x2b, r25	; 43
     698:	8a bd       	out	0x2a, r24	; 42
     69a:	ba cd       	rjmp	.-1164   	; 0x210 <play_note+0x26>
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
     69c:	8b ee       	ldi	r24, 0xEB	; 235
     69e:	95 e0       	ldi	r25, 0x05	; 5
     6a0:	9b bd       	out	0x2b, r25	; 43
     6a2:	8a bd       	out	0x2a, r24	; 42
     6a4:	b5 cd       	rjmp	.-1174   	; 0x210 <play_note+0x26>
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
     6a6:	8a e7       	ldi	r24, 0x7A	; 122
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	9b bd       	out	0x2b, r25	; 43
     6ac:	8a bd       	out	0x2a, r24	; 42
     6ae:	b0 cd       	rjmp	.-1184   	; 0x210 <play_note+0x26>
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
     6b0:	8e e3       	ldi	r24, 0x3E	; 62
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	9b bd       	out	0x2b, r25	; 43
     6b6:	8a bd       	out	0x2a, r24	; 42
     6b8:	ab cd       	rjmp	.-1194   	; 0x210 <play_note+0x26>
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
     6ba:	89 ef       	ldi	r24, 0xF9	; 249
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	9b bd       	out	0x2b, r25	; 43
     6c0:	8a bd       	out	0x2a, r24	; 42
     6c2:	a6 cd       	rjmp	.-1204   	; 0x210 <play_note+0x26>
	break;
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
     6c4:	8c eb       	ldi	r24, 0xBC	; 188
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	9b bd       	out	0x2b, r25	; 43
     6ca:	8a bd       	out	0x2a, r24	; 42
     6cc:	a1 cd       	rjmp	.-1214   	; 0x210 <play_note+0x26>
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
     6ce:	80 ec       	ldi	r24, 0xC0	; 192
     6d0:	91 e1       	ldi	r25, 0x11	; 17
     6d2:	9b bd       	out	0x2b, r25	; 43
     6d4:	8a bd       	out	0x2a, r24	; 42
     6d6:	9c cd       	rjmp	.-1224   	; 0x210 <play_note+0x26>
	break;
      } 
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
     6d8:	89 e0       	ldi	r24, 0x09	; 9
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	9b bd       	out	0x2b, r25	; 43
     6de:	8a bd       	out	0x2a, r24	; 42
     6e0:	97 cd       	rjmp	.-1234   	; 0x210 <play_note+0x26>
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
     6e2:	84 e3       	ldi	r24, 0x34	; 52
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	9b bd       	out	0x2b, r25	; 43
     6e8:	8a bd       	out	0x2a, r24	; 42
     6ea:	92 cd       	rjmp	.-1244   	; 0x210 <play_note+0x26>
	break;
      } 
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
     6ec:	8d e8       	ldi	r24, 0x8D	; 141
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	9b bd       	out	0x2b, r25	; 43
     6f2:	8a bd       	out	0x2a, r24	; 42
     6f4:	8d cd       	rjmp	.-1254   	; 0x210 <play_note+0x26>
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
	break;
      case 'G': if(flat){OCR1A=Gb5;}
        else {OCR1A=G5;}
     6f6:	8e e9       	ldi	r24, 0x9E	; 158
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	9b bd       	out	0x2b, r25	; 43
     6fc:	8a bd       	out	0x2a, r24	; 42
     6fe:	88 cd       	rjmp	.-1264   	; 0x210 <play_note+0x26>
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
     700:	8d e7       	ldi	r24, 0x7D	; 125
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	9b bd       	out	0x2b, r25	; 43
     706:	8a bd       	out	0x2a, r24	; 42
     708:	83 cd       	rjmp	.-1274   	; 0x210 <play_note+0x26>
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
     70a:	83 ed       	ldi	r24, 0xD3	; 211
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	9b bd       	out	0x2b, r25	; 43
     710:	8a bd       	out	0x2a, r24	; 42
     712:	7e cd       	rjmp	.-1284   	; 0x210 <play_note+0x26>
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
     714:	8d e5       	ldi	r24, 0x5D	; 93
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	9b bd       	out	0x2b, r25	; 43
     71a:	8a bd       	out	0x2a, r24	; 42
     71c:	79 cd       	rjmp	.-1294   	; 0x210 <play_note+0x26>
	break;
      } 
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
     71e:	86 e4       	ldi	r24, 0x46	; 70
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	9b bd       	out	0x2b, r25	; 43
     724:	8a bd       	out	0x2a, r24	; 42
     726:	74 cd       	rjmp	.-1304   	; 0x210 <play_note+0x26>
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
     728:	89 e6       	ldi	r24, 0x69	; 105
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	9b bd       	out	0x2b, r25	; 43
     72e:	8a bd       	out	0x2a, r24	; 42
     730:	6f cd       	rjmp	.-1314   	; 0x210 <play_note+0x26>
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
	break;
      case 'G': if(flat){OCR1A=Gb6;}
        else {OCR1A=G6;}
     732:	8e e4       	ldi	r24, 0x4E	; 78
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	9b bd       	out	0x2b, r25	; 43
     738:	8a bd       	out	0x2a, r24	; 42
     73a:	6a cd       	rjmp	.-1324   	; 0x210 <play_note+0x26>
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
     73c:	8b e1       	ldi	r24, 0x1B	; 27
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	9b bd       	out	0x2b, r25	; 43
     742:	8a bd       	out	0x2a, r24	; 42
     744:	65 cd       	rjmp	.-1334   	; 0x210 <play_note+0x26>
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
     746:	85 ea       	ldi	r24, 0xA5	; 165
     748:	96 e0       	ldi	r25, 0x06	; 6
     74a:	9b bd       	out	0x2b, r25	; 43
     74c:	8a bd       	out	0x2a, r24	; 42
     74e:	60 cd       	rjmp	.-1344   	; 0x210 <play_note+0x26>
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
	break;
      case 'G': if(flat){OCR1A=Gb3;}
        else {OCR1A=G3;}
     750:	8c e7       	ldi	r24, 0x7C	; 124
     752:	92 e0       	ldi	r25, 0x02	; 2
     754:	9b bd       	out	0x2b, r25	; 43
     756:	8a bd       	out	0x2a, r24	; 42
     758:	5b cd       	rjmp	.-1354   	; 0x210 <play_note+0x26>
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
     75a:	88 ea       	ldi	r24, 0xA8	; 168
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	9b bd       	out	0x2b, r25	; 43
     760:	8a bd       	out	0x2a, r24	; 42
     762:	56 cd       	rjmp	.-1364   	; 0x210 <play_note+0x26>
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
     764:	82 e5       	ldi	r24, 0x52	; 82
     766:	93 e0       	ldi	r25, 0x03	; 3
     768:	9b bd       	out	0x2b, r25	; 43
     76a:	8a bd       	out	0x2a, r24	; 42
     76c:	51 cd       	rjmp	.-1374   	; 0x210 <play_note+0x26>
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
     76e:	8c ef       	ldi	r24, 0xFC	; 252
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	9b bd       	out	0x2b, r25	; 43
     774:	8a bd       	out	0x2a, r24	; 42
     776:	4c cd       	rjmp	.-1384   	; 0x210 <play_note+0x26>
	break;
      } 
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
     778:	87 e3       	ldi	r24, 0x37	; 55
     77a:	92 e0       	ldi	r25, 0x02	; 2
     77c:	9b bd       	out	0x2b, r25	; 43
     77e:	8a bd       	out	0x2a, r24	; 42
     780:	47 cd       	rjmp	.-1394   	; 0x210 <play_note+0x26>
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
     782:	8d e3       	ldi	r24, 0x3D	; 61
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	9b bd       	out	0x2b, r25	; 43
     788:	8a bd       	out	0x2a, r24	; 42
     78a:	42 cd       	rjmp	.-1404   	; 0x210 <play_note+0x26>
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
     78c:	89 e1       	ldi	r24, 0x19	; 25
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	9b bd       	out	0x2b, r25	; 43
     792:	8a bd       	out	0x2a, r24	; 42
     794:	3d cd       	rjmp	.-1414   	; 0x210 <play_note+0x26>
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
     796:	85 e0       	ldi	r24, 0x05	; 5
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	9b bd       	out	0x2b, r25	; 43
     79c:	8a bd       	out	0x2a, r24	; 42
     79e:	38 cd       	rjmp	.-1424   	; 0x210 <play_note+0x26>
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
     7a0:	8a e9       	ldi	r24, 0x9A	; 154
     7a2:	9a e1       	ldi	r25, 0x1A	; 26
     7a4:	9b bd       	out	0x2b, r25	; 43
     7a6:	8a bd       	out	0x2a, r24	; 42
     7a8:	33 cd       	rjmp	.-1434   	; 0x210 <play_note+0x26>
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
     7aa:	8c e4       	ldi	r24, 0x4C	; 76
     7ac:	9d e0       	ldi	r25, 0x0D	; 13
     7ae:	9b bd       	out	0x2b, r25	; 43
     7b0:	8a bd       	out	0x2a, r24	; 42
     7b2:	2e cd       	rjmp	.-1444   	; 0x210 <play_note+0x26>
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
	break;
      case 'G': if(flat){OCR1A=Gb0;}
        else {OCR1A=G0;}
     7b4:	8d ee       	ldi	r24, 0xED	; 237
     7b6:	93 e1       	ldi	r25, 0x13	; 19
     7b8:	9b bd       	out	0x2b, r25	; 43
     7ba:	8a bd       	out	0x2a, r24	; 42
     7bc:	29 cd       	rjmp	.-1454   	; 0x210 <play_note+0x26>
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
     7be:	83 ef       	ldi	r24, 0xF3	; 243
     7c0:	93 e0       	ldi	r25, 0x03	; 3
     7c2:	9b bd       	out	0x2b, r25	; 43
     7c4:	8a bd       	out	0x2a, r24	; 42
     7c6:	24 cd       	rjmp	.-1464   	; 0x210 <play_note+0x26>
	break;
      } 
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
     7c8:	8f e6       	ldi	r24, 0x6F	; 111
     7ca:	94 e0       	ldi	r25, 0x04	; 4
     7cc:	9b bd       	out	0x2b, r25	; 43
     7ce:	8a bd       	out	0x2a, r24	; 42
     7d0:	1f cd       	rjmp	.-1474   	; 0x210 <play_note+0x26>
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
     7d2:	88 ed       	ldi	r24, 0xD8	; 216
     7d4:	9b e0       	ldi	r25, 0x0B	; 11
     7d6:	9b bd       	out	0x2b, r25	; 43
     7d8:	8a bd       	out	0x2a, r24	; 42
     7da:	1a cd       	rjmp	.-1484   	; 0x210 <play_note+0x26>
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
     7dc:	8e e1       	ldi	r24, 0x1E	; 30
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	9b bd       	out	0x2b, r25	; 43
     7e2:	8a bd       	out	0x2a, r24	; 42
     7e4:	15 cd       	rjmp	.-1494   	; 0x210 <play_note+0x26>
	break;
      } 
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
     7e6:	82 e2       	ldi	r24, 0x22	; 34
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	9b bd       	out	0x2b, r25	; 43
     7ec:	8a bd       	out	0x2a, r24	; 42
     7ee:	10 cd       	rjmp	.-1504   	; 0x210 <play_note+0x26>
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
     7f0:	85 ef       	ldi	r24, 0xF5	; 245
     7f2:	92 e0       	ldi	r25, 0x02	; 2
     7f4:	9b bd       	out	0x2b, r25	; 43
     7f6:	8a bd       	out	0x2a, r24	; 42
     7f8:	0b cd       	rjmp	.-1514   	; 0x210 <play_note+0x26>
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
     7fa:	80 ed       	ldi	r24, 0xD0	; 208
     7fc:	9f e0       	ldi	r25, 0x0F	; 15
     7fe:	9b bd       	out	0x2b, r25	; 43
     800:	8a bd       	out	0x2a, r24	; 42
     802:	06 cd       	rjmp	.-1524   	; 0x210 <play_note+0x26>
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
	break;
      case 'G': if(flat){OCR1A=Gb8;}
        else {OCR1A=G8;}
     804:	8d e0       	ldi	r24, 0x0D	; 13
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	9b bd       	out	0x2b, r25	; 43
     80a:	8a bd       	out	0x2a, r24	; 42
     80c:	01 cd       	rjmp	.-1534   	; 0x210 <play_note+0x26>
	break;
      } 
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
     80e:	8f ed       	ldi	r24, 0xDF	; 223
     810:	98 e0       	ldi	r25, 0x08	; 8
     812:	9b bd       	out	0x2b, r25	; 43
     814:	8a bd       	out	0x2a, r24	; 42
     816:	fc cc       	rjmp	.-1544   	; 0x210 <play_note+0x26>
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
	break;
      case 'G': if(flat){OCR1A=Gb1;}
        else {OCR1A=G1;}
     818:	86 ef       	ldi	r24, 0xF6	; 246
     81a:	99 e0       	ldi	r25, 0x09	; 9
     81c:	9b bd       	out	0x2b, r25	; 43
     81e:	8a bd       	out	0x2a, r24	; 42
     820:	f7 cc       	rjmp	.-1554   	; 0x210 <play_note+0x26>
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
	break;
      case 'G': if(flat){OCR1A=Gb2;}
        else {OCR1A=G2;}
     822:	8a ef       	ldi	r24, 0xFA	; 250
     824:	94 e0       	ldi	r25, 0x04	; 4
     826:	9b bd       	out	0x2b, r25	; 43
     828:	8a bd       	out	0x2a, r24	; 42
     82a:	f2 cc       	rjmp	.-1564   	; 0x210 <play_note+0x26>

0000082c <play_rest>:
  }
}
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     82c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     82e:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     832:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     83c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
     840:	08 95       	ret

00000842 <music_off>:
}

void music_off(void) {
  //this turns the alarm timer off
  notes=0;
     842:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <notes>
  TCCR1B &= ~((1<<CS11)|(1<<CS10));
     846:	8e b5       	in	r24, 0x2e	; 46
     848:	8c 7f       	andi	r24, 0xFC	; 252
     84a:	8e bd       	out	0x2e, r24	; 46
  //and mutes the output
  PORTD |= mute;
     84c:	92 9a       	sbi	0x12, 2	; 18
     84e:	08 95       	ret

00000850 <music_init>:
  play_song(song, notes);
}

void music_init(void) {
  //initially turned off (use music_on() to turn on)
  TIMSK |= (1<<OCIE1A);  //enable timer interrupt 1 on compare
     850:	87 b7       	in	r24, 0x37	; 55
     852:	80 61       	ori	r24, 0x10	; 16
     854:	87 bf       	out	0x37, r24	; 55
  TCCR1A = 0x00;         //TCNT1, normal port operation
     856:	1f bc       	out	0x2f, r1	; 47
  TCCR1B |= (1<<WGM12);  //CTC, OCR1A = top, clk/64 (250kHz)
     858:	8e b5       	in	r24, 0x2e	; 46
     85a:	88 60       	ori	r24, 0x08	; 8
     85c:	8e bd       	out	0x2e, r24	; 46
  TCCR1C = 0x00;         //no forced compare
     85e:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  OCR1A = 0x0031;        //(use to vary alarm frequency)
     862:	81 e3       	ldi	r24, 0x31	; 49
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	9b bd       	out	0x2b, r25	; 43
     868:	8a bd       	out	0x2a, r24	; 42
  max_beat = duration;
}

void music_off(void) {
  //this turns the alarm timer off
  notes=0;
     86a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <notes>
  TCCR1B &= ~((1<<CS11)|(1<<CS10));
     86e:	8e b5       	in	r24, 0x2e	; 46
     870:	8c 7f       	andi	r24, 0xFC	; 252
     872:	8e bd       	out	0x2e, r24	; 46
  //and mutes the output
  PORTD |= mute;
     874:	92 9a       	sbi	0x12, 2	; 18
  TCCR1A = 0x00;         //TCNT1, normal port operation
  TCCR1B |= (1<<WGM12);  //CTC, OCR1A = top, clk/64 (250kHz)
  TCCR1C = 0x00;         //no forced compare
  OCR1A = 0x0031;        //(use to vary alarm frequency)
  music_off();
  beat = 0;
     876:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     87a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = 0;
     87e:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <max_beat+0x1>
     882:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <max_beat>
  notes = 0;
     886:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <notes>
  song = 0;              //beaver fight song
     88a:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <song>
     88e:	08 95       	ret

00000890 <song0>:
} 
void song0(uint16_t note) { //beaver fight song (Max and Kellen)
  switch (note) {
     890:	86 34       	cpi	r24, 0x46	; 70
     892:	91 05       	cpc	r25, r1
     894:	20 f0       	brcs	.+8      	; 0x89e <song0+0xe>
       break;
    case 68: play_note('F', 0, 4, 24);
       break;
    case 69: play_rest(8);
       break;
    default: notes=-1;
     896:	8f ef       	ldi	r24, 0xFF	; 255
     898:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <notes>
     89c:	08 95       	ret
  max_beat = 0;
  notes = 0;
  song = 0;              //beaver fight song
} 
void song0(uint16_t note) { //beaver fight song (Max and Kellen)
  switch (note) {
     89e:	fc 01       	movw	r30, r24
     8a0:	e2 57       	subi	r30, 0x72	; 114
     8a2:	ff 4f       	sbci	r31, 0xFF	; 255
     8a4:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__tablejump2__>
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     8a8:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     8aa:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     8ae:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     8b2:	82 e0       	ldi	r24, 0x02	; 2
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     8ba:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
     8be:	8b e1       	ldi	r24, 0x1B	; 27
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	9b bd       	out	0x2b, r25	; 43
     8c4:	8a bd       	out	0x2a, r24	; 42
     8c6:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     8c8:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     8ca:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     8ce:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     8d2:	86 e0       	ldi	r24, 0x06	; 6
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     8da:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
     8de:	8b e1       	ldi	r24, 0x1B	; 27
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	9b bd       	out	0x2b, r25	; 43
     8e4:	8a bd       	out	0x2a, r24	; 42
     8e6:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     8e8:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     8ea:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     8ee:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     8f2:	82 e0       	ldi	r24, 0x02	; 2
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     8fa:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
        else {OCR1A=G3;}
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
     8fe:	8b e2       	ldi	r24, 0x2B	; 43
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	9b bd       	out	0x2b, r25	; 43
     904:	8a bd       	out	0x2a, r24	; 42
     906:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     908:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     90a:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     90e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     912:	88 e0       	ldi	r24, 0x08	; 8
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     91a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
     91e:	88 ea       	ldi	r24, 0xA8	; 168
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	9b bd       	out	0x2b, r25	; 43
     924:	8a bd       	out	0x2a, r24	; 42
     926:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     928:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     92a:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     92e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     932:	88 e0       	ldi	r24, 0x08	; 8
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     93a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
     93e:	84 e6       	ldi	r24, 0x64	; 100
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	9b bd       	out	0x2b, r25	; 43
     944:	8a bd       	out	0x2a, r24	; 42
     946:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     948:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     94a:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     94e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     952:	86 e0       	ldi	r24, 0x06	; 6
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     95a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
     95e:	8b e0       	ldi	r24, 0x0B	; 11
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	9b bd       	out	0x2b, r25	; 43
     964:	8a bd       	out	0x2a, r24	; 42
     966:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     968:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     96a:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     96e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     972:	88 e0       	ldi	r24, 0x08	; 8
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     97a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
     97e:	8c ed       	ldi	r24, 0xDC	; 220
     980:	91 e0       	ldi	r25, 0x01	; 1
     982:	9b bd       	out	0x2b, r25	; 43
     984:	8a bd       	out	0x2a, r24	; 42
     986:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     988:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     98a:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     98e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     992:	88 e0       	ldi	r24, 0x08	; 8
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     99a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
     99e:	8b e1       	ldi	r24, 0x1B	; 27
     9a0:	91 e0       	ldi	r25, 0x01	; 1
     9a2:	9b bd       	out	0x2b, r25	; 43
     9a4:	8a bd       	out	0x2a, r24	; 42
     9a6:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     9a8:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     9aa:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     9ae:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     9b2:	88 e0       	ldi	r24, 0x08	; 8
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     9ba:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
     9be:	8d e3       	ldi	r24, 0x3D	; 61
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	9b bd       	out	0x2b, r25	; 43
     9c4:	8a bd       	out	0x2a, r24	; 42
     9c6:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     9c8:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     9ca:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     9ce:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     9d2:	88 e0       	ldi	r24, 0x08	; 8
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     9da:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
     9de:	8a e7       	ldi	r24, 0x7A	; 122
     9e0:	91 e0       	ldi	r25, 0x01	; 1
     9e2:	9b bd       	out	0x2b, r25	; 43
     9e4:	8a bd       	out	0x2a, r24	; 42
     9e6:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     9e8:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     9ea:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     9ee:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     9f2:	80 e1       	ldi	r24, 0x10	; 16
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     9fa:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
     9fe:	8b e1       	ldi	r24, 0x1B	; 27
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	9b bd       	out	0x2b, r25	; 43
     a04:	8a bd       	out	0x2a, r24	; 42
     a06:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     a08:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     a0a:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     a0e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     a12:	84 e0       	ldi	r24, 0x04	; 4
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     a1a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
     a1e:	8d ee       	ldi	r24, 0xED	; 237
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	9b bd       	out	0x2b, r25	; 43
     a24:	8a bd       	out	0x2a, r24	; 42
     a26:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     a28:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     a2a:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     a2e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     a32:	84 e0       	ldi	r24, 0x04	; 4
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     a3a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
     a3e:	83 ed       	ldi	r24, 0xD3	; 211
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	9b bd       	out	0x2b, r25	; 43
     a44:	8a bd       	out	0x2a, r24	; 42
     a46:	08 95       	ret
  }
}
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     a48:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     a4a:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     a4e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;
     a52:	88 e0       	ldi	r24, 0x08	; 8
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     a5a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
     a5e:	08 95       	ret
  }
}
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     a60:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     a62:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     a66:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     a72:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
     a76:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     a78:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     a7a:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     a7e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     a82:	80 e1       	ldi	r24, 0x10	; 16
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     a8a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
     a8e:	8b e0       	ldi	r24, 0x0B	; 11
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	9b bd       	out	0x2b, r25	; 43
     a94:	8a bd       	out	0x2a, r24	; 42
     a96:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     a98:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     a9a:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     a9e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     aa2:	88 e0       	ldi	r24, 0x08	; 8
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     aaa:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
     aae:	8b e0       	ldi	r24, 0x0B	; 11
     ab0:	91 e0       	ldi	r25, 0x01	; 1
     ab2:	9b bd       	out	0x2b, r25	; 43
     ab4:	8a bd       	out	0x2a, r24	; 42
     ab6:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     ab8:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     aba:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     abe:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     ac2:	88 e1       	ldi	r24, 0x18	; 24
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     aca:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
     ace:	8d e3       	ldi	r24, 0x3D	; 61
     ad0:	91 e0       	ldi	r25, 0x01	; 1
     ad2:	9b bd       	out	0x2b, r25	; 43
     ad4:	8a bd       	out	0x2a, r24	; 42
     ad6:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     ad8:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     ada:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     ade:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     ae2:	80 e1       	ldi	r24, 0x10	; 16
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     aea:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
     aee:	83 ed       	ldi	r24, 0xD3	; 211
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	9b bd       	out	0x2b, r25	; 43
     af4:	8a bd       	out	0x2a, r24	; 42
     af6:	08 95       	ret
  }
}
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     af8:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     afa:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     afe:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;
     b02:	82 e0       	ldi	r24, 0x02	; 2
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     b0a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
     b0e:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     b10:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     b12:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     b16:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     b1a:	84 e0       	ldi	r24, 0x04	; 4
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     b22:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
     b26:	8b e1       	ldi	r24, 0x1B	; 27
     b28:	91 e0       	ldi	r25, 0x01	; 1
     b2a:	9b bd       	out	0x2b, r25	; 43
     b2c:	8a bd       	out	0x2a, r24	; 42
     b2e:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     b30:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     b32:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     b36:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     b3a:	86 e0       	ldi	r24, 0x06	; 6
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     b42:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
     b46:	8d e3       	ldi	r24, 0x3D	; 61
     b48:	91 e0       	ldi	r25, 0x01	; 1
     b4a:	9b bd       	out	0x2b, r25	; 43
     b4c:	8a bd       	out	0x2a, r24	; 42
     b4e:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     b50:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     b52:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     b56:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     b5a:	84 e0       	ldi	r24, 0x04	; 4
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     b62:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
     b66:	80 e5       	ldi	r24, 0x50	; 80
     b68:	91 e0       	ldi	r25, 0x01	; 1
     b6a:	9b bd       	out	0x2b, r25	; 43
     b6c:	8a bd       	out	0x2a, r24	; 42
     b6e:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     b70:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     b72:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     b76:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     b7a:	88 e0       	ldi	r24, 0x08	; 8
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     b82:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
     b86:	80 e5       	ldi	r24, 0x50	; 80
     b88:	91 e0       	ldi	r25, 0x01	; 1
     b8a:	9b bd       	out	0x2b, r25	; 43
     b8c:	8a bd       	out	0x2a, r24	; 42
     b8e:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     b90:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     b92:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     b96:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     b9a:	83 e0       	ldi	r24, 0x03	; 3
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     ba2:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
     ba6:	8d e3       	ldi	r24, 0x3D	; 61
     ba8:	91 e0       	ldi	r25, 0x01	; 1
     baa:	9b bd       	out	0x2b, r25	; 43
     bac:	8a bd       	out	0x2a, r24	; 42
     bae:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     bb0:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     bb2:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     bb6:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     bba:	80 e1       	ldi	r24, 0x10	; 16
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     bc2:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
     bc6:	88 ea       	ldi	r24, 0xA8	; 168
     bc8:	91 e0       	ldi	r25, 0x01	; 1
     bca:	9b bd       	out	0x2b, r25	; 43
     bcc:	8a bd       	out	0x2a, r24	; 42
     bce:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     bd0:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     bd2:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     bd6:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     bda:	80 e1       	ldi	r24, 0x10	; 16
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     be2:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
     be6:	8d ee       	ldi	r24, 0xED	; 237
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	9b bd       	out	0x2b, r25	; 43
     bec:	8a bd       	out	0x2a, r24	; 42
     bee:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     bf0:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     bf2:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     bf6:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     bfa:	82 e0       	ldi	r24, 0x02	; 2
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     c02:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
     c06:	8b e0       	ldi	r24, 0x0B	; 11
     c08:	91 e0       	ldi	r25, 0x01	; 1
     c0a:	9b bd       	out	0x2b, r25	; 43
     c0c:	8a bd       	out	0x2a, r24	; 42
     c0e:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     c10:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     c12:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     c16:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     c1a:	84 e0       	ldi	r24, 0x04	; 4
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     c22:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
     c26:	80 ee       	ldi	r24, 0xE0	; 224
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	9b bd       	out	0x2b, r25	; 43
     c2c:	8a bd       	out	0x2a, r24	; 42
     c2e:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     c30:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     c32:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     c36:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     c3a:	84 e0       	ldi	r24, 0x04	; 4
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     c42:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
        else {OCR1A=G3;}
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
     c46:	8b e2       	ldi	r24, 0x2B	; 43
     c48:	91 e0       	ldi	r25, 0x01	; 1
     c4a:	9b bd       	out	0x2b, r25	; 43
     c4c:	8a bd       	out	0x2a, r24	; 42
     c4e:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     c50:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     c52:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     c56:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     c5a:	88 e0       	ldi	r24, 0x08	; 8
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     c62:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
     c66:	8c ef       	ldi	r24, 0xFC	; 252
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	9b bd       	out	0x2b, r25	; 43
     c6c:	8a bd       	out	0x2a, r24	; 42
     c6e:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     c70:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     c72:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     c76:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     c7a:	88 e1       	ldi	r24, 0x18	; 24
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     c82:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
     c86:	84 e6       	ldi	r24, 0x64	; 100
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	9b bd       	out	0x2b, r25	; 43
     c8c:	8a bd       	out	0x2a, r24	; 42
     c8e:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     c90:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     c92:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <beat+0x1>
     c96:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <beat>
  max_beat = duration;  //set the max beat
     c9a:	87 e0       	ldi	r24, 0x07	; 7
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <max_beat+0x1>
     ca2:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <max_beat>
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
     ca6:	8d e3       	ldi	r24, 0x3D	; 61
     ca8:	91 e0       	ldi	r25, 0x01	; 1
     caa:	9b bd       	out	0x2b, r25	; 43
     cac:	8a bd       	out	0x2a, r24	; 42
     cae:	08 95       	ret

00000cb0 <play_song>:
  //if you add a song, you'll have to add it to this
  //switch statement.
  switch (song) {
  case 0: song0(note); //beaver fight song
    break;
  default: song0(note); //defaults to beaver fight song
     cb0:	86 2f       	mov	r24, r22
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0c 94 48 04 	jmp	0x890	; 0x890 <song0>

00000cb8 <music_on>:
  PORTD |= mute;
}

void music_on(void) {
  //this starts the alarm timer running
  notes=0;
     cb8:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <notes>
  TCCR1B |= (1<<CS11)|(1<<CS10);
     cbc:	8e b5       	in	r24, 0x2e	; 46
     cbe:	83 60       	ori	r24, 0x03	; 3
     cc0:	8e bd       	out	0x2e, r24	; 46
  //unmutes the output
  PORTD &= unmute;
     cc2:	92 98       	cbi	0x12, 2	; 18
  //and starts the selected song
  play_song(song, notes);
     cc4:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <notes>
     cc8:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <song>
     ccc:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <play_song>

00000cd0 <SPI_read>:
/*********************************************************************/
//              SPI_read(uint8_t currentBarGraph)
// Sends the bar graph data and then reads the SPI port.
/*********************************************************************/
uint16_t SPI_read(uint8_t currentBarGraph){
  PORTB &= 0x7F;
     cd0:	c7 98       	cbi	0x18, 7	; 24
  SPDR = currentBarGraph;
     cd2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){} //wait till 8 bits have been sent
     cd4:	77 9b       	sbis	0x0e, 7	; 14
     cd6:	fe cf       	rjmp	.-4      	; 0xcd4 <SPI_read+0x4>
  //PORTD = 0xFF;
  //PORTD = 0x00;
  PORTE = 0x00;
     cd8:	13 b8       	out	0x03, r1	; 3
  PORTE = 0xFF;
     cda:	8f ef       	ldi	r24, 0xFF	; 255
     cdc:	83 b9       	out	0x03, r24	; 3
  return(SPDR); //return incoming data from SPDR
     cde:	8f b1       	in	r24, 0x0f	; 15
}
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	08 95       	ret

00000ce4 <chk_buttons>:
// Adapted to check all buttons from Ganssel's "Guide to Debouncing"            
// Expects active low pushbuttons on PINA port.  Debounce time is determined by 
// external loop delay times 12. 
// Edited to have a state array of size 8 for each button
//******************************************************************************
uint8_t chk_buttons(uint8_t buttons) {
     ce4:	48 2f       	mov	r20, r24
  //Gansels debounce with the state as an array that is used to check against the values that buttons is at
  static uint16_t state[8] = {0}; //holds present state
  state[buttons] = (state[buttons] << 1) | (! bit_is_clear(PINA, buttons)) | 0xE000;
     ce6:	e8 2f       	mov	r30, r24
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	99 b3       	in	r25, 0x19	; 25
     cec:	ee 0f       	add	r30, r30
     cee:	ff 1f       	adc	r31, r31
     cf0:	eb 5c       	subi	r30, 0xCB	; 203
     cf2:	fe 4f       	sbci	r31, 0xFE	; 254
     cf4:	20 81       	ld	r18, Z
     cf6:	31 81       	ldd	r19, Z+1	; 0x01
     cf8:	22 0f       	add	r18, r18
     cfa:	33 1f       	adc	r19, r19
     cfc:	30 6e       	ori	r19, 0xE0	; 224
     cfe:	89 2f       	mov	r24, r25
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <chk_buttons+0x24>
     d04:	95 95       	asr	r25
     d06:	87 95       	ror	r24
     d08:	4a 95       	dec	r20
     d0a:	e2 f7       	brpl	.-8      	; 0xd04 <chk_buttons+0x20>
     d0c:	81 70       	andi	r24, 0x01	; 1
     d0e:	99 27       	eor	r25, r25
     d10:	28 2b       	or	r18, r24
     d12:	39 2b       	or	r19, r25
     d14:	31 83       	std	Z+1, r19	; 0x01
     d16:	20 83       	st	Z, r18
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	30 4f       	sbci	r19, 0xF0	; 240
     d1e:	09 f0       	breq	.+2      	; 0xd22 <chk_buttons+0x3e>
     d20:	80 e0       	ldi	r24, 0x00	; 0
  if (state[buttons] == 0xF000) return 1;
  return 0;
}
     d22:	08 95       	ret

00000d24 <segsum>:
//                                   segment_sum                                    
// takes a 16-bit binary input value and places the appropriate equivalent 4 digit 
// BCD segment code in the array segment_data for display.                       
// array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
//***********************************************************************************
void segsum(uint16_t sum) {
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	8c 01       	movw	r16, r24
     d2e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <DecHex>
     d32:	e3 2f       	mov	r30, r19
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	ef 01       	movw	r28, r30
     d38:	21 97       	sbiw	r28, 0x01	; 1
  
  uint8_t  i = 0;
  uint8_t  digitNum = 1;
     d3a:	21 e0       	ldi	r18, 0x01	; 1
  uint16_t sumPlaceHolder = sum;
  while(i < 4 && sumPlaceHolder > (DecHex-1))	
     d3c:	c8 17       	cp	r28, r24
     d3e:	d9 07       	cpc	r29, r25
     d40:	60 f4       	brcc	.+24     	; 0xd5a <segsum+0x36>
  {
    sumPlaceHolder /= DecHex;
     d42:	bf 01       	movw	r22, r30
     d44:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__udivmodhi4>
     d48:	cb 01       	movw	r24, r22
    digitNum++;
     d4a:	2f 5f       	subi	r18, 0xFF	; 255
void segsum(uint16_t sum) {
  
  uint8_t  i = 0;
  uint8_t  digitNum = 1;
  uint16_t sumPlaceHolder = sum;
  while(i < 4 && sumPlaceHolder > (DecHex-1))	
     d4c:	25 30       	cpi	r18, 0x05	; 5
     d4e:	b1 f7       	brne	.-20     	; 0xd3c <segsum+0x18>
      segment_data[1] = hex_to_7seg[(sum/(DecHex*DecHex))%DecHex];
      segment_data[0] = hex_to_7seg[sum/(DecHex*DecHex*DecHex)];
    default:
      break;
  }
}
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	08 95       	ret
    sumPlaceHolder /= DecHex;
    digitNum++;
    i++;
  } 
  // Parses 0-4 digits into seperate segment_data[] locations 
  switch(digitNum)
     d5a:	23 30       	cpi	r18, 0x03	; 3
     d5c:	a1 f0       	breq	.+40     	; 0xd86 <segsum+0x62>
     d5e:	24 30       	cpi	r18, 0x04	; 4
     d60:	09 f4       	brne	.+2      	; 0xd64 <segsum+0x40>
     d62:	55 c0       	rjmp	.+170    	; 0xe0e <segsum+0xea>
     d64:	22 30       	cpi	r18, 0x02	; 2
     d66:	c1 f1       	breq	.+112    	; 0xdd8 <segsum+0xb4>
  {
    case 1:
      segment_data[4] = hex_to_7seg[sum];
     d68:	f8 01       	movw	r30, r16
     d6a:	e9 5f       	subi	r30, 0xF9	; 249
     d6c:	fe 4f       	sbci	r31, 0xFE	; 254
     d6e:	80 81       	ld	r24, Z
     d70:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <segment_data+0x4>
      segment_data[3] = hex_to_7seg[0];// 0xFF;
     d74:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <hex_to_7seg>
     d78:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <segment_data+0x3>
      segment_data[1] = hex_to_7seg[0];//0xFF;
     d7c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <segment_data+0x1>
      segment_data[0] = hex_to_7seg[0];//0xFF;
     d80:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <segment_data>
      break;
     d84:	e5 cf       	rjmp	.-54     	; 0xd50 <segsum+0x2c>
      segment_data[3] = hex_to_7seg[(sum / DecHex)];
      segment_data[1] = hex_to_7seg[0];//0xFF;
      segment_data[0] = hex_to_7seg[0];// 0xFF;
      break;
    case 3:
      segment_data[4] = hex_to_7seg[sum % DecHex];
     d86:	c8 01       	movw	r24, r16
     d88:	bf 01       	movw	r22, r30
     d8a:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__udivmodhi4>
     d8e:	dc 01       	movw	r26, r24
     d90:	a9 5f       	subi	r26, 0xF9	; 249
     d92:	be 4f       	sbci	r27, 0xFE	; 254
     d94:	8c 91       	ld	r24, X
     d96:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <segment_data+0x4>
      segment_data[3] = hex_to_7seg[(sum/DecHex)%DecHex];
     d9a:	cb 01       	movw	r24, r22
     d9c:	bf 01       	movw	r22, r30
     d9e:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__udivmodhi4>
     da2:	fc 01       	movw	r30, r24
     da4:	e9 5f       	subi	r30, 0xF9	; 249
     da6:	fe 4f       	sbci	r31, 0xFE	; 254
     da8:	80 81       	ld	r24, Z
     daa:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <segment_data+0x3>
      segment_data[1] = hex_to_7seg[(sum/(DecHex*DecHex))];
     dae:	33 9f       	mul	r19, r19
     db0:	b0 01       	movw	r22, r0
     db2:	11 24       	eor	r1, r1
     db4:	c8 01       	movw	r24, r16
     db6:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__udivmodhi4>
     dba:	fb 01       	movw	r30, r22
     dbc:	e9 5f       	subi	r30, 0xF9	; 249
     dbe:	fe 4f       	sbci	r31, 0xFE	; 254
     dc0:	80 81       	ld	r24, Z
     dc2:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <segment_data+0x1>
      segment_data[0] = hex_to_7seg[0];//0xFF;
     dc6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <hex_to_7seg>
     dca:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <segment_data>
      segment_data[1] = hex_to_7seg[(sum/(DecHex*DecHex))%DecHex];
      segment_data[0] = hex_to_7seg[sum/(DecHex*DecHex*DecHex)];
    default:
      break;
  }
}
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	08 95       	ret
      segment_data[3] = hex_to_7seg[0];// 0xFF;
      segment_data[1] = hex_to_7seg[0];//0xFF;
      segment_data[0] = hex_to_7seg[0];//0xFF;
      break;
    case 2:
      segment_data[4] = hex_to_7seg[(sum % DecHex)];
     dd8:	c8 01       	movw	r24, r16
     dda:	bf 01       	movw	r22, r30
     ddc:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__udivmodhi4>
     de0:	fc 01       	movw	r30, r24
     de2:	e9 5f       	subi	r30, 0xF9	; 249
     de4:	fe 4f       	sbci	r31, 0xFE	; 254
     de6:	80 81       	ld	r24, Z
     de8:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <segment_data+0x4>
      segment_data[3] = hex_to_7seg[(sum / DecHex)];
     dec:	fb 01       	movw	r30, r22
     dee:	e9 5f       	subi	r30, 0xF9	; 249
     df0:	fe 4f       	sbci	r31, 0xFE	; 254
     df2:	80 81       	ld	r24, Z
     df4:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <segment_data+0x3>
      segment_data[1] = hex_to_7seg[0];//0xFF;
     df8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <hex_to_7seg>
     dfc:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <segment_data+0x1>
      segment_data[0] = hex_to_7seg[0];// 0xFF;
     e00:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <segment_data>
      segment_data[1] = hex_to_7seg[(sum/(DecHex*DecHex))%DecHex];
      segment_data[0] = hex_to_7seg[sum/(DecHex*DecHex*DecHex)];
    default:
      break;
  }
}
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	08 95       	ret
      segment_data[3] = hex_to_7seg[(sum/DecHex)%DecHex];
      segment_data[1] = hex_to_7seg[(sum/(DecHex*DecHex))];
      segment_data[0] = hex_to_7seg[0];//0xFF;
      break;
    case 4:
      segment_data[4] = hex_to_7seg[sum % DecHex];
     e0e:	c8 01       	movw	r24, r16
     e10:	bf 01       	movw	r22, r30
     e12:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__udivmodhi4>
     e16:	dc 01       	movw	r26, r24
     e18:	a9 5f       	subi	r26, 0xF9	; 249
     e1a:	be 4f       	sbci	r27, 0xFE	; 254
     e1c:	8c 91       	ld	r24, X
     e1e:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <segment_data+0x4>
      segment_data[3] = hex_to_7seg[(sum/DecHex)%DecHex];
     e22:	cb 01       	movw	r24, r22
     e24:	bf 01       	movw	r22, r30
     e26:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__udivmodhi4>
     e2a:	dc 01       	movw	r26, r24
     e2c:	a9 5f       	subi	r26, 0xF9	; 249
     e2e:	be 4f       	sbci	r27, 0xFE	; 254
     e30:	8c 91       	ld	r24, X
     e32:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <segment_data+0x3>
      segment_data[1] = hex_to_7seg[(sum/(DecHex*DecHex))%DecHex];
     e36:	33 9f       	mul	r19, r19
     e38:	90 01       	movw	r18, r0
     e3a:	11 24       	eor	r1, r1
     e3c:	c8 01       	movw	r24, r16
     e3e:	b9 01       	movw	r22, r18
     e40:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__udivmodhi4>
     e44:	cb 01       	movw	r24, r22
     e46:	bf 01       	movw	r22, r30
     e48:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__udivmodhi4>
     e4c:	dc 01       	movw	r26, r24
     e4e:	a9 5f       	subi	r26, 0xF9	; 249
     e50:	be 4f       	sbci	r27, 0xFE	; 254
     e52:	8c 91       	ld	r24, X
     e54:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <segment_data+0x1>
      segment_data[0] = hex_to_7seg[sum/(DecHex*DecHex*DecHex)];
     e58:	e2 9f       	mul	r30, r18
     e5a:	b0 01       	movw	r22, r0
     e5c:	e3 9f       	mul	r30, r19
     e5e:	70 0d       	add	r23, r0
     e60:	f2 9f       	mul	r31, r18
     e62:	70 0d       	add	r23, r0
     e64:	11 24       	eor	r1, r1
     e66:	c8 01       	movw	r24, r16
     e68:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__udivmodhi4>
     e6c:	fb 01       	movw	r30, r22
     e6e:	e9 5f       	subi	r30, 0xF9	; 249
     e70:	fe 4f       	sbci	r31, 0xFE	; 254
     e72:	80 81       	ld	r24, Z
     e74:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <segment_data>
    default:
      break;
  }
}
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	1f 91       	pop	r17
     e7e:	0f 91       	pop	r16
     e80:	08 95       	ret

00000e82 <displaySwitch>:
// Takes the segment_data[] array that has the #_DIGIT values and displays it to the 
// current LED digit (displayValue) and returns the next value that will be used for displaying
//***********************************************************************************
uint8_t displaySwitch(uint8_t displayValue)
{
  switch(displayValue){
     e82:	82 30       	cpi	r24, 0x02	; 2
     e84:	c9 f1       	breq	.+114    	; 0xef8 <displaySwitch+0x76>
     e86:	88 f4       	brcc	.+34     	; 0xeaa <displaySwitch+0x28>
     e88:	88 23       	and	r24, r24
     e8a:	81 f1       	breq	.+96     	; 0xeec <displaySwitch+0x6a>
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	f1 f4       	brne	.+60     	; 0xecc <displaySwitch+0x4a>
    case 0:
      PORTB = 0x07;
      PORTA = segment_data[4];
      break;
    case 1:
      PORTB = 0x17;
     e90:	97 e1       	ldi	r25, 0x17	; 23
     e92:	98 bb       	out	0x18, r25	; 24
      PORTA = segment_data[3];
     e94:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <segment_data+0x3>
     e98:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e9a:	ef e9       	ldi	r30, 0x9F	; 159
     e9c:	ff e0       	ldi	r31, 0x0F	; 15
     e9e:	31 97       	sbiw	r30, 0x01	; 1
     ea0:	f1 f7       	brne	.-4      	; 0xe9e <displaySwitch+0x1c>
     ea2:	00 c0       	rjmp	.+0      	; 0xea4 <displaySwitch+0x22>
     ea4:	00 00       	nop
    default:
      break;
  } 
  _delay_ms(1);				//Adds delay for screen congruency
  if(displayValue == 4) return 0; 	//Starts display back to 0
  return ++displayValue; 
     ea6:	8f 5f       	subi	r24, 0xFF	; 255
     ea8:	08 95       	ret
// Takes the segment_data[] array that has the #_DIGIT values and displays it to the 
// current LED digit (displayValue) and returns the next value that will be used for displaying
//***********************************************************************************
uint8_t displaySwitch(uint8_t displayValue)
{
  switch(displayValue){
     eaa:	83 30       	cpi	r24, 0x03	; 3
     eac:	c9 f0       	breq	.+50     	; 0xee0 <displaySwitch+0x5e>
     eae:	84 30       	cpi	r24, 0x04	; 4
     eb0:	69 f4       	brne	.+26     	; 0xecc <displaySwitch+0x4a>
    case 3:
      PORTB = 0x37;
      PORTA = segment_data[1];
      break;
    case 4:
      PORTB = 0x47;
     eb2:	87 e4       	ldi	r24, 0x47	; 71
     eb4:	88 bb       	out	0x18, r24	; 24
      PORTA = segment_data[0];
     eb6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <segment_data>
     eba:	8b bb       	out	0x1b, r24	; 27
     ebc:	8f e9       	ldi	r24, 0x9F	; 159
     ebe:	9f e0       	ldi	r25, 0x0F	; 15
     ec0:	01 97       	sbiw	r24, 0x01	; 1
     ec2:	f1 f7       	brne	.-4      	; 0xec0 <displaySwitch+0x3e>
     ec4:	00 c0       	rjmp	.+0      	; 0xec6 <displaySwitch+0x44>
     ec6:	00 00       	nop
      break;
    default:
      break;
  } 
  _delay_ms(1);				//Adds delay for screen congruency
  if(displayValue == 4) return 0; 	//Starts display back to 0
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	08 95       	ret
     ecc:	ef e9       	ldi	r30, 0x9F	; 159
     ece:	ff e0       	ldi	r31, 0x0F	; 15
     ed0:	31 97       	sbiw	r30, 0x01	; 1
     ed2:	f1 f7       	brne	.-4      	; 0xed0 <displaySwitch+0x4e>
     ed4:	00 c0       	rjmp	.+0      	; 0xed6 <displaySwitch+0x54>
     ed6:	00 00       	nop
     ed8:	84 30       	cpi	r24, 0x04	; 4
     eda:	29 f7       	brne	.-54     	; 0xea6 <displaySwitch+0x24>
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	08 95       	ret
    case 2:
      PORTB = 0x27;
      PORTA = segment_data[2];
      break;
    case 3:
      PORTB = 0x37;
     ee0:	97 e3       	ldi	r25, 0x37	; 55
     ee2:	98 bb       	out	0x18, r25	; 24
      PORTA = segment_data[1];
     ee4:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <segment_data+0x1>
     ee8:	9b bb       	out	0x1b, r25	; 27
      break;
     eea:	d7 cf       	rjmp	.-82     	; 0xe9a <displaySwitch+0x18>
//***********************************************************************************
uint8_t displaySwitch(uint8_t displayValue)
{
  switch(displayValue){
    case 0:
      PORTB = 0x07;
     eec:	97 e0       	ldi	r25, 0x07	; 7
     eee:	98 bb       	out	0x18, r25	; 24
      PORTA = segment_data[4];
     ef0:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <segment_data+0x4>
     ef4:	9b bb       	out	0x1b, r25	; 27
      break;
     ef6:	d1 cf       	rjmp	.-94     	; 0xe9a <displaySwitch+0x18>
    case 1:
      PORTB = 0x17;
      PORTA = segment_data[3];
      break;
    case 2:
      PORTB = 0x27;
     ef8:	97 e2       	ldi	r25, 0x27	; 39
     efa:	98 bb       	out	0x18, r25	; 24
      PORTA = segment_data[2];
     efc:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <segment_data+0x2>
     f00:	9b bb       	out	0x1b, r25	; 27
      break;
     f02:	cb cf       	rjmp	.-106    	; 0xe9a <displaySwitch+0x18>

00000f04 <ButtonCheck>:
// Takes in the current value outputted and returns the adjusted value based on the number
//***********************************************************************************
uint8_t ButtonCheck(uint8_t buttonMode)
{
  //PORTA to input w/ pullups 
  DDRA  = 0x00;	
     f04:	1a ba       	out	0x1a, r1	; 26
  PORTA = 0xFF;
     f06:	9f ef       	ldi	r25, 0xFF	; 255
     f08:	9b bb       	out	0x1b, r25	; 27
  //enable tristate buffer for pushbutton switches via DEC7 on the encoder
  PORTB = 0x70; 
     f0a:	90 e7       	ldi	r25, 0x70	; 112
     f0c:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f0e:	95 e3       	ldi	r25, 0x35	; 53
     f10:	9a 95       	dec	r25
     f12:	f1 f7       	brne	.-4      	; 0xf10 <ButtonCheck+0xc>
     f14:	00 00       	nop
     f16:	e5 e3       	ldi	r30, 0x35	; 53
     f18:	f1 e0       	ldi	r31, 0x01	; 1
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	70 e0       	ldi	r23, 0x00	; 0
  _delay_us(10);		//BUG"Added delay to get first button to work, need better fix
  while(buttonLoop < 8)
  {     
    if(chk_buttons(buttonLoop))
    {
      buttonMode ^= (1<<buttonLoop); 
     f1e:	a1 e0       	ldi	r26, 0x01	; 1
     f20:	b0 e0       	ldi	r27, 0x00	; 0
// Edited to have a state array of size 8 for each button
//******************************************************************************
uint8_t chk_buttons(uint8_t buttons) {
  //Gansels debounce with the state as an array that is used to check against the values that buttons is at
  static uint16_t state[8] = {0}; //holds present state
  state[buttons] = (state[buttons] << 1) | (! bit_is_clear(PINA, buttons)) | 0xE000;
     f22:	99 b3       	in	r25, 0x19	; 25
     f24:	20 81       	ld	r18, Z
     f26:	31 81       	ldd	r19, Z+1	; 0x01
     f28:	22 0f       	add	r18, r18
     f2a:	33 1f       	adc	r19, r19
     f2c:	a9 01       	movw	r20, r18
     f2e:	50 6e       	ori	r21, 0xE0	; 224
     f30:	29 2f       	mov	r18, r25
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	06 2e       	mov	r0, r22
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <ButtonCheck+0x38>
     f38:	35 95       	asr	r19
     f3a:	27 95       	ror	r18
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <ButtonCheck+0x34>
     f40:	21 70       	andi	r18, 0x01	; 1
     f42:	33 27       	eor	r19, r19
     f44:	24 2b       	or	r18, r20
     f46:	35 2b       	or	r19, r21
     f48:	21 93       	st	Z+, r18
     f4a:	31 93       	st	Z+, r19
  if (state[buttons] == 0xF000) return 1;
     f4c:	21 15       	cp	r18, r1
     f4e:	30 4f       	sbci	r19, 0xF0	; 240
     f50:	39 f4       	brne	.+14     	; 0xf60 <ButtonCheck+0x5c>
  _delay_us(10);		//BUG"Added delay to get first button to work, need better fix
  while(buttonLoop < 8)
  {     
    if(chk_buttons(buttonLoop))
    {
      buttonMode ^= (1<<buttonLoop); 
     f52:	9d 01       	movw	r18, r26
     f54:	06 2e       	mov	r0, r22
     f56:	01 c0       	rjmp	.+2      	; 0xf5a <ButtonCheck+0x56>
     f58:	22 0f       	add	r18, r18
     f5a:	0a 94       	dec	r0
     f5c:	ea f7       	brpl	.-6      	; 0xf58 <ButtonCheck+0x54>
     f5e:	82 27       	eor	r24, r18
     f60:	6f 5f       	subi	r22, 0xFF	; 255
     f62:	7f 4f       	sbci	r23, 0xFF	; 255
  PORTA = 0xFF;
  //enable tristate buffer for pushbutton switches via DEC7 on the encoder
  PORTB = 0x70; 
  uint8_t buttonLoop = 0;
  _delay_us(10);		//BUG"Added delay to get first button to work, need better fix
  while(buttonLoop < 8)
     f64:	68 30       	cpi	r22, 0x08	; 8
     f66:	71 05       	cpc	r23, r1
     f68:	e1 f6       	brne	.-72     	; 0xf22 <ButtonCheck+0x1e>
    {
      buttonMode ^= (1<<buttonLoop); 
    }
    buttonLoop++;
  }
  DDRA = 0xFF;
     f6a:	9f ef       	ldi	r25, 0xFF	; 255
     f6c:	9a bb       	out	0x1a, r25	; 26
  return buttonMode;
     f6e:	08 95       	ret

00000f70 <ClockCounterCorrection>:
//                     ClockCounterCorrection(uint16_t displayValue)                                    
// Takes in a value and ensures it is in the format a clock would use
// Returns value in the format HH:MM 
//***********************************************************************************
uint16_t ClockCounterCorrection(uint16_t displayValue)
{
     f70:	48 2f       	mov	r20, r24
  static uint8_t displayValueHours;
  static uint8_t displayValueMins;
  
  displayValueHours = (displayValue / 60);
     f72:	28 2f       	mov	r18, r24
     f74:	39 2f       	mov	r19, r25
     f76:	a9 e8       	ldi	r26, 0x89	; 137
     f78:	b8 e8       	ldi	r27, 0x88	; 136
     f7a:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <__umulhisi3>
     f7e:	9c 01       	movw	r18, r24
     f80:	36 95       	lsr	r19
     f82:	27 95       	ror	r18
     f84:	32 95       	swap	r19
     f86:	22 95       	swap	r18
     f88:	2f 70       	andi	r18, 0x0F	; 15
     f8a:	23 27       	eor	r18, r19
     f8c:	3f 70       	andi	r19, 0x0F	; 15
     f8e:	23 27       	eor	r18, r19
  displayValueMins  = (displayValue - (60 * displayValueHours));
  displayValue      = ((displayValueHours * 100) + displayValueMins);
     f90:	8c e3       	ldi	r24, 0x3C	; 60
     f92:	28 9f       	mul	r18, r24
     f94:	40 19       	sub	r20, r0
     f96:	11 24       	eor	r1, r1
     f98:	84 2f       	mov	r24, r20
     f9a:	90 e0       	ldi	r25, 0x00	; 0
  
  return displayValue;
}
     f9c:	44 e6       	ldi	r20, 0x64	; 100
     f9e:	24 9f       	mul	r18, r20
     fa0:	80 0d       	add	r24, r0
     fa2:	91 1d       	adc	r25, r1
     fa4:	11 24       	eor	r1, r1
     fa6:	08 95       	ret

00000fa8 <EncoderValueDirection>:
  //First If statment checks   0B000000__ 
  //Second If statment checks  0B0000__00 
  
  static uint8_t previousEncoderValue = 0x0F;

  if((previousEncoderValue & 0x03) == 0x00 && (currentEncoderValue & 0x03) == 0x01)
     fa8:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <previousEncoderValue.2341>
     fac:	29 2f       	mov	r18, r25
     fae:	23 70       	andi	r18, 0x03	; 3
     fb0:	71 f4       	brne	.+28     	; 0xfce <EncoderValueDirection+0x26>
     fb2:	28 2f       	mov	r18, r24
     fb4:	23 70       	andi	r18, 0x03	; 3
     fb6:	21 30       	cpi	r18, 0x01	; 1
     fb8:	e9 f0       	breq	.+58     	; 0xff4 <EncoderValueDirection+0x4c>
     fba:	9c 70       	andi	r25, 0x0C	; 12
    previousEncoderValue = (currentEncoderValue & 0x0F);
    return CCW;   
  }
  
  //Checks the second Encoder
  if((previousEncoderValue & 0x0C) == 0x00 && (currentEncoderValue & 0x0C) == 0x04)
     fbc:	91 f4       	brne	.+36     	; 0xfe2 <EncoderValueDirection+0x3a>
     fbe:	98 2f       	mov	r25, r24
     fc0:	9c 70       	andi	r25, 0x0C	; 12
     fc2:	94 30       	cpi	r25, 0x04	; 4
     fc4:	b9 f0       	breq	.+46     	; 0xff4 <EncoderValueDirection+0x4c>
  else if((previousEncoderValue & 0x0C) == 0x04 && (currentEncoderValue & 0x0C) == 0x00)
  {
    previousEncoderValue = (currentEncoderValue & 0x0F);
    return CCW;   
  }
  previousEncoderValue = currentEncoderValue;
     fc6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <previousEncoderValue.2341>
  return 0;
     fca:	80 e0       	ldi	r24, 0x00	; 0
}
     fcc:	08 95       	ret
  if((previousEncoderValue & 0x03) == 0x00 && (currentEncoderValue & 0x03) == 0x01)
  {
    previousEncoderValue = (currentEncoderValue & 0x0F);
    return CW;
  }
  else if((previousEncoderValue & 0x03) == 0x01 && (currentEncoderValue & 0x03) == 0x00)
     fce:	21 30       	cpi	r18, 0x01	; 1
     fd0:	a1 f7       	brne	.-24     	; 0xfba <EncoderValueDirection+0x12>
     fd2:	28 2f       	mov	r18, r24
     fd4:	23 70       	andi	r18, 0x03	; 3
     fd6:	89 f7       	brne	.-30     	; 0xfba <EncoderValueDirection+0x12>
  {
    previousEncoderValue = (currentEncoderValue & 0x0F);
     fd8:	8f 70       	andi	r24, 0x0F	; 15
     fda:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <previousEncoderValue.2341>
    return CCW;   
     fde:	8f ef       	ldi	r24, 0xFF	; 255
     fe0:	08 95       	ret
  if((previousEncoderValue & 0x0C) == 0x00 && (currentEncoderValue & 0x0C) == 0x04)
  {
    previousEncoderValue = (currentEncoderValue & 0x0F);
    return CW;
  }
  else if((previousEncoderValue & 0x0C) == 0x04 && (currentEncoderValue & 0x0C) == 0x00)
     fe2:	94 30       	cpi	r25, 0x04	; 4
     fe4:	81 f7       	brne	.-32     	; 0xfc6 <EncoderValueDirection+0x1e>
     fe6:	98 2f       	mov	r25, r24
     fe8:	9c 70       	andi	r25, 0x0C	; 12
     fea:	b1 f3       	breq	.-20     	; 0xfd8 <EncoderValueDirection+0x30>
  {
    previousEncoderValue = (currentEncoderValue & 0x0F);
    return CCW;   
  }
  previousEncoderValue = currentEncoderValue;
     fec:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <previousEncoderValue.2341>
  return 0;
     ff0:	80 e0       	ldi	r24, 0x00	; 0
}
     ff2:	08 95       	ret
  
  static uint8_t previousEncoderValue = 0x0F;

  if((previousEncoderValue & 0x03) == 0x00 && (currentEncoderValue & 0x03) == 0x01)
  {
    previousEncoderValue = (currentEncoderValue & 0x0F);
     ff4:	8f 70       	andi	r24, 0x0F	; 15
     ff6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <previousEncoderValue.2341>
    return CW;
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	08 95       	ret

00000ffe <__vector_16>:
// Toggles COLON bits
// Counts Seconds, rolls over every 60, increments and rolls clock over 
// Counts up too 255 (which inidcates 1 sec with 32Khz clk & 128 prescale)
//*********************************************************************************
ISR(TIMER0_OVF_vect)
{
     ffe:	1f 92       	push	r1
    1000:	0f 92       	push	r0
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	0f 92       	push	r0
    1006:	11 24       	eor	r1, r1
    1008:	2f 93       	push	r18
    100a:	3f 93       	push	r19
    100c:	8f 93       	push	r24
    100e:	9f 93       	push	r25
  uint16_t ms = 0;	
  static uint8_t currentSeconds = 0;
  static uint8_t snoozeTimer = 0;
  segment_data[2] ^= 0x03;   
    1010:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <segment_data+0x2>
    1014:	83 e0       	ldi	r24, 0x03	; 3
    1016:	82 27       	eor	r24, r18
    1018:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <segment_data+0x2>
  if(currentSeconds < 60)
    101c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <currentSeconds.2348>
    1020:	8c 33       	cpi	r24, 0x3C	; 60
    1022:	a0 f4       	brcc	.+40     	; 0x104c <__vector_16+0x4e>
  {
    if(snoozeFlag == SNOOZEON)
    1024:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <snoozeFlag>
    1028:	91 30       	cpi	r25, 0x01	; 1
    102a:	29 f1       	breq	.+74     	; 0x1076 <__vector_16+0x78>
    102c:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <snoozeTimer.2349>
    {
      snoozeTimer++;
      segment_data[2] ^= 0x04;
    }
    currentSeconds++;
    1030:	8f 5f       	subi	r24, 0xFF	; 255
    1032:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <currentSeconds.2348>
  {
    currentTime++;
    currentSeconds = 0;
  }

  if(snoozeTimer == 10)
    1036:	9a 30       	cpi	r25, 0x0A	; 10
    1038:	c1 f0       	breq	.+48     	; 0x106a <__vector_16+0x6c>
  ms++;
  if(ms % 8 == 0) {
    //for note duration (64th notes) 
    beat++;
  }
}
    103a:	9f 91       	pop	r25
    103c:	8f 91       	pop	r24
    103e:	3f 91       	pop	r19
    1040:	2f 91       	pop	r18
    1042:	0f 90       	pop	r0
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	0f 90       	pop	r0
    1048:	1f 90       	pop	r1
    104a:	18 95       	reti
      segment_data[2] ^= 0x04;
    }
    currentSeconds++;
  }else
  {
    currentTime++;
    104c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
    1050:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
    1054:	01 96       	adiw	r24, 0x01	; 1
    1056:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
    105a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
    currentSeconds = 0;
    105e:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <currentSeconds.2348>
    1062:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <snoozeTimer.2349>
  }

  if(snoozeTimer == 10)
    1066:	9a 30       	cpi	r25, 0x0A	; 10
    1068:	41 f7       	brne	.-48     	; 0x103a <__vector_16+0x3c>
  {
    snoozeFlag = SNOOZEALARM;
    106a:	82 e0       	ldi	r24, 0x02	; 2
    106c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <snoozeFlag>
    snoozeTimer = 0;
    1070:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <snoozeTimer.2349>
  ms++;
  if(ms % 8 == 0) {
    //for note duration (64th notes) 
    beat++;
  }
}
    1074:	e2 cf       	rjmp	.-60     	; 0x103a <__vector_16+0x3c>
  segment_data[2] ^= 0x03;   
  if(currentSeconds < 60)
  {
    if(snoozeFlag == SNOOZEON)
    {
      snoozeTimer++;
    1076:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <snoozeTimer.2349>
    107a:	9f 5f       	subi	r25, 0xFF	; 255
    107c:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <snoozeTimer.2349>
      segment_data[2] ^= 0x04;
    1080:	37 e0       	ldi	r19, 0x07	; 7
    1082:	23 27       	eor	r18, r19
    1084:	20 93 25 01 	sts	0x0125, r18	; 0x800125 <segment_data+0x2>
    1088:	d3 cf       	rjmp	.-90     	; 0x1030 <__vector_16+0x32>

0000108a <__vector_12>:
//                                   ISR(TIMER1_OVF_vect)                                    
// Triggered when TimerCounter1 overflows
//
//*********************************************************************************
ISR(TIMER1_COMPA_vect)
{   PORTD ^= 0b10000000;      //flips the bit, creating a tone
    108a:	1f 92       	push	r1
    108c:	0f 92       	push	r0
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	0f 92       	push	r0
    1092:	11 24       	eor	r1, r1
    1094:	0b b6       	in	r0, 0x3b	; 59
    1096:	0f 92       	push	r0
    1098:	2f 93       	push	r18
    109a:	3f 93       	push	r19
    109c:	4f 93       	push	r20
    109e:	5f 93       	push	r21
    10a0:	6f 93       	push	r22
    10a2:	7f 93       	push	r23
    10a4:	8f 93       	push	r24
    10a6:	9f 93       	push	r25
    10a8:	af 93       	push	r26
    10aa:	bf 93       	push	r27
    10ac:	ef 93       	push	r30
    10ae:	ff 93       	push	r31
    10b0:	82 b3       	in	r24, 0x12	; 18
    10b2:	80 58       	subi	r24, 0x80	; 128
    10b4:	82 bb       	out	0x12, r24	; 18
  if(beat >= max_beat) {   //if we've played the note long enough
    10b6:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <beat>
    10ba:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <beat+0x1>
    10be:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <max_beat>
    10c2:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <max_beat+0x1>
    10c6:	28 17       	cp	r18, r24
    10c8:	39 07       	cpc	r19, r25
    10ca:	58 f0       	brcs	.+22     	; 0x10e2 <__vector_12+0x58>
    notes++;               //move on to the next note
    10cc:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <notes>
    10d0:	8f 5f       	subi	r24, 0xFF	; 255
    10d2:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <notes>
    play_song(song, notes);//and play it
    10d6:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <notes>
    10da:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <song>
    10de:	0e 94 58 06 	call	0xcb0	; 0xcb0 <play_song>
  }
}
    10e2:	ff 91       	pop	r31
    10e4:	ef 91       	pop	r30
    10e6:	bf 91       	pop	r27
    10e8:	af 91       	pop	r26
    10ea:	9f 91       	pop	r25
    10ec:	8f 91       	pop	r24
    10ee:	7f 91       	pop	r23
    10f0:	6f 91       	pop	r22
    10f2:	5f 91       	pop	r21
    10f4:	4f 91       	pop	r20
    10f6:	3f 91       	pop	r19
    10f8:	2f 91       	pop	r18
    10fa:	0f 90       	pop	r0
    10fc:	0b be       	out	0x3b, r0	; 59
    10fe:	0f 90       	pop	r0
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	0f 90       	pop	r0
    1104:	1f 90       	pop	r1
    1106:	18 95       	reti

00001108 <AlarmSetMode>:
// Function entered when the user presses the first button on the button board
// loops until user to inputs time (w/ encoder)
// Once user presses same button, Alarm is set and function is exitted// 
//*********************************************************************************
uint16_t AlarmSetMode(uint8_t alarmOffset)
{
    1108:	cf 93       	push	r28
    110a:	c8 2f       	mov	r28, r24
/*********************************************************************/
//              SPI_read(uint8_t currentBarGraph)
// Sends the bar graph data and then reads the SPI port.
/*********************************************************************/
uint16_t SPI_read(uint8_t currentBarGraph){
  PORTB &= 0x7F;
    110c:	c7 98       	cbi	0x18, 7	; 24
  SPDR = currentBarGraph;
    110e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){} //wait till 8 bits have been sent
    1110:	77 9b       	sbis	0x0e, 7	; 14
    1112:	fe cf       	rjmp	.-4      	; 0x1110 <AlarmSetMode+0x8>
  //PORTD = 0xFF;
  //PORTD = 0x00;
  PORTE = 0x00;
    1114:	13 b8       	out	0x03, r1	; 3
  PORTE = 0xFF;
    1116:	8f ef       	ldi	r24, 0xFF	; 255
    1118:	83 b9       	out	0x03, r24	; 3
  return(SPDR); //return incoming data from SPDR
    111a:	8f b1       	in	r24, 0x0f	; 15
  static uint8_t  currentEncoderValue  = 0;
  static uint16_t encodersDisplayValue  = 0;
  int8_t currentAdjustmentValue = 0;
  static uint16_t  offsetVal = 1439;
  currentEncoderValue = (SPI_read(currentAdjustmentValue));  
  currentAdjustmentValue = EncoderValueDirection(currentEncoderValue);
    111c:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <EncoderValueDirection>
    1120:	48 2f       	mov	r20, r24
  encodersDisplayValue += currentAdjustmentValue;
    1122:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <encodersDisplayValue.2359>
    1126:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <encodersDisplayValue.2359+0x1>
    112a:	c9 01       	movw	r24, r18
    112c:	84 0f       	add	r24, r20
    112e:	91 1d       	adc	r25, r1
    1130:	47 fd       	sbrc	r20, 7
    1132:	9a 95       	dec	r25
    1134:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <encodersDisplayValue.2359+0x1>
    1138:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <encodersDisplayValue.2359>
  // Checks if the clock will roll backwards behind 0
  // 1439 is clock time for 23 : 59
  if(!alarmOffset)
    113c:	c1 11       	cpse	r28, r1
    113e:	1b c0       	rjmp	.+54     	; 0x1176 <AlarmSetMode+0x6e>
  {
    offsetVal = 1439;
    1140:	2f e9       	ldi	r18, 0x9F	; 159
    1142:	35 e0       	ldi	r19, 0x05	; 5
    1144:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <offsetVal.2361+0x1>
    1148:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <offsetVal.2361>
  }else{
    offsetVal = 779;  
  }

  if((encodersDisplayValue == 0) && (currentAdjustmentValue == CCW)) 
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	21 f4       	brne	.+8      	; 0x1158 <AlarmSetMode+0x50>
    1150:	4f 3f       	cpi	r20, 0xFF	; 255
    1152:	c1 f0       	breq	.+48     	; 0x1184 <AlarmSetMode+0x7c>
  {
    if(!offsetVal){ encodersDisplayValue = 0;}
    else{encodersDisplayValue = 0;}//	    encodersDisplayValue = 60;}
  }
  return encodersDisplayValue;
}
    1154:	cf 91       	pop	r28
    1156:	08 95       	ret
  }

  if((encodersDisplayValue == 0) && (currentAdjustmentValue == CCW)) 
  {
    encodersDisplayValue = offsetVal;
  }else if(encodersDisplayValue > offsetVal)
    1158:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <offsetVal.2361>
    115c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <offsetVal.2361+0x1>
    1160:	28 17       	cp	r18, r24
    1162:	39 07       	cpc	r19, r25
    1164:	b8 f7       	brcc	.-18     	; 0x1154 <AlarmSetMode+0x4c>
  {
    if(!offsetVal){ encodersDisplayValue = 0;}
    1166:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <encodersDisplayValue.2359+0x1>
    116a:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <encodersDisplayValue.2359>
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	90 e0       	ldi	r25, 0x00	; 0
    else{encodersDisplayValue = 0;}//	    encodersDisplayValue = 60;}
  }
  return encodersDisplayValue;
}
    1172:	cf 91       	pop	r28
    1174:	08 95       	ret
  // 1439 is clock time for 23 : 59
  if(!alarmOffset)
  {
    offsetVal = 1439;
  }else{
    offsetVal = 779;  
    1176:	2b e0       	ldi	r18, 0x0B	; 11
    1178:	33 e0       	ldi	r19, 0x03	; 3
    117a:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <offsetVal.2361+0x1>
    117e:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <offsetVal.2361>
    1182:	e4 cf       	rjmp	.-56     	; 0x114c <AlarmSetMode+0x44>
  }

  if((encodersDisplayValue == 0) && (currentAdjustmentValue == CCW)) 
  {
    encodersDisplayValue = offsetVal;
    1184:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <offsetVal.2361>
    1188:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <offsetVal.2361+0x1>
    118c:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <encodersDisplayValue.2359+0x1>
    1190:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <encodersDisplayValue.2359>
  {
    if(!offsetVal){ encodersDisplayValue = 0;}
    else{encodersDisplayValue = 0;}//	    encodersDisplayValue = 60;}
  }
  return encodersDisplayValue;
}
    1194:	cf 91       	pop	r28
    1196:	08 95       	ret

00001198 <VolumeSetMode>:
/*********************************************************************/
//              SPI_read(uint8_t currentBarGraph)
// Sends the bar graph data and then reads the SPI port.
/*********************************************************************/
uint16_t SPI_read(uint8_t currentBarGraph){
  PORTB &= 0x7F;
    1198:	c7 98       	cbi	0x18, 7	; 24
  SPDR = currentBarGraph;
    119a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){} //wait till 8 bits have been sent
    119c:	77 9b       	sbis	0x0e, 7	; 14
    119e:	fe cf       	rjmp	.-4      	; 0x119c <VolumeSetMode+0x4>
  //PORTD = 0xFF;
  //PORTD = 0x00;
  PORTE = 0x00;
    11a0:	13 b8       	out	0x03, r1	; 3
  PORTE = 0xFF;
    11a2:	8f ef       	ldi	r24, 0xFF	; 255
    11a4:	83 b9       	out	0x03, r24	; 3
  return(SPDR); //return incoming data from SPDR
    11a6:	8f b1       	in	r24, 0x0f	; 15
  static uint8_t  currentEncoderValue  = 0;
  static uint16_t encodersVolumeValue  = 0xE0;
  int8_t currentAdjustmentValue = 0;
  
  currentEncoderValue = (SPI_read(currentAdjustmentValue));  
  currentAdjustmentValue = EncoderValueDirection(currentEncoderValue);
    11a8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <EncoderValueDirection>
    11ac:	48 2f       	mov	r20, r24
  encodersVolumeValue += currentAdjustmentValue;
    11ae:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    11b2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    11b6:	c9 01       	movw	r24, r18
    11b8:	84 0f       	add	r24, r20
    11ba:	91 1d       	adc	r25, r1
    11bc:	47 fd       	sbrc	r20, 7
    11be:	9a 95       	dec	r25
    11c0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    11c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  if((encodersVolumeValue == 0) && (currentAdjustmentValue == CCW)) 
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	19 f4       	brne	.+6      	; 0x11d2 <VolumeSetMode+0x3a>
    11cc:	4f 3f       	cpi	r20, 0xFF	; 255
    11ce:	61 f0       	breq	.+24     	; 0x11e8 <VolumeSetMode+0x50>
  }else if(encodersVolumeValue > 0xFF)
  {
    encodersVolumeValue = 0;
  }
  return encodersVolumeValue*2;
}
    11d0:	08 95       	ret
  currentAdjustmentValue = EncoderValueDirection(currentEncoderValue);
  encodersVolumeValue += currentAdjustmentValue;
  if((encodersVolumeValue == 0) && (currentAdjustmentValue == CCW)) 
  {
    encodersVolumeValue = 0xFF;
  }else if(encodersVolumeValue > 0xFF)
    11d2:	8f 3f       	cpi	r24, 0xFF	; 255
    11d4:	91 05       	cpc	r25, r1
    11d6:	89 f0       	breq	.+34     	; 0x11fa <VolumeSetMode+0x62>
    11d8:	80 f0       	brcs	.+32     	; 0x11fa <VolumeSetMode+0x62>
  {
    encodersVolumeValue = 0;
    11da:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
    11de:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	90 e0       	ldi	r25, 0x00	; 0
  }
  return encodersVolumeValue*2;
}
    11e6:	08 95       	ret
  currentEncoderValue = (SPI_read(currentAdjustmentValue));  
  currentAdjustmentValue = EncoderValueDirection(currentEncoderValue);
  encodersVolumeValue += currentAdjustmentValue;
  if((encodersVolumeValue == 0) && (currentAdjustmentValue == CCW)) 
  {
    encodersVolumeValue = 0xFF;
    11e8:	8f ef       	ldi	r24, 0xFF	; 255
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    11f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    11f4:	8e ef       	ldi	r24, 0xFE	; 254
    11f6:	91 e0       	ldi	r25, 0x01	; 1
    11f8:	08 95       	ret
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	08 95       	ret

00001200 <init>:
{
//  TCNT0 - Norm Mode | Using external 32kHz clock | 128 Prescale	!Count to 250 using uint8_t to reach 1 second for clock!
//  TCNT1 - CTC  Mode | Pick freuquency      | Output too PD7		!Outputs to summing amp, which gets outputted to speaker!
//  TCNT2 - Fast PWM  | Output to PB7 (OC2)  				!Controls brightness of LED Display!
//  TCNT3 - Fast PWM  | Output to PE5 (OC3C)				!Controls volume to Audio Amp!
DDRA  = 0xFF;	      		    //set port A as input  				
    1200:	8f ef       	ldi	r24, 0xFF	; 255
    1202:	8a bb       	out	0x1a, r24	; 26
DDRB  = 0xFF; 	      		    //set port B as outputs
    1204:	87 bb       	out	0x17, r24	; 23
DDRD  |= (1 << PD7);   		    //Sets Port pin2 D to output
    1206:	8f 9a       	sbi	0x11, 7	; 17
DDRE  |= (1 << PE5) | (1 << PE6);   //Sets Port pin6 E to output
    1208:	82 b1       	in	r24, 0x02	; 2
    120a:	80 66       	ori	r24, 0x60	; 96
    120c:	82 b9       	out	0x02, r24	; 2
PORTD = 0x00;   		    //set port D to LOW
    120e:	12 ba       	out	0x12, r1	; 18
PORTB = 0x10;   		    //set port B to start with LED1  	
    1210:	80 e1       	ldi	r24, 0x10	; 16
    1212:	88 bb       	out	0x18, r24	; 24

ASSR   |= (1 << AS0);			//Use external 32kHz clock 
    1214:	80 b7       	in	r24, 0x30	; 48
    1216:	88 60       	ori	r24, 0x08	; 8
    1218:	80 bf       	out	0x30, r24	; 48
SPCR   |= (1 << SPE)   | (1 << MSTR);	//Enable SPI communication in mastermode
    121a:	8d b1       	in	r24, 0x0d	; 13
    121c:	80 65       	ori	r24, 0x50	; 80
    121e:	8d b9       	out	0x0d, r24	; 13
SPSR    = (1 << SPI2X); 		//SPI at 2x speed (8 MHz)  
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	8e b9       	out	0x0e, r24	; 14
TIMSK  |= (1 << TOIE0) | (1 << OCIE1A);	//enable interrupt on compare & overflow of TCNT1
    1224:	87 b7       	in	r24, 0x37	; 55
    1226:	81 61       	ori	r24, 0x11	; 17
    1228:	87 bf       	out	0x37, r24	; 55
TCCR0  |= (1 << CS00)  | (1 << CS02);	//normal mode, prescale by 128
    122a:	83 b7       	in	r24, 0x33	; 51
    122c:	85 60       	ori	r24, 0x05	; 5
    122e:	83 bf       	out	0x33, r24	; 51
TCCR1A  = 0;
    1230:	1f bc       	out	0x2f, r1	; 47
TCCR1B |= (1 << WGM12); 		//CTC mode clear at TOP immediate
    1232:	8e b5       	in	r24, 0x2e	; 46
    1234:	88 60       	ori	r24, 0x08	; 8
    1236:	8e bd       	out	0x2e, r24	; 46
TCCR1C  = 0;
    1238:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
TCCR3A |= (1 << COM3C1) | (1 << WGM30);	//Set as output compare to OC3C (PE5)
    123c:	eb e8       	ldi	r30, 0x8B	; 139
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	89 60       	ori	r24, 0x09	; 9
    1244:	80 83       	st	Z, r24
//TCCR3A |= (1 << WGM32);
TCCR3B |= (1 << WGM32) | (1 << CS00); 
    1246:	ea e8       	ldi	r30, 0x8A	; 138
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	89 60       	ori	r24, 0x09	; 9
    124e:	80 83       	st	Z, r24
OCR1A  = 0xF0F;
    1250:	8f e0       	ldi	r24, 0x0F	; 15
    1252:	9f e0       	ldi	r25, 0x0F	; 15
    1254:	9b bd       	out	0x2b, r25	; 43
    1256:	8a bd       	out	0x2a, r24	; 42
OCR3C  = 0x00;
    1258:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    125c:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
TCCR2  |= (1 << WGM21) | (1 << WGM20) | (1 << COM21) | (1 << CS21); // Set TCNT2 to fast pwm outputting to OC2 (PB7)
    1260:	85 b5       	in	r24, 0x25	; 37
    1262:	8a 66       	ori	r24, 0x6A	; 106
    1264:	85 bd       	out	0x25, r24	; 37
ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); 		    // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
    1266:	86 b1       	in	r24, 0x06	; 6
    1268:	87 60       	ori	r24, 0x07	; 7
    126a:	86 b9       	out	0x06, r24	; 6
ADMUX  |= (1 << REFS0); // Set ADC reference to AVCC
    126c:	3e 9a       	sbi	0x07, 6	; 7
ADMUX  |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
    126e:	3d 9a       	sbi	0x07, 5	; 7
ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode
    1270:	35 9a       	sbi	0x06, 5	; 6
ADCSRA |= (1 << ADEN);  // Enable ADC
    1272:	37 9a       	sbi	0x06, 7	; 6
ADCSRA |= (1 << ADSC);  // Start A2D Conversions
    1274:	36 9a       	sbi	0x06, 6	; 6
lcd_init();
    1276:	0e 94 77 0b 	call	0x16ee	; 0x16ee <lcd_init>
music_init();
    127a:	0e 94 28 04 	call	0x850	; 0x850 <music_init>
sei();
    127e:	78 94       	sei
    1280:	08 95       	ret

00001282 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1282:	91 e0       	ldi	r25, 0x01	; 1
    1284:	81 11       	cpse	r24, r1
    1286:	01 c0       	rjmp	.+2      	; 0x128a <send_lcd+0x8>
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    128c:	77 9b       	sbis	0x0e, 7	; 14
    128e:	fe cf       	rjmp	.-4      	; 0x128c <send_lcd+0xa>
  SPDR = byte;                        //send payload
    1290:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1292:	77 9b       	sbis	0x0e, 7	; 14
    1294:	fe cf       	rjmp	.-4      	; 0x1292 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1296:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    129a:	88 60       	ori	r24, 0x08	; 8
    129c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12a0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12a4:	87 7f       	andi	r24, 0xF7	; 247
    12a6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12aa:	08 95       	ret

000012ac <refresh_lcd>:
//
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
    12ac:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <i.2094>
    12b0:	82 0f       	add	r24, r18
    12b2:	91 1d       	adc	r25, r1
    12b4:	fc 01       	movw	r30, r24
    12b6:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    12bc:	77 9b       	sbis	0x0e, 7	; 14
    12be:	fe cf       	rjmp	.-4      	; 0x12bc <refresh_lcd+0x10>
  SPDR = byte;                        //send payload
    12c0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    12c2:	77 9b       	sbis	0x0e, 7	; 14
    12c4:	fe cf       	rjmp	.-4      	; 0x12c2 <refresh_lcd+0x16>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    12c6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12ca:	88 60       	ori	r24, 0x08	; 8
    12cc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12d4:	87 7f       	andi	r24, 0xF7	; 247
    12d6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
    12da:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <i.2094>
    12de:	8f 5f       	subi	r24, 0xFF	; 255
    12e0:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <i.2094>
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
    12e4:	80 31       	cpi	r24, 0x10	; 16
    12e6:	d9 f0       	breq	.+54     	; 0x131e <refresh_lcd+0x72>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
    12e8:	80 32       	cpi	r24, 0x20	; 32
    12ea:	09 f0       	breq	.+2      	; 0x12ee <refresh_lcd+0x42>
    12ec:	08 95       	ret
    12ee:	85 ed       	ldi	r24, 0xD5	; 213
    12f0:	8a 95       	dec	r24
    12f2:	f1 f7       	brne	.-4      	; 0x12f0 <refresh_lcd+0x44>
    12f4:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    12f6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    12f8:	77 9b       	sbis	0x0e, 7	; 14
    12fa:	fe cf       	rjmp	.-4      	; 0x12f8 <refresh_lcd+0x4c>
  SPDR = byte;                        //send payload
    12fc:	80 e8       	ldi	r24, 0x80	; 128
    12fe:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1300:	77 9b       	sbis	0x0e, 7	; 14
    1302:	fe cf       	rjmp	.-4      	; 0x1300 <refresh_lcd+0x54>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1304:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1308:	88 60       	ori	r24, 0x08	; 8
    130a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    130e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1312:	87 7f       	andi	r24, 0xF7	; 247
    1314:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
    1318:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <i.2094>
    131c:	08 95       	ret
    131e:	f5 ed       	ldi	r31, 0xD5	; 213
    1320:	fa 95       	dec	r31
    1322:	f1 f7       	brne	.-4      	; 0x1320 <refresh_lcd+0x74>
    1324:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1326:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1328:	77 9b       	sbis	0x0e, 7	; 14
    132a:	fe cf       	rjmp	.-4      	; 0x1328 <refresh_lcd+0x7c>
  SPDR = byte;                        //send payload
    132c:	80 ec       	ldi	r24, 0xC0	; 192
    132e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1330:	77 9b       	sbis	0x0e, 7	; 14
    1332:	fe cf       	rjmp	.-4      	; 0x1330 <refresh_lcd+0x84>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1334:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1338:	88 60       	ori	r24, 0x08	; 8
    133a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    133e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1342:	87 7f       	andi	r24, 0xF7	; 247
    1344:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1348:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <i.2094>
    134c:	cd cf       	rjmp	.-102    	; 0x12e8 <refresh_lcd+0x3c>

0000134e <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    134e:	66 0f       	add	r22, r22
    1350:	66 0f       	add	r22, r22
    1352:	66 0f       	add	r22, r22
    1354:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1356:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1358:	77 9b       	sbis	0x0e, 7	; 14
    135a:	fe cf       	rjmp	.-4      	; 0x1358 <set_custom_character+0xa>
  SPDR = byte;                        //send payload
    135c:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    135e:	77 9b       	sbis	0x0e, 7	; 14
    1360:	fe cf       	rjmp	.-4      	; 0x135e <set_custom_character+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1362:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1366:	28 60       	ori	r18, 0x08	; 8
    1368:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    136c:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1370:	27 7f       	andi	r18, 0xF7	; 247
    1372:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1376:	25 ed       	ldi	r18, 0xD5	; 213
    1378:	2a 95       	dec	r18
    137a:	f1 f7       	brne	.-4      	; 0x1378 <set_custom_character+0x2a>
    137c:	00 00       	nop
    137e:	fc 01       	movw	r30, r24
    1380:	9c 01       	movw	r18, r24
    1382:	28 5f       	subi	r18, 0xF8	; 248
    1384:	3f 4f       	sbci	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1386:	91 e0       	ldi	r25, 0x01	; 1

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    1388:	81 91       	ld	r24, Z+
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    138a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    138c:	77 9b       	sbis	0x0e, 7	; 14
    138e:	fe cf       	rjmp	.-4      	; 0x138c <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
    1390:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1392:	77 9b       	sbis	0x0e, 7	; 14
    1394:	fe cf       	rjmp	.-4      	; 0x1392 <set_custom_character+0x44>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1396:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    139a:	88 60       	ori	r24, 0x08	; 8
    139c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13a0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13a4:	87 7f       	andi	r24, 0xF7	; 247
    13a6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13aa:	85 ed       	ldi	r24, 0xD5	; 213
    13ac:	8a 95       	dec	r24
    13ae:	f1 f7       	brne	.-4      	; 0x13ac <set_custom_character+0x5e>
    13b0:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
    13b2:	e2 17       	cp	r30, r18
    13b4:	f3 07       	cpc	r31, r19
    13b6:	41 f7       	brne	.-48     	; 0x1388 <set_custom_character+0x3a>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
    13b8:	08 95       	ret

000013ba <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
    13ba:	90 e4       	ldi	r25, 0x40	; 64
    13bc:	89 9f       	mul	r24, r25
    13be:	60 0d       	add	r22, r0
    13c0:	11 24       	eor	r1, r1
    13c2:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    13c4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    13c6:	77 9b       	sbis	0x0e, 7	; 14
    13c8:	fe cf       	rjmp	.-4      	; 0x13c6 <set_cursor+0xc>
  SPDR = byte;                        //send payload
    13ca:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    13cc:	77 9b       	sbis	0x0e, 7	; 14
    13ce:	fe cf       	rjmp	.-4      	; 0x13cc <set_cursor+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    13d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13d4:	88 60       	ori	r24, 0x08	; 8
    13d6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13da:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13de:	87 7f       	andi	r24, 0xF7	; 247
    13e0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13e4:	08 95       	ret

000013e6 <uint2lcd>:
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    13e6:	81 11       	cpse	r24, r1
    13e8:	13 c0       	rjmp	.+38     	; 0x1410 <uint2lcd+0x2a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    13ee:	77 9b       	sbis	0x0e, 7	; 14
    13f0:	fe cf       	rjmp	.-4      	; 0x13ee <uint2lcd+0x8>
  SPDR = byte;                        //send payload
    13f2:	80 e3       	ldi	r24, 0x30	; 48
    13f4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    13f6:	77 9b       	sbis	0x0e, 7	; 14
    13f8:	fe cf       	rjmp	.-4      	; 0x13f6 <uint2lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    13fa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13fe:	88 60       	ori	r24, 0x08	; 8
    1400:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1404:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1408:	87 7f       	andi	r24, 0xF7	; 247
    140a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    140e:	08 95       	ret
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
    1410:	84 36       	cpi	r24, 0x64	; 100
    1412:	b0 f4       	brcc	.+44     	; 0x1440 <uint2lcd+0x5a>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
    1414:	8a 30       	cpi	r24, 0x0A	; 10
    1416:	60 f5       	brcc	.+88     	; 0x1470 <uint2lcd+0x8a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1418:	91 e0       	ldi	r25, 0x01	; 1
    141a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    141c:	77 9b       	sbis	0x0e, 7	; 14
    141e:	fe cf       	rjmp	.-4      	; 0x141c <uint2lcd+0x36>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    1420:	9d ec       	ldi	r25, 0xCD	; 205
    1422:	89 9f       	mul	r24, r25
    1424:	91 2d       	mov	r25, r1
    1426:	11 24       	eor	r1, r1
    1428:	96 95       	lsr	r25
    142a:	96 95       	lsr	r25
    142c:	96 95       	lsr	r25
    142e:	2a e0       	ldi	r18, 0x0A	; 10
    1430:	92 9f       	mul	r25, r18
    1432:	80 19       	sub	r24, r0
    1434:	11 24       	eor	r1, r1
    1436:	80 5d       	subi	r24, 0xD0	; 208
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
    1438:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    143a:	77 9b       	sbis	0x0e, 7	; 14
    143c:	fe cf       	rjmp	.-4      	; 0x143a <uint2lcd+0x54>
    143e:	dd cf       	rjmp	.-70     	; 0x13fa <uint2lcd+0x14>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
    1440:	99 e2       	ldi	r25, 0x29	; 41
    1442:	89 9f       	mul	r24, r25
    1444:	91 2d       	mov	r25, r1
    1446:	11 24       	eor	r1, r1
    1448:	92 95       	swap	r25
    144a:	9f 70       	andi	r25, 0x0F	; 15
    144c:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    144e:	21 e0       	ldi	r18, 0x01	; 1
    1450:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1452:	77 9b       	sbis	0x0e, 7	; 14
    1454:	fe cf       	rjmp	.-4      	; 0x1452 <uint2lcd+0x6c>
  SPDR = byte;                        //send payload
    1456:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1458:	77 9b       	sbis	0x0e, 7	; 14
    145a:	fe cf       	rjmp	.-4      	; 0x1458 <uint2lcd+0x72>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    145c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1460:	98 60       	ori	r25, 0x08	; 8
    1462:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1466:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    146a:	97 7f       	andi	r25, 0xF7	; 247
    146c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
    1470:	99 e2       	ldi	r25, 0x29	; 41
    1472:	89 9f       	mul	r24, r25
    1474:	91 2d       	mov	r25, r1
    1476:	11 24       	eor	r1, r1
    1478:	92 95       	swap	r25
    147a:	9f 70       	andi	r25, 0x0F	; 15
    147c:	38 2f       	mov	r19, r24
    147e:	24 e6       	ldi	r18, 0x64	; 100
    1480:	92 9f       	mul	r25, r18
    1482:	30 19       	sub	r19, r0
    1484:	11 24       	eor	r1, r1
    1486:	2d ec       	ldi	r18, 0xCD	; 205
    1488:	32 9f       	mul	r19, r18
    148a:	91 2d       	mov	r25, r1
    148c:	11 24       	eor	r1, r1
    148e:	96 95       	lsr	r25
    1490:	96 95       	lsr	r25
    1492:	96 95       	lsr	r25
    1494:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1496:	21 e0       	ldi	r18, 0x01	; 1
    1498:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    149a:	77 9b       	sbis	0x0e, 7	; 14
    149c:	fe cf       	rjmp	.-4      	; 0x149a <uint2lcd+0xb4>
  SPDR = byte;                        //send payload
    149e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    14a0:	77 9b       	sbis	0x0e, 7	; 14
    14a2:	fe cf       	rjmp	.-4      	; 0x14a0 <uint2lcd+0xba>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    14a4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    14a8:	98 60       	ori	r25, 0x08	; 8
    14aa:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    14ae:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    14b2:	97 7f       	andi	r25, 0xF7	; 247
    14b4:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    14b8:	af cf       	rjmp	.-162    	; 0x1418 <uint2lcd+0x32>

000014ba <int2lcd>:
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    14ba:	87 ff       	sbrs	r24, 7
    else          {uint2lcd(number);                                            }
    14bc:	0c 94 f3 09 	jmp	0x13e6	; 0x13e6 <uint2lcd>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    14c0:	91 e0       	ldi	r25, 0x01	; 1
    14c2:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    14c4:	77 9b       	sbis	0x0e, 7	; 14
    14c6:	fe cf       	rjmp	.-4      	; 0x14c4 <int2lcd+0xa>
  SPDR = byte;                        //send payload
    14c8:	9d e2       	ldi	r25, 0x2D	; 45
    14ca:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    14cc:	77 9b       	sbis	0x0e, 7	; 14
    14ce:	fe cf       	rjmp	.-4      	; 0x14cc <int2lcd+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    14d0:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    14d4:	98 60       	ori	r25, 0x08	; 8
    14d6:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    14da:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    14de:	97 7f       	andi	r25, 0xF7	; 247
    14e0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    14e4:	95 ed       	ldi	r25, 0xD5	; 213
    14e6:	9a 95       	dec	r25
    14e8:	f1 f7       	brne	.-4      	; 0x14e6 <int2lcd+0x2c>
    14ea:	00 00       	nop
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    14ec:	81 95       	neg	r24
    14ee:	0c 94 f3 09 	jmp	0x13e6	; 0x13e6 <uint2lcd>

000014f2 <cursor_on>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    14f2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    14f4:	77 9b       	sbis	0x0e, 7	; 14
    14f6:	fe cf       	rjmp	.-4      	; 0x14f4 <cursor_on+0x2>
  SPDR = byte;                        //send payload
    14f8:	8e e0       	ldi	r24, 0x0E	; 14
    14fa:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    14fc:	77 9b       	sbis	0x0e, 7	; 14
    14fe:	fe cf       	rjmp	.-4      	; 0x14fc <cursor_on+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1500:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1504:	88 60       	ori	r24, 0x08	; 8
    1506:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    150a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    150e:	87 7f       	andi	r24, 0xF7	; 247
    1510:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1514:	08 95       	ret

00001516 <cursor_off>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1516:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1518:	77 9b       	sbis	0x0e, 7	; 14
    151a:	fe cf       	rjmp	.-4      	; 0x1518 <cursor_off+0x2>
  SPDR = byte;                        //send payload
    151c:	8c e0       	ldi	r24, 0x0C	; 12
    151e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1520:	77 9b       	sbis	0x0e, 7	; 14
    1522:	fe cf       	rjmp	.-4      	; 0x1520 <cursor_off+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1524:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1528:	88 60       	ori	r24, 0x08	; 8
    152a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    152e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1532:	87 7f       	andi	r24, 0xF7	; 247
    1534:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1538:	08 95       	ret

0000153a <shift_right>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    153a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    153c:	77 9b       	sbis	0x0e, 7	; 14
    153e:	fe cf       	rjmp	.-4      	; 0x153c <shift_right+0x2>
  SPDR = byte;                        //send payload
    1540:	8e e1       	ldi	r24, 0x1E	; 30
    1542:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1544:	77 9b       	sbis	0x0e, 7	; 14
    1546:	fe cf       	rjmp	.-4      	; 0x1544 <shift_right+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1548:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    154c:	88 60       	ori	r24, 0x08	; 8
    154e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1552:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1556:	87 7f       	andi	r24, 0xF7	; 247
    1558:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    155c:	08 95       	ret

0000155e <shift_left>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    155e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1560:	77 9b       	sbis	0x0e, 7	; 14
    1562:	fe cf       	rjmp	.-4      	; 0x1560 <shift_left+0x2>
  SPDR = byte;                        //send payload
    1564:	88 e1       	ldi	r24, 0x18	; 24
    1566:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1568:	77 9b       	sbis	0x0e, 7	; 14
    156a:	fe cf       	rjmp	.-4      	; 0x1568 <shift_left+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    156c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1570:	88 60       	ori	r24, 0x08	; 8
    1572:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1576:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    157a:	87 7f       	andi	r24, 0xF7	; 247
    157c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1580:	08 95       	ret

00001582 <strobe_lcd>:
    1582:	e2 e6       	ldi	r30, 0x62	; 98
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	88 60       	ori	r24, 0x08	; 8
    158a:	80 83       	st	Z, r24
    158c:	80 81       	ld	r24, Z
    158e:	87 7f       	andi	r24, 0xF7	; 247
    1590:	80 83       	st	Z, r24
    1592:	08 95       	ret

00001594 <clear_display>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1594:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1596:	77 9b       	sbis	0x0e, 7	; 14
    1598:	fe cf       	rjmp	.-4      	; 0x1596 <clear_display+0x2>
  SPDR = byte;                        //send payload
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    159e:	77 9b       	sbis	0x0e, 7	; 14
    15a0:	fe cf       	rjmp	.-4      	; 0x159e <clear_display+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    15a2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15a6:	88 60       	ori	r24, 0x08	; 8
    15a8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15ac:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15b0:	87 7f       	andi	r24, 0xF7	; 247
    15b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15b6:	8f e1       	ldi	r24, 0x1F	; 31
    15b8:	9c e1       	ldi	r25, 0x1C	; 28
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	f1 f7       	brne	.-4      	; 0x15ba <clear_display+0x26>
    15be:	00 c0       	rjmp	.+0      	; 0x15c0 <clear_display+0x2c>
    15c0:	00 00       	nop
    15c2:	08 95       	ret

000015c4 <cursor_home>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    15c4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    15c6:	77 9b       	sbis	0x0e, 7	; 14
    15c8:	fe cf       	rjmp	.-4      	; 0x15c6 <cursor_home+0x2>
  SPDR = byte;                        //send payload
    15ca:	82 e0       	ldi	r24, 0x02	; 2
    15cc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    15ce:	77 9b       	sbis	0x0e, 7	; 14
    15d0:	fe cf       	rjmp	.-4      	; 0x15ce <cursor_home+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    15d2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15d6:	88 60       	ori	r24, 0x08	; 8
    15d8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15e0:	87 7f       	andi	r24, 0xF7	; 247
    15e2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15e6:	8f e6       	ldi	r24, 0x6F	; 111
    15e8:	97 e1       	ldi	r25, 0x17	; 23
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	f1 f7       	brne	.-4      	; 0x15ea <cursor_home+0x26>
    15ee:	00 c0       	rjmp	.+0      	; 0x15f0 <cursor_home+0x2c>
    15f0:	00 00       	nop
    15f2:	08 95       	ret

000015f4 <line2_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    15f4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    15f6:	77 9b       	sbis	0x0e, 7	; 14
    15f8:	fe cf       	rjmp	.-4      	; 0x15f6 <line2_col1+0x2>
  SPDR = byte;                        //send payload
    15fa:	80 ec       	ldi	r24, 0xC0	; 192
    15fc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    15fe:	77 9b       	sbis	0x0e, 7	; 14
    1600:	fe cf       	rjmp	.-4      	; 0x15fe <line2_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1602:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1606:	88 60       	ori	r24, 0x08	; 8
    1608:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    160c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1610:	87 7f       	andi	r24, 0xF7	; 247
    1612:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1616:	08 95       	ret

00001618 <line1_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1618:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    161a:	77 9b       	sbis	0x0e, 7	; 14
    161c:	fe cf       	rjmp	.-4      	; 0x161a <line1_col1+0x2>
  SPDR = byte;                        //send payload
    161e:	80 e8       	ldi	r24, 0x80	; 128
    1620:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1622:	77 9b       	sbis	0x0e, 7	; 14
    1624:	fe cf       	rjmp	.-4      	; 0x1622 <line1_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1626:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    162a:	88 60       	ori	r24, 0x08	; 8
    162c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1630:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1634:	87 7f       	andi	r24, 0xF7	; 247
    1636:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    163a:	08 95       	ret

0000163c <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
    163c:	90 e1       	ldi	r25, 0x10	; 16
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    163e:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
    1640:	20 e2       	ldi	r18, 0x20	; 32
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1642:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1644:	77 9b       	sbis	0x0e, 7	; 14
    1646:	fe cf       	rjmp	.-4      	; 0x1644 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
    1648:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    164a:	77 9b       	sbis	0x0e, 7	; 14
    164c:	fe cf       	rjmp	.-4      	; 0x164a <fill_spaces+0xe>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    164e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1652:	88 60       	ori	r24, 0x08	; 8
    1654:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1658:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    165c:	87 7f       	andi	r24, 0xF7	; 247
    165e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1662:	85 ed       	ldi	r24, 0xD5	; 213
    1664:	8a 95       	dec	r24
    1666:	f1 f7       	brne	.-4      	; 0x1664 <fill_spaces+0x28>
    1668:	00 00       	nop
    166a:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
    166c:	51 f7       	brne	.-44     	; 0x1642 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
    166e:	08 95       	ret

00001670 <char2lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1670:	91 e0       	ldi	r25, 0x01	; 1
    1672:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1674:	77 9b       	sbis	0x0e, 7	; 14
    1676:	fe cf       	rjmp	.-4      	; 0x1674 <char2lcd+0x4>
  SPDR = byte;                        //send payload
    1678:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    167a:	77 9b       	sbis	0x0e, 7	; 14
    167c:	fe cf       	rjmp	.-4      	; 0x167a <char2lcd+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    167e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1682:	88 60       	ori	r24, 0x08	; 8
    1684:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1688:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    168c:	87 7f       	andi	r24, 0xF7	; 247
    168e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1692:	08 95       	ret

00001694 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
    1694:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    1696:	40 e0       	ldi	r20, 0x00	; 0
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	60 e0       	ldi	r22, 0x00	; 0
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    169c:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    169e:	df 01       	movw	r26, r30
    16a0:	a4 0f       	add	r26, r20
    16a2:	b5 1f       	adc	r27, r21
    16a4:	8c 91       	ld	r24, X
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    16a6:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    16a8:	77 9b       	sbis	0x0e, 7	; 14
    16aa:	fe cf       	rjmp	.-4      	; 0x16a8 <string2lcd+0x14>
  SPDR = byte;                        //send payload
    16ac:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    16ae:	77 9b       	sbis	0x0e, 7	; 14
    16b0:	fe cf       	rjmp	.-4      	; 0x16ae <string2lcd+0x1a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    16b2:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16b6:	98 60       	ori	r25, 0x08	; 8
    16b8:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16bc:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16c0:	97 7f       	andi	r25, 0xF7	; 247
    16c2:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16c6:	85 ed       	ldi	r24, 0xD5	; 213
    16c8:	8a 95       	dec	r24
    16ca:	f1 f7       	brne	.-4      	; 0x16c8 <string2lcd+0x34>
    16cc:	00 00       	nop
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    16ce:	6f 5f       	subi	r22, 0xFF	; 255
    16d0:	46 2f       	mov	r20, r22
    16d2:	50 e0       	ldi	r21, 0x00	; 0
    16d4:	df 01       	movw	r26, r30
    16d6:	0d 90       	ld	r0, X+
    16d8:	00 20       	and	r0, r0
    16da:	e9 f7       	brne	.-6      	; 0x16d6 <string2lcd+0x42>
    16dc:	9d 01       	movw	r18, r26
    16de:	2e 1b       	sub	r18, r30
    16e0:	3f 0b       	sbc	r19, r31
    16e2:	22 50       	subi	r18, 0x02	; 2
    16e4:	31 09       	sbc	r19, r1
    16e6:	24 17       	cp	r18, r20
    16e8:	35 07       	cpc	r19, r21
    16ea:	c8 f6       	brcc	.-78     	; 0x169e <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
    16ec:	08 95       	ret

000016ee <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16ee:	8f ef       	ldi	r24, 0xFF	; 255
    16f0:	99 ef       	ldi	r25, 0xF9	; 249
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	f1 f7       	brne	.-4      	; 0x16f2 <lcd_init+0x4>
    16f6:	00 c0       	rjmp	.+0      	; 0x16f8 <lcd_init+0xa>
    16f8:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
    16fa:	88 e0       	ldi	r24, 0x08	; 8
    16fc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1700:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1702:	77 9b       	sbis	0x0e, 7	; 14
    1704:	fe cf       	rjmp	.-4      	; 0x1702 <lcd_init+0x14>
  SPDR = byte;                        //send payload
    1706:	80 e3       	ldi	r24, 0x30	; 48
    1708:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    170a:	77 9b       	sbis	0x0e, 7	; 14
    170c:	fe cf       	rjmp	.-4      	; 0x170a <lcd_init+0x1c>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    170e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1712:	88 60       	ori	r24, 0x08	; 8
    1714:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1718:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    171c:	87 7f       	andi	r24, 0xF7	; 247
    171e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1722:	8f e5       	ldi	r24, 0x5F	; 95
    1724:	9d e6       	ldi	r25, 0x6D	; 109
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <lcd_init+0x38>
    172a:	00 c0       	rjmp	.+0      	; 0x172c <lcd_init+0x3e>
    172c:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    172e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1730:	77 9b       	sbis	0x0e, 7	; 14
    1732:	fe cf       	rjmp	.-4      	; 0x1730 <lcd_init+0x42>
  SPDR = byte;                        //send payload
    1734:	80 e3       	ldi	r24, 0x30	; 48
    1736:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1738:	77 9b       	sbis	0x0e, 7	; 14
    173a:	fe cf       	rjmp	.-4      	; 0x1738 <lcd_init+0x4a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    173c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1740:	88 60       	ori	r24, 0x08	; 8
    1742:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1746:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    174a:	87 7f       	andi	r24, 0xF7	; 247
    174c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1750:	8f e5       	ldi	r24, 0x5F	; 95
    1752:	9d e6       	ldi	r25, 0x6D	; 109
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <lcd_init+0x66>
    1758:	00 c0       	rjmp	.+0      	; 0x175a <lcd_init+0x6c>
    175a:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    175c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    175e:	77 9b       	sbis	0x0e, 7	; 14
    1760:	fe cf       	rjmp	.-4      	; 0x175e <lcd_init+0x70>
  SPDR = byte;                        //send payload
    1762:	80 e3       	ldi	r24, 0x30	; 48
    1764:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1766:	77 9b       	sbis	0x0e, 7	; 14
    1768:	fe cf       	rjmp	.-4      	; 0x1766 <lcd_init+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    176a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    176e:	88 60       	ori	r24, 0x08	; 8
    1770:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1774:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1778:	87 7f       	andi	r24, 0xF7	; 247
    177a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    177e:	8f e5       	ldi	r24, 0x5F	; 95
    1780:	9d e6       	ldi	r25, 0x6D	; 109
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	f1 f7       	brne	.-4      	; 0x1782 <lcd_init+0x94>
    1786:	00 c0       	rjmp	.+0      	; 0x1788 <lcd_init+0x9a>
    1788:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    178a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    178c:	77 9b       	sbis	0x0e, 7	; 14
    178e:	fe cf       	rjmp	.-4      	; 0x178c <lcd_init+0x9e>
  SPDR = byte;                        //send payload
    1790:	88 e3       	ldi	r24, 0x38	; 56
    1792:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1794:	77 9b       	sbis	0x0e, 7	; 14
    1796:	fe cf       	rjmp	.-4      	; 0x1794 <lcd_init+0xa6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1798:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    179c:	88 60       	ori	r24, 0x08	; 8
    179e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    17a2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    17a6:	87 7f       	andi	r24, 0xF7	; 247
    17a8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    17ac:	8f e1       	ldi	r24, 0x1F	; 31
    17ae:	9e e4       	ldi	r25, 0x4E	; 78
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	f1 f7       	brne	.-4      	; 0x17b0 <lcd_init+0xc2>
    17b4:	00 c0       	rjmp	.+0      	; 0x17b6 <lcd_init+0xc8>
    17b6:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    17b8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    17ba:	77 9b       	sbis	0x0e, 7	; 14
    17bc:	fe cf       	rjmp	.-4      	; 0x17ba <lcd_init+0xcc>
  SPDR = byte;                        //send payload
    17be:	88 e0       	ldi	r24, 0x08	; 8
    17c0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    17c2:	77 9b       	sbis	0x0e, 7	; 14
    17c4:	fe cf       	rjmp	.-4      	; 0x17c2 <lcd_init+0xd4>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    17c6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    17ca:	88 60       	ori	r24, 0x08	; 8
    17cc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    17d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    17d4:	87 7f       	andi	r24, 0xF7	; 247
    17d6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    17da:	8f e1       	ldi	r24, 0x1F	; 31
    17dc:	9e e4       	ldi	r25, 0x4E	; 78
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	f1 f7       	brne	.-4      	; 0x17de <lcd_init+0xf0>
    17e2:	00 c0       	rjmp	.+0      	; 0x17e4 <lcd_init+0xf6>
    17e4:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    17e6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    17e8:	77 9b       	sbis	0x0e, 7	; 14
    17ea:	fe cf       	rjmp	.-4      	; 0x17e8 <lcd_init+0xfa>
  SPDR = byte;                        //send payload
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    17f0:	77 9b       	sbis	0x0e, 7	; 14
    17f2:	fe cf       	rjmp	.-4      	; 0x17f0 <lcd_init+0x102>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    17f4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    17f8:	88 60       	ori	r24, 0x08	; 8
    17fa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    17fe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1802:	87 7f       	andi	r24, 0xF7	; 247
    1804:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1808:	8f e1       	ldi	r24, 0x1F	; 31
    180a:	9e e4       	ldi	r25, 0x4E	; 78
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	f1 f7       	brne	.-4      	; 0x180c <lcd_init+0x11e>
    1810:	00 c0       	rjmp	.+0      	; 0x1812 <lcd_init+0x124>
    1812:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1814:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1816:	77 9b       	sbis	0x0e, 7	; 14
    1818:	fe cf       	rjmp	.-4      	; 0x1816 <lcd_init+0x128>
  SPDR = byte;                        //send payload
    181a:	86 e0       	ldi	r24, 0x06	; 6
    181c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    181e:	77 9b       	sbis	0x0e, 7	; 14
    1820:	fe cf       	rjmp	.-4      	; 0x181e <lcd_init+0x130>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1822:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1826:	88 60       	ori	r24, 0x08	; 8
    1828:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    182c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1830:	87 7f       	andi	r24, 0xF7	; 247
    1832:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1836:	8f e1       	ldi	r24, 0x1F	; 31
    1838:	9e e4       	ldi	r25, 0x4E	; 78
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	f1 f7       	brne	.-4      	; 0x183a <lcd_init+0x14c>
    183e:	00 c0       	rjmp	.+0      	; 0x1840 <lcd_init+0x152>
    1840:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1842:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1844:	77 9b       	sbis	0x0e, 7	; 14
    1846:	fe cf       	rjmp	.-4      	; 0x1844 <lcd_init+0x156>
  SPDR = byte;                        //send payload
    1848:	8c e0       	ldi	r24, 0x0C	; 12
    184a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    184c:	77 9b       	sbis	0x0e, 7	; 14
    184e:	fe cf       	rjmp	.-4      	; 0x184c <lcd_init+0x15e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1850:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1854:	88 60       	ori	r24, 0x08	; 8
    1856:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    185a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    185e:	87 7f       	andi	r24, 0xF7	; 247
    1860:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1864:	8f e1       	ldi	r24, 0x1F	; 31
    1866:	9e e4       	ldi	r25, 0x4E	; 78
    1868:	01 97       	sbiw	r24, 0x01	; 1
    186a:	f1 f7       	brne	.-4      	; 0x1868 <lcd_init+0x17a>
    186c:	00 c0       	rjmp	.+0      	; 0x186e <lcd_init+0x180>
    186e:	00 00       	nop
    1870:	08 95       	ret

00001872 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
    1872:	4f 92       	push	r4
    1874:	5f 92       	push	r5
    1876:	6f 92       	push	r6
    1878:	7f 92       	push	r7
    187a:	8f 92       	push	r8
    187c:	9f 92       	push	r9
    187e:	af 92       	push	r10
    1880:	bf 92       	push	r11
    1882:	cf 92       	push	r12
    1884:	df 92       	push	r13
    1886:	ef 92       	push	r14
    1888:	ff 92       	push	r15
    188a:	0f 93       	push	r16
    188c:	1f 93       	push	r17
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	69 97       	sbiw	r28, 0x19	; 25
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61
    18a2:	14 2f       	mov	r17, r20
    18a4:	42 2e       	mov	r4, r18
    18a6:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
    18a8:	00 23       	and	r16, r16
    18aa:	79 f0       	breq	.+30     	; 0x18ca <lcd_int32+0x58>
        bSigned = (qr.quot<0);
    18ac:	6b 01       	movw	r12, r22
    18ae:	7c 01       	movw	r14, r24
    18b0:	cc 24       	eor	r12, r12
    18b2:	f7 fc       	sbrc	r15, 7
    18b4:	c3 94       	inc	r12
    18b6:	dd 24       	eor	r13, r13
    18b8:	ee 24       	eor	r14, r14
    18ba:	ff 24       	eor	r15, r15
    18bc:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
    18be:	6b 01       	movw	r12, r22
    18c0:	7c 01       	movw	r14, r24
    18c2:	97 fd       	sbrc	r25, 7
    18c4:	a3 c0       	rjmp	.+326    	; 0x1a0c <lcd_int32+0x19a>
    18c6:	c7 01       	movw	r24, r14
    18c8:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
    18ca:	44 20       	and	r4, r4
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <lcd_int32+0x5e>
    18ce:	96 c0       	rjmp	.+300    	; 0x19fc <lcd_int32+0x18a>
    18d0:	9e 01       	movw	r18, r28
    18d2:	2f 5f       	subi	r18, 0xFF	; 255
    18d4:	3f 4f       	sbci	r19, 0xFF	; 255
    18d6:	59 01       	movw	r10, r18
    18d8:	49 01       	movw	r8, r18
    18da:	66 24       	eor	r6, r6
    18dc:	6a 94       	dec	r6
    18de:	64 0c       	add	r6, r4
    18e0:	71 2c       	mov	r7, r1
    18e2:	3f ef       	ldi	r19, 0xFF	; 255
    18e4:	63 1a       	sub	r6, r19
    18e6:	73 0a       	sbc	r7, r19
    18e8:	6a 0c       	add	r6, r10
    18ea:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    18ec:	2a e0       	ldi	r18, 0x0A	; 10
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e0       	ldi	r20, 0x00	; 0
    18f2:	50 e0       	ldi	r21, 0x00	; 0
    18f4:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__divmodsi4>
    18f8:	e6 2f       	mov	r30, r22
    18fa:	2a 8b       	std	Y+18, r18	; 0x12
    18fc:	3b 8b       	std	Y+19, r19	; 0x13
    18fe:	4c 8b       	std	Y+20, r20	; 0x14
    1900:	5d 8b       	std	Y+21, r21	; 0x15
    1902:	6a 89       	ldd	r22, Y+18	; 0x12
    1904:	7b 89       	ldd	r23, Y+19	; 0x13
    1906:	8c 89       	ldd	r24, Y+20	; 0x14
    1908:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    190a:	20 e3       	ldi	r18, 0x30	; 48
    190c:	2e 0f       	add	r18, r30
    190e:	f4 01       	movw	r30, r8
    1910:	21 93       	st	Z+, r18
    1912:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
    1914:	6e 16       	cp	r6, r30
    1916:	7f 06       	cpc	r7, r31
    1918:	49 f7       	brne	.-46     	; 0x18ec <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    191a:	99 24       	eor	r9, r9
    191c:	93 94       	inc	r9
    191e:	94 0c       	add	r9, r4
    1920:	f5 01       	movw	r30, r10
    1922:	e4 0d       	add	r30, r4
    1924:	f1 1d       	adc	r31, r1
    1926:	2e e2       	ldi	r18, 0x2E	; 46
    1928:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
    192a:	2a e0       	ldi	r18, 0x0A	; 10
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e0       	ldi	r20, 0x00	; 0
    1930:	50 e0       	ldi	r21, 0x00	; 0
    1932:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__divmodsi4>
    1936:	e6 2f       	mov	r30, r22
    1938:	2a 8b       	std	Y+18, r18	; 0x12
    193a:	3b 8b       	std	Y+19, r19	; 0x13
    193c:	4c 8b       	std	Y+20, r20	; 0x14
    193e:	5d 8b       	std	Y+21, r21	; 0x15
    1940:	6e 8b       	std	Y+22, r22	; 0x16
    1942:	7f 8b       	std	Y+23, r23	; 0x17
    1944:	88 8f       	std	Y+24, r24	; 0x18
    1946:	99 8f       	std	Y+25, r25	; 0x19
    1948:	6a 89       	ldd	r22, Y+18	; 0x12
    194a:	7b 89       	ldd	r23, Y+19	; 0x13
    194c:	8c 89       	ldd	r24, Y+20	; 0x14
    194e:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    1950:	31 e0       	ldi	r19, 0x01	; 1
    1952:	39 0d       	add	r19, r9
    1954:	d5 01       	movw	r26, r10
    1956:	a9 0d       	add	r26, r9
    1958:	b1 1d       	adc	r27, r1
    195a:	e0 5d       	subi	r30, 0xD0	; 208
    195c:	ec 93       	st	X, r30
    195e:	93 2e       	mov	r9, r19
        }while(qr.quot);
    1960:	61 15       	cp	r22, r1
    1962:	71 05       	cpc	r23, r1
    1964:	81 05       	cpc	r24, r1
    1966:	91 05       	cpc	r25, r1
    1968:	01 f7       	brne	.-64     	; 0x192a <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
    196a:	11 23       	and	r17, r17
    196c:	61 f0       	breq	.+24     	; 0x1986 <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    196e:	51 10       	cpse	r5, r1
    1970:	4b c0       	rjmp	.+150    	; 0x1a08 <lcd_int32+0x196>
    1972:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    1974:	31 17       	cp	r19, r17
    1976:	38 f4       	brcc	.+14     	; 0x1986 <lcd_int32+0x114>
    1978:	f5 01       	movw	r30, r10
    197a:	e3 0f       	add	r30, r19
    197c:	f1 1d       	adc	r31, r1
    197e:	90 83       	st	Z, r25
    1980:	3f 5f       	subi	r19, 0xFF	; 255
    1982:	13 13       	cpse	r17, r19
    1984:	f9 cf       	rjmp	.-14     	; 0x1978 <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    1986:	00 23       	and	r16, r16
    1988:	31 f0       	breq	.+12     	; 0x1996 <lcd_int32+0x124>
    198a:	f5 01       	movw	r30, r10
    198c:	e3 0f       	add	r30, r19
    198e:	f1 1d       	adc	r31, r1
    1990:	9d e2       	ldi	r25, 0x2D	; 45
    1992:	90 83       	st	Z, r25
    1994:	3f 5f       	subi	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1996:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1998:	31 50       	subi	r19, 0x01	; 1
    199a:	f5 01       	movw	r30, r10
    199c:	e3 0f       	add	r30, r19
    199e:	f1 1d       	adc	r31, r1
    19a0:	90 81       	ld	r25, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    19a2:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    19a4:	77 9b       	sbis	0x0e, 7	; 14
    19a6:	fe cf       	rjmp	.-4      	; 0x19a4 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
    19a8:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    19aa:	77 9b       	sbis	0x0e, 7	; 14
    19ac:	fe cf       	rjmp	.-4      	; 0x19aa <lcd_int32+0x138>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    19ae:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19b2:	98 60       	ori	r25, 0x08	; 8
    19b4:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19b8:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19bc:	97 7f       	andi	r25, 0xF7	; 247
    19be:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    19c2:	85 ed       	ldi	r24, 0xD5	; 213
    19c4:	8a 95       	dec	r24
    19c6:	f1 f7       	brne	.-4      	; 0x19c4 <lcd_int32+0x152>
    19c8:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    19ca:	31 11       	cpse	r19, r1
    19cc:	e5 cf       	rjmp	.-54     	; 0x1998 <lcd_int32+0x126>

}
    19ce:	69 96       	adiw	r28, 0x19	; 25
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	1f 91       	pop	r17
    19e0:	0f 91       	pop	r16
    19e2:	ff 90       	pop	r15
    19e4:	ef 90       	pop	r14
    19e6:	df 90       	pop	r13
    19e8:	cf 90       	pop	r12
    19ea:	bf 90       	pop	r11
    19ec:	af 90       	pop	r10
    19ee:	9f 90       	pop	r9
    19f0:	8f 90       	pop	r8
    19f2:	7f 90       	pop	r7
    19f4:	6f 90       	pop	r6
    19f6:	5f 90       	pop	r5
    19f8:	4f 90       	pop	r4
    19fa:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    19fc:	91 2c       	mov	r9, r1
    19fe:	9e 01       	movw	r18, r28
    1a00:	2f 5f       	subi	r18, 0xFF	; 255
    1a02:	3f 4f       	sbci	r19, 0xFF	; 255
    1a04:	59 01       	movw	r10, r18
    1a06:	91 cf       	rjmp	.-222    	; 0x192a <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1a08:	90 e3       	ldi	r25, 0x30	; 48
    1a0a:	b4 cf       	rjmp	.-152    	; 0x1974 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    1a0c:	f0 94       	com	r15
    1a0e:	e0 94       	com	r14
    1a10:	d0 94       	com	r13
    1a12:	c0 94       	com	r12
    1a14:	c1 1c       	adc	r12, r1
    1a16:	d1 1c       	adc	r13, r1
    1a18:	e1 1c       	adc	r14, r1
    1a1a:	f1 1c       	adc	r15, r1
    1a1c:	54 cf       	rjmp	.-344    	; 0x18c6 <lcd_int32+0x54>

00001a1e <lcd_int16>:
    1a1e:	5f 92       	push	r5
    1a20:	6f 92       	push	r6
    1a22:	7f 92       	push	r7
    1a24:	8f 92       	push	r8
    1a26:	9f 92       	push	r9
    1a28:	af 92       	push	r10
    1a2a:	bf 92       	push	r11
    1a2c:	cf 92       	push	r12
    1a2e:	df 92       	push	r13
    1a30:	ef 92       	push	r14
    1a32:	ff 92       	push	r15
    1a34:	0f 93       	push	r16
    1a36:	1f 93       	push	r17
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	61 97       	sbiw	r28, 0x11	; 17
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	de bf       	out	0x3e, r29	; 62
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	cd bf       	out	0x3d, r28	; 61
    1a4c:	5c 01       	movw	r10, r24
    1a4e:	96 2e       	mov	r9, r22
    1a50:	54 2e       	mov	r5, r20
    1a52:	62 2e       	mov	r6, r18
    1a54:	8b 2c       	mov	r8, r11
    1a56:	88 1c       	adc	r8, r8
    1a58:	88 24       	eor	r8, r8
    1a5a:	88 1c       	adc	r8, r8
    1a5c:	78 2c       	mov	r7, r8
    1a5e:	9c 01       	movw	r18, r24
    1a60:	97 fd       	sbrc	r25, 7
    1a62:	9d c0       	rjmp	.+314    	; 0x1b9e <lcd_int16+0x180>
    1a64:	55 20       	and	r5, r5
    1a66:	09 f4       	brne	.+2      	; 0x1a6a <lcd_int16+0x4c>
    1a68:	8e c0       	rjmp	.+284    	; 0x1b86 <lcd_int16+0x168>
    1a6a:	8e 01       	movw	r16, r28
    1a6c:	0f 5f       	subi	r16, 0xFF	; 255
    1a6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a70:	78 01       	movw	r14, r16
    1a72:	cc 24       	eor	r12, r12
    1a74:	ca 94       	dec	r12
    1a76:	c5 0c       	add	r12, r5
    1a78:	d1 2c       	mov	r13, r1
    1a7a:	8f ef       	ldi	r24, 0xFF	; 255
    1a7c:	c8 1a       	sub	r12, r24
    1a7e:	d8 0a       	sbc	r13, r24
    1a80:	c0 0e       	add	r12, r16
    1a82:	d1 1e       	adc	r13, r17
    1a84:	6a e0       	ldi	r22, 0x0A	; 10
    1a86:	70 e0       	ldi	r23, 0x00	; 0
    1a88:	c9 01       	movw	r24, r18
    1a8a:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__divmodhi4>
    1a8e:	46 2f       	mov	r20, r22
    1a90:	24 2f       	mov	r18, r20
    1a92:	37 2f       	mov	r19, r23
    1a94:	80 5d       	subi	r24, 0xD0	; 208
    1a96:	f7 01       	movw	r30, r14
    1a98:	81 93       	st	Z+, r24
    1a9a:	7f 01       	movw	r14, r30
    1a9c:	ec 15       	cp	r30, r12
    1a9e:	fd 05       	cpc	r31, r13
    1aa0:	89 f7       	brne	.-30     	; 0x1a84 <lcd_int16+0x66>
    1aa2:	ff 24       	eor	r15, r15
    1aa4:	f3 94       	inc	r15
    1aa6:	f5 0c       	add	r15, r5
    1aa8:	f8 01       	movw	r30, r16
    1aaa:	e5 0d       	add	r30, r5
    1aac:	f1 1d       	adc	r31, r1
    1aae:	8e e2       	ldi	r24, 0x2E	; 46
    1ab0:	80 83       	st	Z, r24
    1ab2:	01 c0       	rjmp	.+2      	; 0x1ab6 <lcd_int16+0x98>
    1ab4:	f9 2e       	mov	r15, r25
    1ab6:	6a e0       	ldi	r22, 0x0A	; 10
    1ab8:	70 e0       	ldi	r23, 0x00	; 0
    1aba:	c9 01       	movw	r24, r18
    1abc:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__divmodhi4>
    1ac0:	46 2f       	mov	r20, r22
    1ac2:	24 2f       	mov	r18, r20
    1ac4:	37 2f       	mov	r19, r23
    1ac6:	91 e0       	ldi	r25, 0x01	; 1
    1ac8:	9f 0d       	add	r25, r15
    1aca:	f8 01       	movw	r30, r16
    1acc:	ef 0d       	add	r30, r15
    1ace:	f1 1d       	adc	r31, r1
    1ad0:	80 5d       	subi	r24, 0xD0	; 208
    1ad2:	80 83       	st	Z, r24
    1ad4:	21 15       	cp	r18, r1
    1ad6:	31 05       	cpc	r19, r1
    1ad8:	69 f7       	brne	.-38     	; 0x1ab4 <lcd_int16+0x96>
    1ada:	61 10       	cpse	r6, r1
    1adc:	59 c0       	rjmp	.+178    	; 0x1b90 <lcd_int16+0x172>
    1ade:	b7 fc       	sbrc	r11, 7
    1ae0:	63 c0       	rjmp	.+198    	; 0x1ba8 <lcd_int16+0x18a>
    1ae2:	99 20       	and	r9, r9
    1ae4:	b1 f0       	breq	.+44     	; 0x1b12 <lcd_int16+0xf4>
    1ae6:	68 2d       	mov	r22, r8
    1ae8:	70 e0       	ldi	r23, 0x00	; 0
    1aea:	80 e2       	ldi	r24, 0x20	; 32
    1aec:	29 2f       	mov	r18, r25
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	49 2d       	mov	r20, r9
    1af2:	50 e0       	ldi	r21, 0x00	; 0
    1af4:	46 1b       	sub	r20, r22
    1af6:	57 0b       	sbc	r21, r23
    1af8:	24 17       	cp	r18, r20
    1afa:	35 07       	cpc	r19, r21
    1afc:	54 f4       	brge	.+20     	; 0x1b12 <lcd_int16+0xf4>
    1afe:	9f 5f       	subi	r25, 0xFF	; 255
    1b00:	f8 01       	movw	r30, r16
    1b02:	e2 0f       	add	r30, r18
    1b04:	f3 1f       	adc	r31, r19
    1b06:	80 83       	st	Z, r24
    1b08:	29 2f       	mov	r18, r25
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	24 17       	cp	r18, r20
    1b0e:	35 07       	cpc	r19, r21
    1b10:	b4 f3       	brlt	.-20     	; 0x1afe <lcd_int16+0xe0>
    1b12:	77 20       	and	r7, r7
    1b14:	31 f0       	breq	.+12     	; 0x1b22 <lcd_int16+0x104>
    1b16:	f8 01       	movw	r30, r16
    1b18:	e9 0f       	add	r30, r25
    1b1a:	f1 1d       	adc	r31, r1
    1b1c:	8d e2       	ldi	r24, 0x2D	; 45
    1b1e:	80 83       	st	Z, r24
    1b20:	9f 5f       	subi	r25, 0xFF	; 255
    1b22:	21 e0       	ldi	r18, 0x01	; 1
    1b24:	91 50       	subi	r25, 0x01	; 1
    1b26:	f8 01       	movw	r30, r16
    1b28:	e9 0f       	add	r30, r25
    1b2a:	f1 1d       	adc	r31, r1
    1b2c:	80 81       	ld	r24, Z
    1b2e:	2f b9       	out	0x0f, r18	; 15
    1b30:	77 9b       	sbis	0x0e, 7	; 14
    1b32:	fe cf       	rjmp	.-4      	; 0x1b30 <lcd_int16+0x112>
    1b34:	8f b9       	out	0x0f, r24	; 15
    1b36:	77 9b       	sbis	0x0e, 7	; 14
    1b38:	fe cf       	rjmp	.-4      	; 0x1b36 <lcd_int16+0x118>
    1b3a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b3e:	88 60       	ori	r24, 0x08	; 8
    1b40:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b44:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b48:	87 7f       	andi	r24, 0xF7	; 247
    1b4a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b4e:	f5 ed       	ldi	r31, 0xD5	; 213
    1b50:	fa 95       	dec	r31
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <lcd_int16+0x132>
    1b54:	00 00       	nop
    1b56:	91 11       	cpse	r25, r1
    1b58:	e5 cf       	rjmp	.-54     	; 0x1b24 <lcd_int16+0x106>
    1b5a:	61 96       	adiw	r28, 0x11	; 17
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	cd bf       	out	0x3d, r28	; 61
    1b66:	df 91       	pop	r29
    1b68:	cf 91       	pop	r28
    1b6a:	1f 91       	pop	r17
    1b6c:	0f 91       	pop	r16
    1b6e:	ff 90       	pop	r15
    1b70:	ef 90       	pop	r14
    1b72:	df 90       	pop	r13
    1b74:	cf 90       	pop	r12
    1b76:	bf 90       	pop	r11
    1b78:	af 90       	pop	r10
    1b7a:	9f 90       	pop	r9
    1b7c:	8f 90       	pop	r8
    1b7e:	7f 90       	pop	r7
    1b80:	6f 90       	pop	r6
    1b82:	5f 90       	pop	r5
    1b84:	08 95       	ret
    1b86:	f1 2c       	mov	r15, r1
    1b88:	8e 01       	movw	r16, r28
    1b8a:	0f 5f       	subi	r16, 0xFF	; 255
    1b8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8e:	93 cf       	rjmp	.-218    	; 0x1ab6 <lcd_int16+0x98>
    1b90:	99 20       	and	r9, r9
    1b92:	09 f4       	brne	.+2      	; 0x1b96 <lcd_int16+0x178>
    1b94:	be cf       	rjmp	.-132    	; 0x1b12 <lcd_int16+0xf4>
    1b96:	68 2d       	mov	r22, r8
    1b98:	70 e0       	ldi	r23, 0x00	; 0
    1b9a:	80 e3       	ldi	r24, 0x30	; 48
    1b9c:	a7 cf       	rjmp	.-178    	; 0x1aec <lcd_int16+0xce>
    1b9e:	22 27       	eor	r18, r18
    1ba0:	33 27       	eor	r19, r19
    1ba2:	28 1b       	sub	r18, r24
    1ba4:	39 0b       	sbc	r19, r25
    1ba6:	5e cf       	rjmp	.-324    	; 0x1a64 <lcd_int16+0x46>
    1ba8:	f3 94       	inc	r15
    1baa:	f3 94       	inc	r15
    1bac:	f8 01       	movw	r30, r16
    1bae:	e9 0f       	add	r30, r25
    1bb0:	f1 1d       	adc	r31, r1
    1bb2:	8d e2       	ldi	r24, 0x2D	; 45
    1bb4:	80 83       	st	Z, r24
    1bb6:	99 20       	and	r9, r9
    1bb8:	59 f0       	breq	.+22     	; 0x1bd0 <lcd_int16+0x1b2>
    1bba:	2f 2d       	mov	r18, r15
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	49 2d       	mov	r20, r9
    1bc0:	50 e0       	ldi	r21, 0x00	; 0
    1bc2:	24 17       	cp	r18, r20
    1bc4:	35 07       	cpc	r19, r21
    1bc6:	24 f4       	brge	.+8      	; 0x1bd0 <lcd_int16+0x1b2>
    1bc8:	9f 2d       	mov	r25, r15
    1bca:	71 2c       	mov	r7, r1
    1bcc:	80 e2       	ldi	r24, 0x20	; 32
    1bce:	97 cf       	rjmp	.-210    	; 0x1afe <lcd_int16+0xe0>
    1bd0:	9f 2d       	mov	r25, r15
    1bd2:	a7 cf       	rjmp	.-178    	; 0x1b22 <lcd_int16+0x104>

00001bd4 <main>:
}

//***********************************************************************************
int main()
{
init();
    1bd4:	0e 94 00 09 	call	0x1200	; 0x1200 <init>
uint8_t  currentDisplayDigit = 0;       //Current LED to display on (0 == 1's digit
uint16_t displayValue = 0;	        //Current value to display on LEDs
uint16_t alarmValue = 1;	        //Current value held by the alarm
uint8_t  alarmActivated = OFF;		//If the Alarm is ON or OFF, initialize to OFF
uint8_t  alarmON = OFF;
uint8_t  alarmSET = ON;
    1bd8:	99 24       	eor	r9, r9
    1bda:	93 94       	inc	r9
uint8_t  currentButtonsPressed = 0;	//Stores buttons that are currently pressed (holds value when pressed)
uint8_t  currentDisplayDigit = 0;       //Current LED to display on (0 == 1's digit
uint16_t displayValue = 0;	        //Current value to display on LEDs
uint16_t alarmValue = 1;	        //Current value held by the alarm
uint8_t  alarmActivated = OFF;		//If the Alarm is ON or OFF, initialize to OFF
uint8_t  alarmON = OFF;
    1bdc:	d1 2c       	mov	r13, r1
init();
uint8_t  currentButtonsPressed = 0;	//Stores buttons that are currently pressed (holds value when pressed)
uint8_t  currentDisplayDigit = 0;       //Current LED to display on (0 == 1's digit
uint16_t displayValue = 0;	        //Current value to display on LEDs
uint16_t alarmValue = 1;	        //Current value held by the alarm
uint8_t  alarmActivated = OFF;		//If the Alarm is ON or OFF, initialize to OFF
    1bde:	c1 2c       	mov	r12, r1
{
init();
uint8_t  currentButtonsPressed = 0;	//Stores buttons that are currently pressed (holds value when pressed)
uint8_t  currentDisplayDigit = 0;       //Current LED to display on (0 == 1's digit
uint16_t displayValue = 0;	        //Current value to display on LEDs
uint16_t alarmValue = 1;	        //Current value held by the alarm
    1be0:	ee 24       	eor	r14, r14
    1be2:	e3 94       	inc	r14
    1be4:	f1 2c       	mov	r15, r1
int main()
{
init();
uint8_t  currentButtonsPressed = 0;	//Stores buttons that are currently pressed (holds value when pressed)
uint8_t  currentDisplayDigit = 0;       //Current LED to display on (0 == 1's digit
uint16_t displayValue = 0;	        //Current value to display on LEDs
    1be6:	c0 e0       	ldi	r28, 0x00	; 0
    1be8:	d0 e0       	ldi	r29, 0x00	; 0
//***********************************************************************************
int main()
{
init();
uint8_t  currentButtonsPressed = 0;	//Stores buttons that are currently pressed (holds value when pressed)
uint8_t  currentDisplayDigit = 0;       //Current LED to display on (0 == 1's digit
    1bea:	00 e0       	ldi	r16, 0x00	; 0

//***********************************************************************************
int main()
{
init();
uint8_t  currentButtonsPressed = 0;	//Stores buttons that are currently pressed (holds value when pressed)
    1bec:	10 e0       	ldi	r17, 0x00	; 0
    1bee:	77 24       	eor	r7, r7
    1bf0:	73 94       	inc	r7
  // Restart Mode (restarts everything) 
  }else if(currentButtonsPressed == 0x02)
  {
      alarmActivated = OFF;
      snoozeFlag = SNOOZEOFF;
      segment_data[2] |= (0xFF);      
    1bf2:	88 24       	eor	r8, r8
    1bf4:	8a 94       	dec	r8
  static uint8_t displayValueHours;
  static uint8_t displayValueMins;
  
  displayValueHours = (displayValue / 60);
  displayValueMins  = (displayValue - (60 * displayValueHours));
  displayValue      = ((displayValueHours * 100) + displayValueMins);
    1bf6:	54 e6       	ldi	r21, 0x64	; 100
    1bf8:	a5 2e       	mov	r10, r21
    1bfa:	64 ec       	ldi	r22, 0xC4	; 196
    1bfc:	b6 2e       	mov	r11, r22
    1bfe:	1c c0       	rjmp	.+56     	; 0x1c38 <main+0x64>
uint16_t ClockCounterCorrection(uint16_t displayValue)
{
  static uint8_t displayValueHours;
  static uint8_t displayValueMins;
  
  displayValueHours = (displayValue / 60);
    1c00:	9e 01       	movw	r18, r28
    1c02:	a9 e8       	ldi	r26, 0x89	; 137
    1c04:	b8 e8       	ldi	r27, 0x88	; 136
    1c06:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <__umulhisi3>
    1c0a:	96 95       	lsr	r25
    1c0c:	87 95       	ror	r24
    1c0e:	92 95       	swap	r25
    1c10:	82 95       	swap	r24
    1c12:	8f 70       	andi	r24, 0x0F	; 15
    1c14:	89 27       	eor	r24, r25
    1c16:	9f 70       	andi	r25, 0x0F	; 15
    1c18:	89 27       	eor	r24, r25
  displayValueMins  = (displayValue - (60 * displayValueHours));
  displayValue      = ((displayValueHours * 100) + displayValueMins);
    1c1a:	b8 9e       	mul	r11, r24
    1c1c:	c0 0d       	add	r28, r0
    1c1e:	11 24       	eor	r1, r1
    1c20:	d0 e0       	ldi	r29, 0x00	; 0
    1c22:	8a 9d       	mul	r24, r10
    1c24:	c0 0d       	add	r28, r0
    1c26:	d1 1d       	adc	r29, r1
    1c28:	11 24       	eor	r1, r1
 
  // Turn minute input to HH:MM 
  displayValue = ClockCounterCorrection(displayValue);
  
  // Display to LED screen
  segsum(displayValue);						//Divide the decimal value to the segment_data[] array
    1c2a:	ce 01       	movw	r24, r28
    1c2c:	0e 94 92 06 	call	0xd24	; 0xd24 <segsum>
  currentDisplayDigit = displaySwitch(currentDisplayDigit);	//Display the current values stored in segment_data[] to current LED 
    1c30:	80 2f       	mov	r24, r16
    1c32:	0e 94 41 07 	call	0xe82	; 0xe82 <displaySwitch>
    1c36:	08 2f       	mov	r16, r24
uint8_t  alarmOffset = 0;
while(1){
  
  // Button Functionality
  // Pole Buttons
  currentButtonsPressed = ButtonCheck(currentButtonsPressed);
    1c38:	81 2f       	mov	r24, r17
    1c3a:	0e 94 82 07 	call	0xf04	; 0xf04 <ButtonCheck>
    1c3e:	18 2f       	mov	r17, r24
  
  // Buttons (1):
  // Enter Setting mode (sets time or alarm)
  if(currentButtonsPressed == 0x01)
    1c40:	81 30       	cpi	r24, 0x01	; 1
    1c42:	09 f4       	brne	.+2      	; 0x1c46 <main+0x72>
    1c44:	83 c0       	rjmp	.+262    	; 0x1d4c <main+0x178>
  {
      alarmValue     = AlarmSetMode(alarmOffset);
      displayValue = alarmValue;   
  // Buttons (2):
  // Restart Mode (restarts everything) 
  }else if(currentButtonsPressed == 0x02)
    1c46:	82 30       	cpi	r24, 0x02	; 2
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <main+0x78>
    1c4a:	63 c0       	rjmp	.+198    	; 0x1d12 <main+0x13e>
      alarmON = OFF;
      clear_display();
  
  // Buttons (1, 2):
  // Sets Alarm 
  }else if(currentButtonsPressed == 0x03)
    1c4c:	83 30       	cpi	r24, 0x03	; 3
    1c4e:	f9 f0       	breq	.+62     	; 0x1c8e <main+0xba>
      segment_data[2] &= 0xFB;      
      currentButtonsPressed = (0x00);
  
  // Buttons (3):
  // SNOOZE if Alarm is Set/On    
  }else if(currentButtonsPressed == 0x04)
    1c50:	84 30       	cpi	r24, 0x04	; 4
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <main+0x82>
    1c54:	53 c0       	rjmp	.+166    	; 0x1cfc <main+0x128>
      }
      currentButtonsPressed = (0x00);
  
  // Buttons (1, 3):
  // Set Time
  }else if(currentButtonsPressed == 0x05)
    1c56:	85 30       	cpi	r24, 0x05	; 5
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <main+0x88>
    1c5a:	7e c0       	rjmp	.+252    	; 0x1d58 <main+0x184>
    currentTime = AlarmSetMode(alarmOffset);
    currentButtonsPressed = (0x00);
  
  // Display CurrentTime
  
  }else if(currentButtonsPressed == 0x08)
    1c5c:	88 30       	cpi	r24, 0x08	; 8
    1c5e:	29 f0       	breq	.+10     	; 0x1c6a <main+0x96>
  {
    //alarmOffset ^= 0x01;
    //currentButtonsPressed = (0x00);
  }else{
    displayValue = currentTime;
    1c60:	c0 91 2e 01 	lds	r28, 0x012E	; 0x80012e <__data_end>
    1c64:	d0 91 2f 01 	lds	r29, 0x012F	; 0x80012f <__data_end+0x1>
    currentButtonsPressed = (0x00);    
    1c68:	10 e0       	ldi	r17, 0x00	; 0
  }

  // Brightness of LED based off Photoresistor
  OCR2  = 350 + (2 * (ADCH - 350));	   
    1c6a:	85 b1       	in	r24, 0x05	; 5
    1c6c:	88 0f       	add	r24, r24
    1c6e:	8e 55       	subi	r24, 0x5E	; 94
    1c70:	83 bd       	out	0x23, r24	; 35

  // Turn ON alarm if SNOOZE timedout
  if(snoozeFlag == SNOOZEALARM)
    1c72:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <snoozeFlag>
    1c76:	82 30       	cpi	r24, 0x02	; 2
    1c78:	b1 f0       	breq	.+44     	; 0x1ca6 <main+0xd2>
    alarmActivated = ON;
  }

  // Alarm is reached and activated, either by timer or by snooze reached
  // Play alarm
  if(alarmActivated && ((currentTime == alarmValue) || (snoozeFlag == SNOOZEALARM)) && (snoozeFlag != SNOOZEON))
    1c7a:	c1 10       	cpse	r12, r1
    1c7c:	14 c0       	rjmp	.+40     	; 0x1ca6 <main+0xd2>
    OCR3C   = VolumeSetMode();
    alarmON = ON;
  }
  
  // Display 'ALARM' on LCD
  if(alarmON && alarmSET)
    1c7e:	dd 20       	and	r13, r13
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <main+0xb0>
    1c82:	be cf       	rjmp	.-132    	; 0x1c00 <main+0x2c>
    1c84:	91 10       	cpse	r9, r1
    1c86:	2e c0       	rjmp	.+92     	; 0x1ce4 <main+0x110>
    1c88:	dd 24       	eor	r13, r13
    1c8a:	d3 94       	inc	r13
    1c8c:	b9 cf       	rjmp	.-142    	; 0x1c00 <main+0x2c>
  // Buttons (1, 2):
  // Sets Alarm 
  }else if(currentButtonsPressed == 0x03)
  {
      alarmActivated = ON;
      segment_data[2] &= 0xFB;      
    1c8e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <segment_data+0x2>
    1c92:	8b 7f       	andi	r24, 0xFB	; 251
    1c94:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <segment_data+0x2>
    displayValue = currentTime;
    currentButtonsPressed = (0x00);    
  }

  // Brightness of LED based off Photoresistor
  OCR2  = 350 + (2 * (ADCH - 350));	   
    1c98:	85 b1       	in	r24, 0x05	; 5
    1c9a:	88 0f       	add	r24, r24
    1c9c:	8e 55       	subi	r24, 0x5E	; 94
    1c9e:	83 bd       	out	0x23, r24	; 35

  // Turn ON alarm if SNOOZE timedout
  if(snoozeFlag == SNOOZEALARM)
    1ca0:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <snoozeFlag>
    1ca4:	10 e0       	ldi	r17, 0x00	; 0
    alarmActivated = ON;
  }

  // Alarm is reached and activated, either by timer or by snooze reached
  // Play alarm
  if(alarmActivated && ((currentTime == alarmValue) || (snoozeFlag == SNOOZEALARM)) && (snoozeFlag != SNOOZEON))
    1ca6:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
    1caa:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
    1cae:	8e 15       	cp	r24, r14
    1cb0:	9f 05       	cpc	r25, r15
    1cb2:	39 f0       	breq	.+14     	; 0x1cc2 <main+0xee>
    1cb4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <snoozeFlag>
    1cb8:	82 30       	cpi	r24, 0x02	; 2
    1cba:	19 f0       	breq	.+6      	; 0x1cc2 <main+0xee>
    1cbc:	cc 24       	eor	r12, r12
    1cbe:	c3 94       	inc	r12
    1cc0:	de cf       	rjmp	.-68     	; 0x1c7e <main+0xaa>
    1cc2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <snoozeFlag>
    1cc6:	81 30       	cpi	r24, 0x01	; 1
    1cc8:	c9 f3       	breq	.-14     	; 0x1cbc <main+0xe8>
  {
    TCCR1B |= (1 << WGM12) | (1<<CS11) | (1<<CS10); 		//CTC mode clear at TOP immediate
    1cca:	8e b5       	in	r24, 0x2e	; 46
    1ccc:	8b 60       	ori	r24, 0x0B	; 11
    1cce:	8e bd       	out	0x2e, r24	; 46
    OCR3C   = VolumeSetMode();
    1cd0:	0e 94 cc 08 	call	0x1198	; 0x1198 <VolumeSetMode>
    1cd4:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    1cd8:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    1cdc:	cc 24       	eor	r12, r12
    1cde:	c3 94       	inc	r12
    alarmON = ON;
  }
  
  // Display 'ALARM' on LCD
  if(alarmON && alarmSET)
    1ce0:	99 20       	and	r9, r9
    1ce2:	91 f2       	breq	.-92     	; 0x1c88 <main+0xb4>
  {
    music_on();
    1ce4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <music_on>
    clear_display();
    1ce8:	0e 94 ca 0a 	call	0x1594	; 0x1594 <clear_display>
    string2lcd("ALARM");
    1cec:	88 e2       	ldi	r24, 0x28	; 40
    1cee:	91 e0       	ldi	r25, 0x01	; 1
    1cf0:	0e 94 4a 0b 	call	0x1694	; 0x1694 <string2lcd>
    1cf4:	dd 24       	eor	r13, r13
    1cf6:	d3 94       	inc	r13
    alarmSET = OFF; 
    1cf8:	91 2c       	mov	r9, r1
    1cfa:	82 cf       	rjmp	.-252    	; 0x1c00 <main+0x2c>
  
  // Buttons (3):
  // SNOOZE if Alarm is Set/On    
  }else if(currentButtonsPressed == 0x04)
  {
      if(alarmActivated)
    1cfc:	cc 20       	and	r12, r12
    1cfe:	d1 f0       	breq	.+52     	; 0x1d34 <main+0x160>
      {
        TCCR1B &= (0 << CS11);
    1d00:	8e b5       	in	r24, 0x2e	; 46
    1d02:	1e bc       	out	0x2e, r1	; 46
        TCCR1B &= (0 << CS12);
    1d04:	8e b5       	in	r24, 0x2e	; 46
    1d06:	1e bc       	out	0x2e, r1	; 46
        snoozeFlag = SNOOZEON;	
    1d08:	70 92 30 01 	sts	0x0130, r7	; 0x800130 <snoozeFlag>
        alarmSET = ON;
    1d0c:	99 24       	eor	r9, r9
    1d0e:	93 94       	inc	r9
    1d10:	c3 cf       	rjmp	.-122    	; 0x1c98 <main+0xc4>
  // Buttons (2):
  // Restart Mode (restarts everything) 
  }else if(currentButtonsPressed == 0x02)
  {
      alarmActivated = OFF;
      snoozeFlag = SNOOZEOFF;
    1d12:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <snoozeFlag>
      segment_data[2] |= (0xFF);      
    1d16:	80 92 25 01 	sts	0x0125, r8	; 0x800125 <segment_data+0x2>
      currentButtonsPressed = (0x00);
      OCR3C = 0;
    1d1a:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    1d1e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
      currentDisplayDigit = 0;       
      displayValue = 0;	        
      alarmValue = 1;	        
      alarmActivated = OFF;
      alarmON = OFF;
      clear_display();
    1d22:	0e 94 ca 0a 	call	0x1594	; 0x1594 <clear_display>
      currentButtonsPressed = 0;	
      currentDisplayDigit = 0;       
      displayValue = 0;	        
      alarmValue = 1;	        
      alarmActivated = OFF;
      alarmON = OFF;
    1d26:	d1 2c       	mov	r13, r1
      currentButtonsPressed = (0x00);
      OCR3C = 0;
      currentButtonsPressed = 0;	
      currentDisplayDigit = 0;       
      displayValue = 0;	        
      alarmValue = 1;	        
    1d28:	ee 24       	eor	r14, r14
    1d2a:	e3 94       	inc	r14
    1d2c:	f1 2c       	mov	r15, r1
      segment_data[2] |= (0xFF);      
      currentButtonsPressed = (0x00);
      OCR3C = 0;
      currentButtonsPressed = 0;	
      currentDisplayDigit = 0;       
      displayValue = 0;	        
    1d2e:	c0 e0       	ldi	r28, 0x00	; 0
    1d30:	d0 e0       	ldi	r29, 0x00	; 0
      snoozeFlag = SNOOZEOFF;
      segment_data[2] |= (0xFF);      
      currentButtonsPressed = (0x00);
      OCR3C = 0;
      currentButtonsPressed = 0;	
      currentDisplayDigit = 0;       
    1d32:	00 e0       	ldi	r16, 0x00	; 0
    displayValue = currentTime;
    currentButtonsPressed = (0x00);    
  }

  // Brightness of LED based off Photoresistor
  OCR2  = 350 + (2 * (ADCH - 350));	   
    1d34:	85 b1       	in	r24, 0x05	; 5
    1d36:	88 0f       	add	r24, r24
    1d38:	8e 55       	subi	r24, 0x5E	; 94
    1d3a:	83 bd       	out	0x23, r24	; 35

  // Turn ON alarm if SNOOZE timedout
  if(snoozeFlag == SNOOZEALARM)
    1d3c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <snoozeFlag>
    1d40:	10 e0       	ldi	r17, 0x00	; 0
    1d42:	82 30       	cpi	r24, 0x02	; 2
    1d44:	09 f4       	brne	.+2      	; 0x1d48 <main+0x174>
    1d46:	af cf       	rjmp	.-162    	; 0x1ca6 <main+0xd2>
    1d48:	c1 2c       	mov	r12, r1
    1d4a:	99 cf       	rjmp	.-206    	; 0x1c7e <main+0xaa>
  
  // Buttons (1):
  // Enter Setting mode (sets time or alarm)
  if(currentButtonsPressed == 0x01)
  {
      alarmValue     = AlarmSetMode(alarmOffset);
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	0e 94 84 08 	call	0x1108	; 0x1108 <AlarmSetMode>
    1d52:	ec 01       	movw	r28, r24
    1d54:	7c 01       	movw	r14, r24
    1d56:	89 cf       	rjmp	.-238    	; 0x1c6a <main+0x96>
  
  // Buttons (1, 3):
  // Set Time
  }else if(currentButtonsPressed == 0x05)
  {
    currentTime = AlarmSetMode(alarmOffset);
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	0e 94 84 08 	call	0x1108	; 0x1108 <AlarmSetMode>
    1d5e:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
    1d62:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
    currentButtonsPressed = (0x00);
    1d66:	10 e0       	ldi	r17, 0x00	; 0
    1d68:	80 cf       	rjmp	.-256    	; 0x1c6a <main+0x96>

00001d6a <__udivmodhi4>:
    1d6a:	aa 1b       	sub	r26, r26
    1d6c:	bb 1b       	sub	r27, r27
    1d6e:	51 e1       	ldi	r21, 0x11	; 17
    1d70:	07 c0       	rjmp	.+14     	; 0x1d80 <__udivmodhi4_ep>

00001d72 <__udivmodhi4_loop>:
    1d72:	aa 1f       	adc	r26, r26
    1d74:	bb 1f       	adc	r27, r27
    1d76:	a6 17       	cp	r26, r22
    1d78:	b7 07       	cpc	r27, r23
    1d7a:	10 f0       	brcs	.+4      	; 0x1d80 <__udivmodhi4_ep>
    1d7c:	a6 1b       	sub	r26, r22
    1d7e:	b7 0b       	sbc	r27, r23

00001d80 <__udivmodhi4_ep>:
    1d80:	88 1f       	adc	r24, r24
    1d82:	99 1f       	adc	r25, r25
    1d84:	5a 95       	dec	r21
    1d86:	a9 f7       	brne	.-22     	; 0x1d72 <__udivmodhi4_loop>
    1d88:	80 95       	com	r24
    1d8a:	90 95       	com	r25
    1d8c:	bc 01       	movw	r22, r24
    1d8e:	cd 01       	movw	r24, r26
    1d90:	08 95       	ret

00001d92 <__divmodhi4>:
    1d92:	97 fb       	bst	r25, 7
    1d94:	07 2e       	mov	r0, r23
    1d96:	16 f4       	brtc	.+4      	; 0x1d9c <__divmodhi4+0xa>
    1d98:	00 94       	com	r0
    1d9a:	07 d0       	rcall	.+14     	; 0x1daa <__divmodhi4_neg1>
    1d9c:	77 fd       	sbrc	r23, 7
    1d9e:	09 d0       	rcall	.+18     	; 0x1db2 <__divmodhi4_neg2>
    1da0:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__udivmodhi4>
    1da4:	07 fc       	sbrc	r0, 7
    1da6:	05 d0       	rcall	.+10     	; 0x1db2 <__divmodhi4_neg2>
    1da8:	3e f4       	brtc	.+14     	; 0x1db8 <__divmodhi4_exit>

00001daa <__divmodhi4_neg1>:
    1daa:	90 95       	com	r25
    1dac:	81 95       	neg	r24
    1dae:	9f 4f       	sbci	r25, 0xFF	; 255
    1db0:	08 95       	ret

00001db2 <__divmodhi4_neg2>:
    1db2:	70 95       	com	r23
    1db4:	61 95       	neg	r22
    1db6:	7f 4f       	sbci	r23, 0xFF	; 255

00001db8 <__divmodhi4_exit>:
    1db8:	08 95       	ret

00001dba <__divmodsi4>:
    1dba:	05 2e       	mov	r0, r21
    1dbc:	97 fb       	bst	r25, 7
    1dbe:	1e f4       	brtc	.+6      	; 0x1dc6 <__divmodsi4+0xc>
    1dc0:	00 94       	com	r0
    1dc2:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__negsi2>
    1dc6:	57 fd       	sbrc	r21, 7
    1dc8:	07 d0       	rcall	.+14     	; 0x1dd8 <__divmodsi4_neg2>
    1dca:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__udivmodsi4>
    1dce:	07 fc       	sbrc	r0, 7
    1dd0:	03 d0       	rcall	.+6      	; 0x1dd8 <__divmodsi4_neg2>
    1dd2:	4e f4       	brtc	.+18     	; 0x1de6 <__divmodsi4_exit>
    1dd4:	0c 94 f4 0e 	jmp	0x1de8	; 0x1de8 <__negsi2>

00001dd8 <__divmodsi4_neg2>:
    1dd8:	50 95       	com	r21
    1dda:	40 95       	com	r20
    1ddc:	30 95       	com	r19
    1dde:	21 95       	neg	r18
    1de0:	3f 4f       	sbci	r19, 0xFF	; 255
    1de2:	4f 4f       	sbci	r20, 0xFF	; 255
    1de4:	5f 4f       	sbci	r21, 0xFF	; 255

00001de6 <__divmodsi4_exit>:
    1de6:	08 95       	ret

00001de8 <__negsi2>:
    1de8:	90 95       	com	r25
    1dea:	80 95       	com	r24
    1dec:	70 95       	com	r23
    1dee:	61 95       	neg	r22
    1df0:	7f 4f       	sbci	r23, 0xFF	; 255
    1df2:	8f 4f       	sbci	r24, 0xFF	; 255
    1df4:	9f 4f       	sbci	r25, 0xFF	; 255
    1df6:	08 95       	ret

00001df8 <__tablejump2__>:
    1df8:	ee 0f       	add	r30, r30
    1dfa:	ff 1f       	adc	r31, r31
    1dfc:	00 24       	eor	r0, r0
    1dfe:	00 1c       	adc	r0, r0
    1e00:	0b be       	out	0x3b, r0	; 59
    1e02:	07 90       	elpm	r0, Z+
    1e04:	f6 91       	elpm	r31, Z
    1e06:	e0 2d       	mov	r30, r0
    1e08:	09 94       	ijmp

00001e0a <__umulhisi3>:
    1e0a:	a2 9f       	mul	r26, r18
    1e0c:	b0 01       	movw	r22, r0
    1e0e:	b3 9f       	mul	r27, r19
    1e10:	c0 01       	movw	r24, r0
    1e12:	a3 9f       	mul	r26, r19
    1e14:	70 0d       	add	r23, r0
    1e16:	81 1d       	adc	r24, r1
    1e18:	11 24       	eor	r1, r1
    1e1a:	91 1d       	adc	r25, r1
    1e1c:	b2 9f       	mul	r27, r18
    1e1e:	70 0d       	add	r23, r0
    1e20:	81 1d       	adc	r24, r1
    1e22:	11 24       	eor	r1, r1
    1e24:	91 1d       	adc	r25, r1
    1e26:	08 95       	ret

00001e28 <__udivmodsi4>:
    1e28:	a1 e2       	ldi	r26, 0x21	; 33
    1e2a:	1a 2e       	mov	r1, r26
    1e2c:	aa 1b       	sub	r26, r26
    1e2e:	bb 1b       	sub	r27, r27
    1e30:	fd 01       	movw	r30, r26
    1e32:	0d c0       	rjmp	.+26     	; 0x1e4e <__udivmodsi4_ep>

00001e34 <__udivmodsi4_loop>:
    1e34:	aa 1f       	adc	r26, r26
    1e36:	bb 1f       	adc	r27, r27
    1e38:	ee 1f       	adc	r30, r30
    1e3a:	ff 1f       	adc	r31, r31
    1e3c:	a2 17       	cp	r26, r18
    1e3e:	b3 07       	cpc	r27, r19
    1e40:	e4 07       	cpc	r30, r20
    1e42:	f5 07       	cpc	r31, r21
    1e44:	20 f0       	brcs	.+8      	; 0x1e4e <__udivmodsi4_ep>
    1e46:	a2 1b       	sub	r26, r18
    1e48:	b3 0b       	sbc	r27, r19
    1e4a:	e4 0b       	sbc	r30, r20
    1e4c:	f5 0b       	sbc	r31, r21

00001e4e <__udivmodsi4_ep>:
    1e4e:	66 1f       	adc	r22, r22
    1e50:	77 1f       	adc	r23, r23
    1e52:	88 1f       	adc	r24, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	1a 94       	dec	r1
    1e58:	69 f7       	brne	.-38     	; 0x1e34 <__udivmodsi4_loop>
    1e5a:	60 95       	com	r22
    1e5c:	70 95       	com	r23
    1e5e:	80 95       	com	r24
    1e60:	90 95       	com	r25
    1e62:	9b 01       	movw	r18, r22
    1e64:	ac 01       	movw	r20, r24
    1e66:	bd 01       	movw	r22, r26
    1e68:	cf 01       	movw	r24, r30
    1e6a:	08 95       	ret

00001e6c <_exit>:
    1e6c:	f8 94       	cli

00001e6e <__stop_program>:
    1e6e:	ff cf       	rjmp	.-2      	; 0x1e6e <__stop_program>
