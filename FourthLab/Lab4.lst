
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  0000120a  0000129e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000120a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  0080012e  0080012e  000012cc  2**0
                  ALLOC
  3 .stab         00002d84  00000000  00000000  000012cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014da  00000000  00000000  00004050  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000552a  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000553c  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00005578  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00005cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00006410  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  0000642a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 44 02 	jmp	0x488	; 0x488 <__vector_12>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea e0       	ldi	r30, 0x0A	; 10
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 32       	cpi	r26, 0x2E	; 46
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	ae e2       	ldi	r26, 0x2E	; 46
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 37       	cpi	r26, 0x76	; 118
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 c4 07 	call	0xf88	; 0xf88 <main>
      c6:	0c 94 03 09 	jmp	0x1206	; 0x1206 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <SPI_read>:
/*********************************************************************/
//              SPI_read(uint8_t currentBarGraph)
// Sends the bar graph data and then reads the SPI port.
/*********************************************************************/
uint16_t SPI_read(uint8_t currentBarGraph){
  PORTB &= 0x7F;
      ce:	c7 98       	cbi	0x18, 7	; 24
  SPDR = currentBarGraph;
      d0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){} //wait till 8 bits have been sent
      d2:	77 9b       	sbis	0x0e, 7	; 14
      d4:	fe cf       	rjmp	.-4      	; 0xd2 <SPI_read+0x4>
  //PORTD = 0xFF;
  //PORTD = 0x00;
  PORTE = 0x00;
      d6:	13 b8       	out	0x03, r1	; 3
  PORTE = 0xFF;
      d8:	8f ef       	ldi	r24, 0xFF	; 255
      da:	83 b9       	out	0x03, r24	; 3
  return(SPDR); //return incoming data from SPDR
      dc:	8f b1       	in	r24, 0x0f	; 15
}
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	08 95       	ret

000000e2 <chk_buttons>:
// Adapted to check all buttons from Ganssel's "Guide to Debouncing"            
// Expects active low pushbuttons on PINA port.  Debounce time is determined by 
// external loop delay times 12. 
// Edited to have a state array of size 8 for each button
//******************************************************************************
uint8_t chk_buttons(uint8_t buttons) {
      e2:	48 2f       	mov	r20, r24
  //Gansels debounce with the state as an array that is used to check against the values that buttons is at
  static uint16_t state[8] = {0}; //holds present state
  state[buttons] = (state[buttons] << 1) | (! bit_is_clear(PINA, buttons)) | 0xE000;
      e4:	e8 2f       	mov	r30, r24
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	99 b3       	in	r25, 0x19	; 25
      ea:	ee 0f       	add	r30, r30
      ec:	ff 1f       	adc	r31, r31
      ee:	eb 5c       	subi	r30, 0xCB	; 203
      f0:	fe 4f       	sbci	r31, 0xFE	; 254
      f2:	20 81       	ld	r18, Z
      f4:	31 81       	ldd	r19, Z+1	; 0x01
      f6:	22 0f       	add	r18, r18
      f8:	33 1f       	adc	r19, r19
      fa:	30 6e       	ori	r19, 0xE0	; 224
      fc:	89 2f       	mov	r24, r25
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	02 c0       	rjmp	.+4      	; 0x106 <chk_buttons+0x24>
     102:	95 95       	asr	r25
     104:	87 95       	ror	r24
     106:	4a 95       	dec	r20
     108:	e2 f7       	brpl	.-8      	; 0x102 <chk_buttons+0x20>
     10a:	81 70       	andi	r24, 0x01	; 1
     10c:	99 27       	eor	r25, r25
     10e:	28 2b       	or	r18, r24
     110:	39 2b       	or	r19, r25
     112:	31 83       	std	Z+1, r19	; 0x01
     114:	20 83       	st	Z, r18
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	21 15       	cp	r18, r1
     11a:	30 4f       	sbci	r19, 0xF0	; 240
     11c:	09 f0       	breq	.+2      	; 0x120 <chk_buttons+0x3e>
     11e:	80 e0       	ldi	r24, 0x00	; 0
  if (state[buttons] == 0xF000) return 1;
  return 0;
}
     120:	08 95       	ret

00000122 <segsum>:
//                                   segment_sum                                    
// takes a 16-bit binary input value and places the appropriate equivalent 4 digit 
// BCD segment code in the array segment_data for display.                       
// array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
//***********************************************************************************
void segsum(uint16_t sum) {
     122:	0f 93       	push	r16
     124:	1f 93       	push	r17
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	8c 01       	movw	r16, r24
     12c:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <DecHex>
     130:	e3 2f       	mov	r30, r19
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	ef 01       	movw	r28, r30
     136:	21 97       	sbiw	r28, 0x01	; 1
  
  uint8_t  i = 0;
  uint8_t  digitNum = 1;
     138:	21 e0       	ldi	r18, 0x01	; 1
  uint16_t sumPlaceHolder = sum;
  while(i < 4 && sumPlaceHolder > (DecHex-1))	
     13a:	c8 17       	cp	r28, r24
     13c:	d9 07       	cpc	r29, r25
     13e:	60 f4       	brcc	.+24     	; 0x158 <segsum+0x36>
  {
    sumPlaceHolder /= DecHex;
     140:	bf 01       	movw	r22, r30
     142:	0e 94 8b 08 	call	0x1116	; 0x1116 <__udivmodhi4>
     146:	cb 01       	movw	r24, r22
    digitNum++;
     148:	2f 5f       	subi	r18, 0xFF	; 255
void segsum(uint16_t sum) {
  
  uint8_t  i = 0;
  uint8_t  digitNum = 1;
  uint16_t sumPlaceHolder = sum;
  while(i < 4 && sumPlaceHolder > (DecHex-1))	
     14a:	25 30       	cpi	r18, 0x05	; 5
     14c:	b1 f7       	brne	.-20     	; 0x13a <segsum+0x18>
      segment_data[1] = hex_to_7seg[(sum/(DecHex*DecHex))%DecHex];
      segment_data[0] = hex_to_7seg[sum/(DecHex*DecHex*DecHex)];
    default:
      break;
  }
}
     14e:	df 91       	pop	r29
     150:	cf 91       	pop	r28
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	08 95       	ret
    sumPlaceHolder /= DecHex;
    digitNum++;
    i++;
  } 
  // Parses 0-4 digits into seperate segment_data[] locations 
  switch(digitNum)
     158:	23 30       	cpi	r18, 0x03	; 3
     15a:	a1 f0       	breq	.+40     	; 0x184 <segsum+0x62>
     15c:	24 30       	cpi	r18, 0x04	; 4
     15e:	09 f4       	brne	.+2      	; 0x162 <segsum+0x40>
     160:	55 c0       	rjmp	.+170    	; 0x20c <segsum+0xea>
     162:	22 30       	cpi	r18, 0x02	; 2
     164:	c1 f1       	breq	.+112    	; 0x1d6 <segsum+0xb4>
  {
    case 1:
      segment_data[4] = hex_to_7seg[sum];
     166:	f8 01       	movw	r30, r16
     168:	e9 5f       	subi	r30, 0xF9	; 249
     16a:	fe 4f       	sbci	r31, 0xFE	; 254
     16c:	80 81       	ld	r24, Z
     16e:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <segment_data+0x4>
      segment_data[3] = hex_to_7seg[0];// 0xFF;
     172:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <hex_to_7seg>
     176:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <segment_data+0x3>
      segment_data[1] = hex_to_7seg[0];//0xFF;
     17a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <segment_data+0x1>
      segment_data[0] = hex_to_7seg[0];//0xFF;
     17e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <segment_data>
      break;
     182:	e5 cf       	rjmp	.-54     	; 0x14e <segsum+0x2c>
      segment_data[3] = hex_to_7seg[(sum / DecHex)];
      segment_data[1] = hex_to_7seg[0];//0xFF;
      segment_data[0] = hex_to_7seg[0];// 0xFF;
      break;
    case 3:
      segment_data[4] = hex_to_7seg[sum % DecHex];
     184:	c8 01       	movw	r24, r16
     186:	bf 01       	movw	r22, r30
     188:	0e 94 8b 08 	call	0x1116	; 0x1116 <__udivmodhi4>
     18c:	dc 01       	movw	r26, r24
     18e:	a9 5f       	subi	r26, 0xF9	; 249
     190:	be 4f       	sbci	r27, 0xFE	; 254
     192:	8c 91       	ld	r24, X
     194:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <segment_data+0x4>
      segment_data[3] = hex_to_7seg[(sum/DecHex)%DecHex];
     198:	cb 01       	movw	r24, r22
     19a:	bf 01       	movw	r22, r30
     19c:	0e 94 8b 08 	call	0x1116	; 0x1116 <__udivmodhi4>
     1a0:	fc 01       	movw	r30, r24
     1a2:	e9 5f       	subi	r30, 0xF9	; 249
     1a4:	fe 4f       	sbci	r31, 0xFE	; 254
     1a6:	80 81       	ld	r24, Z
     1a8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <segment_data+0x3>
      segment_data[1] = hex_to_7seg[(sum/(DecHex*DecHex))];
     1ac:	33 9f       	mul	r19, r19
     1ae:	b0 01       	movw	r22, r0
     1b0:	11 24       	eor	r1, r1
     1b2:	c8 01       	movw	r24, r16
     1b4:	0e 94 8b 08 	call	0x1116	; 0x1116 <__udivmodhi4>
     1b8:	fb 01       	movw	r30, r22
     1ba:	e9 5f       	subi	r30, 0xF9	; 249
     1bc:	fe 4f       	sbci	r31, 0xFE	; 254
     1be:	80 81       	ld	r24, Z
     1c0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <segment_data+0x1>
      segment_data[0] = hex_to_7seg[0];//0xFF;
     1c4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <hex_to_7seg>
     1c8:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <segment_data>
      segment_data[1] = hex_to_7seg[(sum/(DecHex*DecHex))%DecHex];
      segment_data[0] = hex_to_7seg[sum/(DecHex*DecHex*DecHex)];
    default:
      break;
  }
}
     1cc:	df 91       	pop	r29
     1ce:	cf 91       	pop	r28
     1d0:	1f 91       	pop	r17
     1d2:	0f 91       	pop	r16
     1d4:	08 95       	ret
      segment_data[3] = hex_to_7seg[0];// 0xFF;
      segment_data[1] = hex_to_7seg[0];//0xFF;
      segment_data[0] = hex_to_7seg[0];//0xFF;
      break;
    case 2:
      segment_data[4] = hex_to_7seg[(sum % DecHex)];
     1d6:	c8 01       	movw	r24, r16
     1d8:	bf 01       	movw	r22, r30
     1da:	0e 94 8b 08 	call	0x1116	; 0x1116 <__udivmodhi4>
     1de:	fc 01       	movw	r30, r24
     1e0:	e9 5f       	subi	r30, 0xF9	; 249
     1e2:	fe 4f       	sbci	r31, 0xFE	; 254
     1e4:	80 81       	ld	r24, Z
     1e6:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <segment_data+0x4>
      segment_data[3] = hex_to_7seg[(sum / DecHex)];
     1ea:	fb 01       	movw	r30, r22
     1ec:	e9 5f       	subi	r30, 0xF9	; 249
     1ee:	fe 4f       	sbci	r31, 0xFE	; 254
     1f0:	80 81       	ld	r24, Z
     1f2:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <segment_data+0x3>
      segment_data[1] = hex_to_7seg[0];//0xFF;
     1f6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <hex_to_7seg>
     1fa:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <segment_data+0x1>
      segment_data[0] = hex_to_7seg[0];// 0xFF;
     1fe:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <segment_data>
      segment_data[1] = hex_to_7seg[(sum/(DecHex*DecHex))%DecHex];
      segment_data[0] = hex_to_7seg[sum/(DecHex*DecHex*DecHex)];
    default:
      break;
  }
}
     202:	df 91       	pop	r29
     204:	cf 91       	pop	r28
     206:	1f 91       	pop	r17
     208:	0f 91       	pop	r16
     20a:	08 95       	ret
      segment_data[3] = hex_to_7seg[(sum/DecHex)%DecHex];
      segment_data[1] = hex_to_7seg[(sum/(DecHex*DecHex))];
      segment_data[0] = hex_to_7seg[0];//0xFF;
      break;
    case 4:
      segment_data[4] = hex_to_7seg[sum % DecHex];
     20c:	c8 01       	movw	r24, r16
     20e:	bf 01       	movw	r22, r30
     210:	0e 94 8b 08 	call	0x1116	; 0x1116 <__udivmodhi4>
     214:	dc 01       	movw	r26, r24
     216:	a9 5f       	subi	r26, 0xF9	; 249
     218:	be 4f       	sbci	r27, 0xFE	; 254
     21a:	8c 91       	ld	r24, X
     21c:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <segment_data+0x4>
      segment_data[3] = hex_to_7seg[(sum/DecHex)%DecHex];
     220:	cb 01       	movw	r24, r22
     222:	bf 01       	movw	r22, r30
     224:	0e 94 8b 08 	call	0x1116	; 0x1116 <__udivmodhi4>
     228:	dc 01       	movw	r26, r24
     22a:	a9 5f       	subi	r26, 0xF9	; 249
     22c:	be 4f       	sbci	r27, 0xFE	; 254
     22e:	8c 91       	ld	r24, X
     230:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <segment_data+0x3>
      segment_data[1] = hex_to_7seg[(sum/(DecHex*DecHex))%DecHex];
     234:	33 9f       	mul	r19, r19
     236:	90 01       	movw	r18, r0
     238:	11 24       	eor	r1, r1
     23a:	c8 01       	movw	r24, r16
     23c:	b9 01       	movw	r22, r18
     23e:	0e 94 8b 08 	call	0x1116	; 0x1116 <__udivmodhi4>
     242:	cb 01       	movw	r24, r22
     244:	bf 01       	movw	r22, r30
     246:	0e 94 8b 08 	call	0x1116	; 0x1116 <__udivmodhi4>
     24a:	dc 01       	movw	r26, r24
     24c:	a9 5f       	subi	r26, 0xF9	; 249
     24e:	be 4f       	sbci	r27, 0xFE	; 254
     250:	8c 91       	ld	r24, X
     252:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <segment_data+0x1>
      segment_data[0] = hex_to_7seg[sum/(DecHex*DecHex*DecHex)];
     256:	e2 9f       	mul	r30, r18
     258:	b0 01       	movw	r22, r0
     25a:	e3 9f       	mul	r30, r19
     25c:	70 0d       	add	r23, r0
     25e:	f2 9f       	mul	r31, r18
     260:	70 0d       	add	r23, r0
     262:	11 24       	eor	r1, r1
     264:	c8 01       	movw	r24, r16
     266:	0e 94 8b 08 	call	0x1116	; 0x1116 <__udivmodhi4>
     26a:	fb 01       	movw	r30, r22
     26c:	e9 5f       	subi	r30, 0xF9	; 249
     26e:	fe 4f       	sbci	r31, 0xFE	; 254
     270:	80 81       	ld	r24, Z
     272:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <segment_data>
    default:
      break;
  }
}
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	1f 91       	pop	r17
     27c:	0f 91       	pop	r16
     27e:	08 95       	ret

00000280 <displaySwitch>:
// Takes the segment_data[] array that has the #_DIGIT values and displays it to the 
// current LED digit (displayValue) and returns the next value that will be used for displaying
//***********************************************************************************
uint8_t displaySwitch(uint8_t displayValue)
{
  switch(displayValue){
     280:	82 30       	cpi	r24, 0x02	; 2
     282:	c9 f1       	breq	.+114    	; 0x2f6 <displaySwitch+0x76>
     284:	88 f4       	brcc	.+34     	; 0x2a8 <displaySwitch+0x28>
     286:	88 23       	and	r24, r24
     288:	81 f1       	breq	.+96     	; 0x2ea <displaySwitch+0x6a>
     28a:	81 30       	cpi	r24, 0x01	; 1
     28c:	f1 f4       	brne	.+60     	; 0x2ca <displaySwitch+0x4a>
    case 0:
      PORTB = 0x07;
      PORTA = segment_data[4];
      break;
    case 1:
      PORTB = 0x17;
     28e:	97 e1       	ldi	r25, 0x17	; 23
     290:	98 bb       	out	0x18, r25	; 24
      PORTA = segment_data[3];
     292:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <segment_data+0x3>
     296:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     298:	ef e9       	ldi	r30, 0x9F	; 159
     29a:	ff e0       	ldi	r31, 0x0F	; 15
     29c:	31 97       	sbiw	r30, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <displaySwitch+0x1c>
     2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <displaySwitch+0x22>
     2a2:	00 00       	nop
    default:
      break;
  } 
  _delay_ms(1);				//Adds delay for screen congruency
  if(displayValue == 4) return 0; 	//Starts display back to 0
  return ++displayValue; 
     2a4:	8f 5f       	subi	r24, 0xFF	; 255
     2a6:	08 95       	ret
// Takes the segment_data[] array that has the #_DIGIT values and displays it to the 
// current LED digit (displayValue) and returns the next value that will be used for displaying
//***********************************************************************************
uint8_t displaySwitch(uint8_t displayValue)
{
  switch(displayValue){
     2a8:	83 30       	cpi	r24, 0x03	; 3
     2aa:	c9 f0       	breq	.+50     	; 0x2de <displaySwitch+0x5e>
     2ac:	84 30       	cpi	r24, 0x04	; 4
     2ae:	69 f4       	brne	.+26     	; 0x2ca <displaySwitch+0x4a>
    case 3:
      PORTB = 0x37;
      PORTA = segment_data[1];
      break;
    case 4:
      PORTB = 0x47;
     2b0:	87 e4       	ldi	r24, 0x47	; 71
     2b2:	88 bb       	out	0x18, r24	; 24
      PORTA = segment_data[0];
     2b4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <segment_data>
     2b8:	8b bb       	out	0x1b, r24	; 27
     2ba:	8f e9       	ldi	r24, 0x9F	; 159
     2bc:	9f e0       	ldi	r25, 0x0F	; 15
     2be:	01 97       	sbiw	r24, 0x01	; 1
     2c0:	f1 f7       	brne	.-4      	; 0x2be <displaySwitch+0x3e>
     2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <displaySwitch+0x44>
     2c4:	00 00       	nop
      break;
    default:
      break;
  } 
  _delay_ms(1);				//Adds delay for screen congruency
  if(displayValue == 4) return 0; 	//Starts display back to 0
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	08 95       	ret
     2ca:	ef e9       	ldi	r30, 0x9F	; 159
     2cc:	ff e0       	ldi	r31, 0x0F	; 15
     2ce:	31 97       	sbiw	r30, 0x01	; 1
     2d0:	f1 f7       	brne	.-4      	; 0x2ce <displaySwitch+0x4e>
     2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <displaySwitch+0x54>
     2d4:	00 00       	nop
     2d6:	84 30       	cpi	r24, 0x04	; 4
     2d8:	29 f7       	brne	.-54     	; 0x2a4 <displaySwitch+0x24>
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	08 95       	ret
    case 2:
      PORTB = 0x27;
      PORTA = segment_data[2];
      break;
    case 3:
      PORTB = 0x37;
     2de:	97 e3       	ldi	r25, 0x37	; 55
     2e0:	98 bb       	out	0x18, r25	; 24
      PORTA = segment_data[1];
     2e2:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <segment_data+0x1>
     2e6:	9b bb       	out	0x1b, r25	; 27
      break;
     2e8:	d7 cf       	rjmp	.-82     	; 0x298 <displaySwitch+0x18>
//***********************************************************************************
uint8_t displaySwitch(uint8_t displayValue)
{
  switch(displayValue){
    case 0:
      PORTB = 0x07;
     2ea:	97 e0       	ldi	r25, 0x07	; 7
     2ec:	98 bb       	out	0x18, r25	; 24
      PORTA = segment_data[4];
     2ee:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <segment_data+0x4>
     2f2:	9b bb       	out	0x1b, r25	; 27
      break;
     2f4:	d1 cf       	rjmp	.-94     	; 0x298 <displaySwitch+0x18>
    case 1:
      PORTB = 0x17;
      PORTA = segment_data[3];
      break;
    case 2:
      PORTB = 0x27;
     2f6:	97 e2       	ldi	r25, 0x27	; 39
     2f8:	98 bb       	out	0x18, r25	; 24
      PORTA = segment_data[2];
     2fa:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <segment_data+0x2>
     2fe:	9b bb       	out	0x1b, r25	; 27
      break;
     300:	cb cf       	rjmp	.-106    	; 0x298 <displaySwitch+0x18>

00000302 <ButtonCheck>:
// Takes in the current value outputted and returns the adjusted value based on the number
//***********************************************************************************
uint8_t ButtonCheck(uint8_t buttonMode)
{
  //PORTA to input w/ pullups 
  DDRA  = 0x00;	
     302:	1a ba       	out	0x1a, r1	; 26
  PORTA = 0xFF;
     304:	9f ef       	ldi	r25, 0xFF	; 255
     306:	9b bb       	out	0x1b, r25	; 27
  //enable tristate buffer for pushbutton switches via DEC7 on the encoder
  PORTB = 0x70; 
     308:	90 e7       	ldi	r25, 0x70	; 112
     30a:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     30c:	95 e3       	ldi	r25, 0x35	; 53
     30e:	9a 95       	dec	r25
     310:	f1 f7       	brne	.-4      	; 0x30e <ButtonCheck+0xc>
     312:	00 00       	nop
     314:	e5 e3       	ldi	r30, 0x35	; 53
     316:	f1 e0       	ldi	r31, 0x01	; 1
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	70 e0       	ldi	r23, 0x00	; 0
  _delay_us(10);		//BUG"Added delay to get first button to work, need better fix
  while(buttonLoop < 8)
  {     
    if(chk_buttons(buttonLoop))
    {
      buttonMode ^= (1<<buttonLoop); 
     31c:	a1 e0       	ldi	r26, 0x01	; 1
     31e:	b0 e0       	ldi	r27, 0x00	; 0
// Edited to have a state array of size 8 for each button
//******************************************************************************
uint8_t chk_buttons(uint8_t buttons) {
  //Gansels debounce with the state as an array that is used to check against the values that buttons is at
  static uint16_t state[8] = {0}; //holds present state
  state[buttons] = (state[buttons] << 1) | (! bit_is_clear(PINA, buttons)) | 0xE000;
     320:	99 b3       	in	r25, 0x19	; 25
     322:	20 81       	ld	r18, Z
     324:	31 81       	ldd	r19, Z+1	; 0x01
     326:	22 0f       	add	r18, r18
     328:	33 1f       	adc	r19, r19
     32a:	a9 01       	movw	r20, r18
     32c:	50 6e       	ori	r21, 0xE0	; 224
     32e:	29 2f       	mov	r18, r25
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	06 2e       	mov	r0, r22
     334:	02 c0       	rjmp	.+4      	; 0x33a <ButtonCheck+0x38>
     336:	35 95       	asr	r19
     338:	27 95       	ror	r18
     33a:	0a 94       	dec	r0
     33c:	e2 f7       	brpl	.-8      	; 0x336 <ButtonCheck+0x34>
     33e:	21 70       	andi	r18, 0x01	; 1
     340:	33 27       	eor	r19, r19
     342:	24 2b       	or	r18, r20
     344:	35 2b       	or	r19, r21
     346:	21 93       	st	Z+, r18
     348:	31 93       	st	Z+, r19
  if (state[buttons] == 0xF000) return 1;
     34a:	21 15       	cp	r18, r1
     34c:	30 4f       	sbci	r19, 0xF0	; 240
     34e:	39 f4       	brne	.+14     	; 0x35e <ButtonCheck+0x5c>
  _delay_us(10);		//BUG"Added delay to get first button to work, need better fix
  while(buttonLoop < 8)
  {     
    if(chk_buttons(buttonLoop))
    {
      buttonMode ^= (1<<buttonLoop); 
     350:	9d 01       	movw	r18, r26
     352:	06 2e       	mov	r0, r22
     354:	01 c0       	rjmp	.+2      	; 0x358 <ButtonCheck+0x56>
     356:	22 0f       	add	r18, r18
     358:	0a 94       	dec	r0
     35a:	ea f7       	brpl	.-6      	; 0x356 <ButtonCheck+0x54>
     35c:	82 27       	eor	r24, r18
     35e:	6f 5f       	subi	r22, 0xFF	; 255
     360:	7f 4f       	sbci	r23, 0xFF	; 255
  PORTA = 0xFF;
  //enable tristate buffer for pushbutton switches via DEC7 on the encoder
  PORTB = 0x70; 
  uint8_t buttonLoop = 0;
  _delay_us(10);		//BUG"Added delay to get first button to work, need better fix
  while(buttonLoop < 8)
     362:	68 30       	cpi	r22, 0x08	; 8
     364:	71 05       	cpc	r23, r1
     366:	e1 f6       	brne	.-72     	; 0x320 <ButtonCheck+0x1e>
    {
      buttonMode ^= (1<<buttonLoop); 
    }
    buttonLoop++;
  }
  DDRA = 0xFF;
     368:	9f ef       	ldi	r25, 0xFF	; 255
     36a:	9a bb       	out	0x1a, r25	; 26
  return buttonMode;
     36c:	08 95       	ret

0000036e <ClockCounterCorrection>:
//                     ClockCounterCorrection(uint16_t displayValue)                                    
// Takes in a value and ensures it is in the format a clock would use
// Returns value in the format HH:MM 
//***********************************************************************************
uint16_t ClockCounterCorrection(uint16_t displayValue)
{
     36e:	48 2f       	mov	r20, r24
  static uint8_t displayValueHours;
  static uint8_t displayValueMins;
  
  displayValueHours = (displayValue / 60);
     370:	28 2f       	mov	r18, r24
     372:	39 2f       	mov	r19, r25
     374:	a9 e8       	ldi	r26, 0x89	; 137
     376:	b8 e8       	ldi	r27, 0x88	; 136
     378:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <__umulhisi3>
     37c:	9c 01       	movw	r18, r24
     37e:	36 95       	lsr	r19
     380:	27 95       	ror	r18
     382:	32 95       	swap	r19
     384:	22 95       	swap	r18
     386:	2f 70       	andi	r18, 0x0F	; 15
     388:	23 27       	eor	r18, r19
     38a:	3f 70       	andi	r19, 0x0F	; 15
     38c:	23 27       	eor	r18, r19
  displayValueMins  = (displayValue - (60 * displayValueHours));
  displayValue      = ((displayValueHours * 100) + displayValueMins);
     38e:	8c e3       	ldi	r24, 0x3C	; 60
     390:	28 9f       	mul	r18, r24
     392:	40 19       	sub	r20, r0
     394:	11 24       	eor	r1, r1
     396:	84 2f       	mov	r24, r20
     398:	90 e0       	ldi	r25, 0x00	; 0
  
  return displayValue;
}
     39a:	44 e6       	ldi	r20, 0x64	; 100
     39c:	24 9f       	mul	r18, r20
     39e:	80 0d       	add	r24, r0
     3a0:	91 1d       	adc	r25, r1
     3a2:	11 24       	eor	r1, r1
     3a4:	08 95       	ret

000003a6 <EncoderValueDirection>:
  //First If statment checks   0B000000__ 
  //Second If statment checks  0B0000__00 
  
  static uint8_t previousEncoderValue = 0x0F;

  if((previousEncoderValue & 0x03) == 0x00 && (currentEncoderValue & 0x03) == 0x01)
     3a6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <previousEncoderValue.2004>
     3aa:	29 2f       	mov	r18, r25
     3ac:	23 70       	andi	r18, 0x03	; 3
     3ae:	71 f4       	brne	.+28     	; 0x3cc <EncoderValueDirection+0x26>
     3b0:	28 2f       	mov	r18, r24
     3b2:	23 70       	andi	r18, 0x03	; 3
     3b4:	21 30       	cpi	r18, 0x01	; 1
     3b6:	e9 f0       	breq	.+58     	; 0x3f2 <EncoderValueDirection+0x4c>
     3b8:	9c 70       	andi	r25, 0x0C	; 12
    previousEncoderValue = (currentEncoderValue & 0x0F);
    return CCW;   
  }
  
  //Checks the second Encoder
  if((previousEncoderValue & 0x0C) == 0x00 && (currentEncoderValue & 0x0C) == 0x04)
     3ba:	91 f4       	brne	.+36     	; 0x3e0 <EncoderValueDirection+0x3a>
     3bc:	98 2f       	mov	r25, r24
     3be:	9c 70       	andi	r25, 0x0C	; 12
     3c0:	94 30       	cpi	r25, 0x04	; 4
     3c2:	b9 f0       	breq	.+46     	; 0x3f2 <EncoderValueDirection+0x4c>
  else if((previousEncoderValue & 0x0C) == 0x04 && (currentEncoderValue & 0x0C) == 0x00)
  {
    previousEncoderValue = (currentEncoderValue & 0x0F);
    return CCW;   
  }
  previousEncoderValue = currentEncoderValue;
     3c4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <previousEncoderValue.2004>
  return 0;
     3c8:	80 e0       	ldi	r24, 0x00	; 0
}
     3ca:	08 95       	ret
  if((previousEncoderValue & 0x03) == 0x00 && (currentEncoderValue & 0x03) == 0x01)
  {
    previousEncoderValue = (currentEncoderValue & 0x0F);
    return CW;
  }
  else if((previousEncoderValue & 0x03) == 0x01 && (currentEncoderValue & 0x03) == 0x00)
     3cc:	21 30       	cpi	r18, 0x01	; 1
     3ce:	a1 f7       	brne	.-24     	; 0x3b8 <EncoderValueDirection+0x12>
     3d0:	28 2f       	mov	r18, r24
     3d2:	23 70       	andi	r18, 0x03	; 3
     3d4:	89 f7       	brne	.-30     	; 0x3b8 <EncoderValueDirection+0x12>
  {
    previousEncoderValue = (currentEncoderValue & 0x0F);
     3d6:	8f 70       	andi	r24, 0x0F	; 15
     3d8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <previousEncoderValue.2004>
    return CCW;   
     3dc:	8f ef       	ldi	r24, 0xFF	; 255
     3de:	08 95       	ret
  if((previousEncoderValue & 0x0C) == 0x00 && (currentEncoderValue & 0x0C) == 0x04)
  {
    previousEncoderValue = (currentEncoderValue & 0x0F);
    return CW;
  }
  else if((previousEncoderValue & 0x0C) == 0x04 && (currentEncoderValue & 0x0C) == 0x00)
     3e0:	94 30       	cpi	r25, 0x04	; 4
     3e2:	81 f7       	brne	.-32     	; 0x3c4 <EncoderValueDirection+0x1e>
     3e4:	98 2f       	mov	r25, r24
     3e6:	9c 70       	andi	r25, 0x0C	; 12
     3e8:	b1 f3       	breq	.-20     	; 0x3d6 <EncoderValueDirection+0x30>
  {
    previousEncoderValue = (currentEncoderValue & 0x0F);
    return CCW;   
  }
  previousEncoderValue = currentEncoderValue;
     3ea:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <previousEncoderValue.2004>
  return 0;
     3ee:	80 e0       	ldi	r24, 0x00	; 0
}
     3f0:	08 95       	ret
  
  static uint8_t previousEncoderValue = 0x0F;

  if((previousEncoderValue & 0x03) == 0x00 && (currentEncoderValue & 0x03) == 0x01)
  {
    previousEncoderValue = (currentEncoderValue & 0x0F);
     3f2:	8f 70       	andi	r24, 0x0F	; 15
     3f4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <previousEncoderValue.2004>
    return CW;
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	08 95       	ret

000003fc <__vector_16>:
// Toggles COLON bits
// Counts Seconds, rolls over every 60, increments and rolls clock over 
// Counts up too 255 (which inidcates 1 sec with 32Khz clk & 128 prescale)
//*********************************************************************************
ISR(TIMER0_OVF_vect)
{ 
     3fc:	1f 92       	push	r1
     3fe:	0f 92       	push	r0
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	0f 92       	push	r0
     404:	11 24       	eor	r1, r1
     406:	2f 93       	push	r18
     408:	3f 93       	push	r19
     40a:	8f 93       	push	r24
     40c:	9f 93       	push	r25
  static uint8_t currentSeconds = 0;
  static uint8_t snoozeTimer = 0;
  segment_data[2] ^= 0x03;   
     40e:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <segment_data+0x2>
     412:	83 e0       	ldi	r24, 0x03	; 3
     414:	82 27       	eor	r24, r18
     416:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <segment_data+0x2>
  if(currentSeconds < 60)
     41a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <currentSeconds.2010>
     41e:	8c 33       	cpi	r24, 0x3C	; 60
     420:	a0 f4       	brcc	.+40     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
  {
    if(snoozeFlag == SNOOZEON)
     422:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <snoozeFlag>
     426:	91 30       	cpi	r25, 0x01	; 1
     428:	29 f1       	breq	.+74     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     42a:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <snoozeTimer.2011>
    {
      snoozeTimer++;
      segment_data[2] ^= 0x04;
    }
    currentSeconds++;
     42e:	8f 5f       	subi	r24, 0xFF	; 255
     430:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <currentSeconds.2010>
  {
    currentTime++;
    currentSeconds = 0;
  }

  if(snoozeTimer == 10)
     434:	9a 30       	cpi	r25, 0x0A	; 10
     436:	c1 f0       	breq	.+48     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
  {
    snoozeFlag = SNOOZEALARM;
    snoozeTimer = 0;
  }
}
     438:	9f 91       	pop	r25
     43a:	8f 91       	pop	r24
     43c:	3f 91       	pop	r19
     43e:	2f 91       	pop	r18
     440:	0f 90       	pop	r0
     442:	0f be       	out	0x3f, r0	; 63
     444:	0f 90       	pop	r0
     446:	1f 90       	pop	r1
     448:	18 95       	reti
      segment_data[2] ^= 0x04;
    }
    currentSeconds++;
  }else
  {
    currentTime++;
     44a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
     44e:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
     452:	01 96       	adiw	r24, 0x01	; 1
     454:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
     458:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
    currentSeconds = 0;
     45c:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <currentSeconds.2010>
     460:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <snoozeTimer.2011>
  }

  if(snoozeTimer == 10)
     464:	9a 30       	cpi	r25, 0x0A	; 10
     466:	41 f7       	brne	.-48     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
  {
    snoozeFlag = SNOOZEALARM;
     468:	82 e0       	ldi	r24, 0x02	; 2
     46a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <snoozeFlag>
    snoozeTimer = 0;
     46e:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <snoozeTimer.2011>
  }
}
     472:	e2 cf       	rjmp	.-60     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
  segment_data[2] ^= 0x03;   
  if(currentSeconds < 60)
  {
    if(snoozeFlag == SNOOZEON)
    {
      snoozeTimer++;
     474:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <snoozeTimer.2011>
     478:	9f 5f       	subi	r25, 0xFF	; 255
     47a:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <snoozeTimer.2011>
      segment_data[2] ^= 0x04;
     47e:	37 e0       	ldi	r19, 0x07	; 7
     480:	23 27       	eor	r18, r19
     482:	20 93 25 01 	sts	0x0125, r18	; 0x800125 <segment_data+0x2>
     486:	d3 cf       	rjmp	.-90     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>

00000488 <__vector_12>:
//                                   ISR(TIMER1_OVF_vect)                                    
// Triggered when TimerCounter1 overflows
//
//*********************************************************************************
ISR(TIMER1_COMPA_vect)
{ 
     488:	1f 92       	push	r1
     48a:	0f 92       	push	r0
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	0f 92       	push	r0
     490:	11 24       	eor	r1, r1
     492:	8f 93       	push	r24
  PORTD ^= 0b10000000;
     494:	82 b3       	in	r24, 0x12	; 18
     496:	80 58       	subi	r24, 0x80	; 128
     498:	82 bb       	out	0x12, r24	; 18
}
     49a:	8f 91       	pop	r24
     49c:	0f 90       	pop	r0
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	0f 90       	pop	r0
     4a2:	1f 90       	pop	r1
     4a4:	18 95       	reti

000004a6 <AlarmSetMode>:
// Function entered when the user presses the first button on the button board
// loops until user to inputs time (w/ encoder)
// Once user presses same button, Alarm is set and function is exitted// 
//*********************************************************************************
uint16_t AlarmSetMode(uint8_t alarmOffset)
{
     4a6:	cf 93       	push	r28
     4a8:	c8 2f       	mov	r28, r24
/*********************************************************************/
//              SPI_read(uint8_t currentBarGraph)
// Sends the bar graph data and then reads the SPI port.
/*********************************************************************/
uint16_t SPI_read(uint8_t currentBarGraph){
  PORTB &= 0x7F;
     4aa:	c7 98       	cbi	0x18, 7	; 24
  SPDR = currentBarGraph;
     4ac:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){} //wait till 8 bits have been sent
     4ae:	77 9b       	sbis	0x0e, 7	; 14
     4b0:	fe cf       	rjmp	.-4      	; 0x4ae <AlarmSetMode+0x8>
  //PORTD = 0xFF;
  //PORTD = 0x00;
  PORTE = 0x00;
     4b2:	13 b8       	out	0x03, r1	; 3
  PORTE = 0xFF;
     4b4:	8f ef       	ldi	r24, 0xFF	; 255
     4b6:	83 b9       	out	0x03, r24	; 3
  return(SPDR); //return incoming data from SPDR
     4b8:	8f b1       	in	r24, 0x0f	; 15
  static uint8_t  currentEncoderValue  = 0;
  static uint16_t encodersDisplayValue  = 0;
  int8_t currentAdjustmentValue = 0;
  static uint16_t  offsetVal = 1439;
  currentEncoderValue = (SPI_read(currentAdjustmentValue));  
  currentAdjustmentValue = EncoderValueDirection(currentEncoderValue);
     4ba:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <EncoderValueDirection>
     4be:	48 2f       	mov	r20, r24
  encodersDisplayValue += currentAdjustmentValue;
     4c0:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <encodersDisplayValue.2021>
     4c4:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <encodersDisplayValue.2021+0x1>
     4c8:	c9 01       	movw	r24, r18
     4ca:	84 0f       	add	r24, r20
     4cc:	91 1d       	adc	r25, r1
     4ce:	47 fd       	sbrc	r20, 7
     4d0:	9a 95       	dec	r25
     4d2:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <encodersDisplayValue.2021+0x1>
     4d6:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <encodersDisplayValue.2021>
  // Checks if the clock will roll backwards behind 0
  // 1439 is clock time for 23 : 59
  if(!alarmOffset)
     4da:	c1 11       	cpse	r28, r1
     4dc:	1d c0       	rjmp	.+58     	; 0x518 <AlarmSetMode+0x72>
  {
    offsetVal = 1439;
     4de:	2f e9       	ldi	r18, 0x9F	; 159
     4e0:	35 e0       	ldi	r19, 0x05	; 5
     4e2:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <offsetVal.2023+0x1>
     4e6:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <offsetVal.2023>
  }else{
    offsetVal = 779;  
  }

  if((encodersDisplayValue == 0) && (currentAdjustmentValue == CCW)) 
     4ea:	00 97       	sbiw	r24, 0x00	; 0
     4ec:	21 f4       	brne	.+8      	; 0x4f6 <AlarmSetMode+0x50>
     4ee:	4f 3f       	cpi	r20, 0xFF	; 255
     4f0:	11 f1       	breq	.+68     	; 0x536 <AlarmSetMode+0x90>
  {
    if(!offsetVal){ encodersDisplayValue = 0;}
    else{	    encodersDisplayValue = 60;}
  }
  return encodersDisplayValue;
}
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret
  }

  if((encodersDisplayValue == 0) && (currentAdjustmentValue == CCW)) 
  {
    encodersDisplayValue = offsetVal;
  }else if(encodersDisplayValue > offsetVal)
     4f6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <offsetVal.2023>
     4fa:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <offsetVal.2023+0x1>
     4fe:	28 17       	cp	r18, r24
     500:	39 07       	cpc	r19, r25
     502:	b8 f7       	brcc	.-18     	; 0x4f2 <AlarmSetMode+0x4c>
  {
    if(!offsetVal){ encodersDisplayValue = 0;}
     504:	23 2b       	or	r18, r19
     506:	79 f0       	breq	.+30     	; 0x526 <AlarmSetMode+0x80>
    else{	    encodersDisplayValue = 60;}
     508:	8c e3       	ldi	r24, 0x3C	; 60
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <encodersDisplayValue.2021+0x1>
     510:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <encodersDisplayValue.2021>
  }
  return encodersDisplayValue;
}
     514:	cf 91       	pop	r28
     516:	08 95       	ret
  // 1439 is clock time for 23 : 59
  if(!alarmOffset)
  {
    offsetVal = 1439;
  }else{
    offsetVal = 779;  
     518:	2b e0       	ldi	r18, 0x0B	; 11
     51a:	33 e0       	ldi	r19, 0x03	; 3
     51c:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <offsetVal.2023+0x1>
     520:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <offsetVal.2023>
     524:	e2 cf       	rjmp	.-60     	; 0x4ea <AlarmSetMode+0x44>
  if((encodersDisplayValue == 0) && (currentAdjustmentValue == CCW)) 
  {
    encodersDisplayValue = offsetVal;
  }else if(encodersDisplayValue > offsetVal)
  {
    if(!offsetVal){ encodersDisplayValue = 0;}
     526:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <encodersDisplayValue.2021+0x1>
     52a:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <encodersDisplayValue.2021>
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	90 e0       	ldi	r25, 0x00	; 0
    else{	    encodersDisplayValue = 60;}
  }
  return encodersDisplayValue;
}
     532:	cf 91       	pop	r28
     534:	08 95       	ret
    offsetVal = 779;  
  }

  if((encodersDisplayValue == 0) && (currentAdjustmentValue == CCW)) 
  {
    encodersDisplayValue = offsetVal;
     536:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <offsetVal.2023>
     53a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <offsetVal.2023+0x1>
     53e:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <encodersDisplayValue.2021+0x1>
     542:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <encodersDisplayValue.2021>
  {
    if(!offsetVal){ encodersDisplayValue = 0;}
    else{	    encodersDisplayValue = 60;}
  }
  return encodersDisplayValue;
}
     546:	cf 91       	pop	r28
     548:	08 95       	ret

0000054a <VolumeSetMode>:
/*********************************************************************/
//              SPI_read(uint8_t currentBarGraph)
// Sends the bar graph data and then reads the SPI port.
/*********************************************************************/
uint16_t SPI_read(uint8_t currentBarGraph){
  PORTB &= 0x7F;
     54a:	c7 98       	cbi	0x18, 7	; 24
  SPDR = currentBarGraph;
     54c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){} //wait till 8 bits have been sent
     54e:	77 9b       	sbis	0x0e, 7	; 14
     550:	fe cf       	rjmp	.-4      	; 0x54e <VolumeSetMode+0x4>
  //PORTD = 0xFF;
  //PORTD = 0x00;
  PORTE = 0x00;
     552:	13 b8       	out	0x03, r1	; 3
  PORTE = 0xFF;
     554:	8f ef       	ldi	r24, 0xFF	; 255
     556:	83 b9       	out	0x03, r24	; 3
  return(SPDR); //return incoming data from SPDR
     558:	8f b1       	in	r24, 0x0f	; 15
  static uint8_t  currentEncoderValue  = 0;
  static uint16_t encodersVolumeValue  = 0xE0;
  int8_t currentAdjustmentValue = 0;
  
  currentEncoderValue = (SPI_read(currentAdjustmentValue));  
  currentAdjustmentValue = EncoderValueDirection(currentEncoderValue);
     55a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <EncoderValueDirection>
     55e:	48 2f       	mov	r20, r24
  encodersVolumeValue += currentAdjustmentValue;
     560:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     564:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     568:	c9 01       	movw	r24, r18
     56a:	84 0f       	add	r24, r20
     56c:	91 1d       	adc	r25, r1
     56e:	47 fd       	sbrc	r20, 7
     570:	9a 95       	dec	r25
     572:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     576:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  if((encodersVolumeValue == 0) && (currentAdjustmentValue == CCW)) 
     57a:	00 97       	sbiw	r24, 0x00	; 0
     57c:	19 f4       	brne	.+6      	; 0x584 <VolumeSetMode+0x3a>
     57e:	4f 3f       	cpi	r20, 0xFF	; 255
     580:	61 f0       	breq	.+24     	; 0x59a <VolumeSetMode+0x50>
  }else if(encodersVolumeValue > 0xFF)
  {
    encodersVolumeValue = 0;
  }
  return encodersVolumeValue*2;
}
     582:	08 95       	ret
  currentAdjustmentValue = EncoderValueDirection(currentEncoderValue);
  encodersVolumeValue += currentAdjustmentValue;
  if((encodersVolumeValue == 0) && (currentAdjustmentValue == CCW)) 
  {
    encodersVolumeValue = 0xFF;
  }else if(encodersVolumeValue > 0xFF)
     584:	8f 3f       	cpi	r24, 0xFF	; 255
     586:	91 05       	cpc	r25, r1
     588:	89 f0       	breq	.+34     	; 0x5ac <VolumeSetMode+0x62>
     58a:	80 f0       	brcs	.+32     	; 0x5ac <VolumeSetMode+0x62>
  {
    encodersVolumeValue = 0;
     58c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
     590:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
  }
  return encodersVolumeValue*2;
}
     598:	08 95       	ret
  currentEncoderValue = (SPI_read(currentAdjustmentValue));  
  currentAdjustmentValue = EncoderValueDirection(currentEncoderValue);
  encodersVolumeValue += currentAdjustmentValue;
  if((encodersVolumeValue == 0) && (currentAdjustmentValue == CCW)) 
  {
    encodersVolumeValue = 0xFF;
     59a:	8f ef       	ldi	r24, 0xFF	; 255
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     5a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     5a6:	8e ef       	ldi	r24, 0xFE	; 254
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	08 95       	ret
     5ac:	88 0f       	add	r24, r24
     5ae:	99 1f       	adc	r25, r25
     5b0:	08 95       	ret

000005b2 <init>:
{
//  TCNT0 - Norm Mode | Using external 32kHz clock | 128 Prescale	!Count to 250 using uint8_t to reach 1 second for clock!
//  TCNT1 - CTC  Mode | Pick freuquency      | Output too PD7		!Outputs to summing amp, which gets outputted to speaker!
//  TCNT2 - Fast PWM  | Output to PB7 (OC2)  				!Controls brightness of LED Display!
//  TCNT3 - Fast PWM  | Output to PE5 (OC3C)				!Controls volume to Audio Amp!
DDRA  = 0xFF;	      		    //set port A as input  				
     5b2:	8f ef       	ldi	r24, 0xFF	; 255
     5b4:	8a bb       	out	0x1a, r24	; 26
DDRB  = 0xFF; 	      		    //set port B as outputs
     5b6:	87 bb       	out	0x17, r24	; 23
DDRD  |= (1 << PD7);   		    //Sets Port pin2 D to output
     5b8:	8f 9a       	sbi	0x11, 7	; 17
DDRE  |= (1 << PE5) | (1 << PE6);   //Sets Port pin6 E to output
     5ba:	82 b1       	in	r24, 0x02	; 2
     5bc:	80 66       	ori	r24, 0x60	; 96
     5be:	82 b9       	out	0x02, r24	; 2
PORTD = 0x00;   		    //set port D to LOW
     5c0:	12 ba       	out	0x12, r1	; 18
PORTB = 0x10;   		    //set port B to start with LED1  	
     5c2:	80 e1       	ldi	r24, 0x10	; 16
     5c4:	88 bb       	out	0x18, r24	; 24

ASSR   |= (1 << AS0);			//Use external 32kHz clock 
     5c6:	80 b7       	in	r24, 0x30	; 48
     5c8:	88 60       	ori	r24, 0x08	; 8
     5ca:	80 bf       	out	0x30, r24	; 48
SPCR   |= (1 << SPE)   | (1 << MSTR);	//Enable SPI communication in mastermode
     5cc:	8d b1       	in	r24, 0x0d	; 13
     5ce:	80 65       	ori	r24, 0x50	; 80
     5d0:	8d b9       	out	0x0d, r24	; 13
SPSR    = (1 << SPI2X); 		//SPI at 2x speed (8 MHz)  
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	8e b9       	out	0x0e, r24	; 14
TIMSK  |= (1 << TOIE0) | (1 << OCIE1A);	//enable interrupt on compare & overflow of TCNT1
     5d6:	87 b7       	in	r24, 0x37	; 55
     5d8:	81 61       	ori	r24, 0x11	; 17
     5da:	87 bf       	out	0x37, r24	; 55
TCCR0  |= (1 << CS00)  | (1 << CS02);	//SET CS02	//normal mode, prescale by 128
     5dc:	83 b7       	in	r24, 0x33	; 51
     5de:	85 60       	ori	r24, 0x05	; 5
     5e0:	83 bf       	out	0x33, r24	; 51
TCCR1A  = 0;
     5e2:	1f bc       	out	0x2f, r1	; 47
TCCR1B |= (1 << WGM12); 		//CTC mode clear at TOP immediate
     5e4:	8e b5       	in	r24, 0x2e	; 46
     5e6:	88 60       	ori	r24, 0x08	; 8
     5e8:	8e bd       	out	0x2e, r24	; 46
TCCR1C  = 0;
     5ea:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
TCCR3A |= (1 << COM3C1) | (1 << WGM30);	//Set as output compare to OC3C (PE5)
     5ee:	eb e8       	ldi	r30, 0x8B	; 139
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	80 81       	ld	r24, Z
     5f4:	89 60       	ori	r24, 0x09	; 9
     5f6:	80 83       	st	Z, r24
TCCR3A |= (1 << WGM32);
     5f8:	80 81       	ld	r24, Z
     5fa:	88 60       	ori	r24, 0x08	; 8
     5fc:	80 83       	st	Z, r24
TCCR3B |= (1 << WGM32) | (1 << CS00); 
     5fe:	ea e8       	ldi	r30, 0x8A	; 138
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	80 81       	ld	r24, Z
     604:	89 60       	ori	r24, 0x09	; 9
     606:	80 83       	st	Z, r24
OCR1A  = 0xF0F;
     608:	8f e0       	ldi	r24, 0x0F	; 15
     60a:	9f e0       	ldi	r25, 0x0F	; 15
     60c:	9b bd       	out	0x2b, r25	; 43
     60e:	8a bd       	out	0x2a, r24	; 42
OCR3C  = 0x00;
     610:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     614:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
TCCR2  |= (1 << WGM21) | (1 << WGM20) | (1 << COM21) | (1 << CS21); // Set TCNT2 to fast pwm outputting to OC2 (PB7)
     618:	85 b5       	in	r24, 0x25	; 37
     61a:	8a 66       	ori	r24, 0x6A	; 106
     61c:	85 bd       	out	0x25, r24	; 37
ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); 		    // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
     61e:	86 b1       	in	r24, 0x06	; 6
     620:	87 60       	ori	r24, 0x07	; 7
     622:	86 b9       	out	0x06, r24	; 6
ADMUX  |= (1 << REFS0); // Set ADC reference to AVCC
     624:	3e 9a       	sbi	0x07, 6	; 7
ADMUX  |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
     626:	3d 9a       	sbi	0x07, 5	; 7
ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode
     628:	35 9a       	sbi	0x06, 5	; 6
ADCSRA |= (1 << ADEN);  // Enable ADC
     62a:	37 9a       	sbi	0x06, 7	; 6
ADCSRA |= (1 << ADSC);  // Start A2D Conversions
     62c:	36 9a       	sbi	0x06, 6	; 6
lcd_init();
     62e:	0e 94 51 05 	call	0xaa2	; 0xaa2 <lcd_init>
sei();
     632:	78 94       	sei
     634:	08 95       	ret

00000636 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     636:	91 e0       	ldi	r25, 0x01	; 1
     638:	81 11       	cpse	r24, r1
     63a:	01 c0       	rjmp	.+2      	; 0x63e <send_lcd+0x8>
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     640:	77 9b       	sbis	0x0e, 7	; 14
     642:	fe cf       	rjmp	.-4      	; 0x640 <send_lcd+0xa>
  SPDR = byte;                        //send payload
     644:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     646:	77 9b       	sbis	0x0e, 7	; 14
     648:	fe cf       	rjmp	.-4      	; 0x646 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     64a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     64e:	88 60       	ori	r24, 0x08	; 8
     650:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     654:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     658:	87 7f       	andi	r24, 0xF7	; 247
     65a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     65e:	08 95       	ret

00000660 <refresh_lcd>:
//
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
     660:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <i.2094>
     664:	82 0f       	add	r24, r18
     666:	91 1d       	adc	r25, r1
     668:	fc 01       	movw	r30, r24
     66a:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     670:	77 9b       	sbis	0x0e, 7	; 14
     672:	fe cf       	rjmp	.-4      	; 0x670 <refresh_lcd+0x10>
  SPDR = byte;                        //send payload
     674:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     676:	77 9b       	sbis	0x0e, 7	; 14
     678:	fe cf       	rjmp	.-4      	; 0x676 <refresh_lcd+0x16>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     67a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     67e:	88 60       	ori	r24, 0x08	; 8
     680:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     684:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     688:	87 7f       	andi	r24, 0xF7	; 247
     68a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
     68e:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <i.2094>
     692:	8f 5f       	subi	r24, 0xFF	; 255
     694:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <i.2094>
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
     698:	80 31       	cpi	r24, 0x10	; 16
     69a:	d9 f0       	breq	.+54     	; 0x6d2 <refresh_lcd+0x72>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     69c:	80 32       	cpi	r24, 0x20	; 32
     69e:	09 f0       	breq	.+2      	; 0x6a2 <refresh_lcd+0x42>
     6a0:	08 95       	ret
     6a2:	85 ed       	ldi	r24, 0xD5	; 213
     6a4:	8a 95       	dec	r24
     6a6:	f1 f7       	brne	.-4      	; 0x6a4 <refresh_lcd+0x44>
     6a8:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     6aa:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6ac:	77 9b       	sbis	0x0e, 7	; 14
     6ae:	fe cf       	rjmp	.-4      	; 0x6ac <refresh_lcd+0x4c>
  SPDR = byte;                        //send payload
     6b0:	80 e8       	ldi	r24, 0x80	; 128
     6b2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6b4:	77 9b       	sbis	0x0e, 7	; 14
     6b6:	fe cf       	rjmp	.-4      	; 0x6b4 <refresh_lcd+0x54>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     6b8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6bc:	88 60       	ori	r24, 0x08	; 8
     6be:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6c2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6c6:	87 7f       	andi	r24, 0xF7	; 247
     6c8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     6cc:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <i.2094>
     6d0:	08 95       	ret
     6d2:	f5 ed       	ldi	r31, 0xD5	; 213
     6d4:	fa 95       	dec	r31
     6d6:	f1 f7       	brne	.-4      	; 0x6d4 <refresh_lcd+0x74>
     6d8:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     6da:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6dc:	77 9b       	sbis	0x0e, 7	; 14
     6de:	fe cf       	rjmp	.-4      	; 0x6dc <refresh_lcd+0x7c>
  SPDR = byte;                        //send payload
     6e0:	80 ec       	ldi	r24, 0xC0	; 192
     6e2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6e4:	77 9b       	sbis	0x0e, 7	; 14
     6e6:	fe cf       	rjmp	.-4      	; 0x6e4 <refresh_lcd+0x84>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     6e8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6ec:	88 60       	ori	r24, 0x08	; 8
     6ee:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6f2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6f6:	87 7f       	andi	r24, 0xF7	; 247
     6f8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6fc:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <i.2094>
     700:	cd cf       	rjmp	.-102    	; 0x69c <refresh_lcd+0x3c>

00000702 <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     702:	66 0f       	add	r22, r22
     704:	66 0f       	add	r22, r22
     706:	66 0f       	add	r22, r22
     708:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     70a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     70c:	77 9b       	sbis	0x0e, 7	; 14
     70e:	fe cf       	rjmp	.-4      	; 0x70c <set_custom_character+0xa>
  SPDR = byte;                        //send payload
     710:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     712:	77 9b       	sbis	0x0e, 7	; 14
     714:	fe cf       	rjmp	.-4      	; 0x712 <set_custom_character+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     716:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     71a:	28 60       	ori	r18, 0x08	; 8
     71c:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     720:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     724:	27 7f       	andi	r18, 0xF7	; 247
     726:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     72a:	25 ed       	ldi	r18, 0xD5	; 213
     72c:	2a 95       	dec	r18
     72e:	f1 f7       	brne	.-4      	; 0x72c <set_custom_character+0x2a>
     730:	00 00       	nop
     732:	fc 01       	movw	r30, r24
     734:	9c 01       	movw	r18, r24
     736:	28 5f       	subi	r18, 0xF8	; 248
     738:	3f 4f       	sbci	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     73a:	91 e0       	ldi	r25, 0x01	; 1

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     73c:	81 91       	ld	r24, Z+
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     73e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     740:	77 9b       	sbis	0x0e, 7	; 14
     742:	fe cf       	rjmp	.-4      	; 0x740 <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
     744:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     746:	77 9b       	sbis	0x0e, 7	; 14
     748:	fe cf       	rjmp	.-4      	; 0x746 <set_custom_character+0x44>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     74a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     74e:	88 60       	ori	r24, 0x08	; 8
     750:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     754:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     758:	87 7f       	andi	r24, 0xF7	; 247
     75a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     75e:	85 ed       	ldi	r24, 0xD5	; 213
     760:	8a 95       	dec	r24
     762:	f1 f7       	brne	.-4      	; 0x760 <set_custom_character+0x5e>
     764:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     766:	e2 17       	cp	r30, r18
     768:	f3 07       	cpc	r31, r19
     76a:	41 f7       	brne	.-48     	; 0x73c <set_custom_character+0x3a>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     76c:	08 95       	ret

0000076e <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     76e:	90 e4       	ldi	r25, 0x40	; 64
     770:	89 9f       	mul	r24, r25
     772:	60 0d       	add	r22, r0
     774:	11 24       	eor	r1, r1
     776:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     778:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     77a:	77 9b       	sbis	0x0e, 7	; 14
     77c:	fe cf       	rjmp	.-4      	; 0x77a <set_cursor+0xc>
  SPDR = byte;                        //send payload
     77e:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     780:	77 9b       	sbis	0x0e, 7	; 14
     782:	fe cf       	rjmp	.-4      	; 0x780 <set_cursor+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     784:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     788:	88 60       	ori	r24, 0x08	; 8
     78a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     78e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     792:	87 7f       	andi	r24, 0xF7	; 247
     794:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     798:	08 95       	ret

0000079a <uint2lcd>:
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     79a:	81 11       	cpse	r24, r1
     79c:	13 c0       	rjmp	.+38     	; 0x7c4 <uint2lcd+0x2a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7a2:	77 9b       	sbis	0x0e, 7	; 14
     7a4:	fe cf       	rjmp	.-4      	; 0x7a2 <uint2lcd+0x8>
  SPDR = byte;                        //send payload
     7a6:	80 e3       	ldi	r24, 0x30	; 48
     7a8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7aa:	77 9b       	sbis	0x0e, 7	; 14
     7ac:	fe cf       	rjmp	.-4      	; 0x7aa <uint2lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     7ae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7b2:	88 60       	ori	r24, 0x08	; 8
     7b4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7b8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7bc:	87 7f       	andi	r24, 0xF7	; 247
     7be:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7c2:	08 95       	ret
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     7c4:	84 36       	cpi	r24, 0x64	; 100
     7c6:	b0 f4       	brcc	.+44     	; 0x7f4 <uint2lcd+0x5a>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     7c8:	8a 30       	cpi	r24, 0x0A	; 10
     7ca:	60 f5       	brcc	.+88     	; 0x824 <uint2lcd+0x8a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7d0:	77 9b       	sbis	0x0e, 7	; 14
     7d2:	fe cf       	rjmp	.-4      	; 0x7d0 <uint2lcd+0x36>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     7d4:	9d ec       	ldi	r25, 0xCD	; 205
     7d6:	89 9f       	mul	r24, r25
     7d8:	91 2d       	mov	r25, r1
     7da:	11 24       	eor	r1, r1
     7dc:	96 95       	lsr	r25
     7de:	96 95       	lsr	r25
     7e0:	96 95       	lsr	r25
     7e2:	2a e0       	ldi	r18, 0x0A	; 10
     7e4:	92 9f       	mul	r25, r18
     7e6:	80 19       	sub	r24, r0
     7e8:	11 24       	eor	r1, r1
     7ea:	80 5d       	subi	r24, 0xD0	; 208
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     7ec:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7ee:	77 9b       	sbis	0x0e, 7	; 14
     7f0:	fe cf       	rjmp	.-4      	; 0x7ee <uint2lcd+0x54>
     7f2:	dd cf       	rjmp	.-70     	; 0x7ae <uint2lcd+0x14>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     7f4:	99 e2       	ldi	r25, 0x29	; 41
     7f6:	89 9f       	mul	r24, r25
     7f8:	91 2d       	mov	r25, r1
     7fa:	11 24       	eor	r1, r1
     7fc:	92 95       	swap	r25
     7fe:	9f 70       	andi	r25, 0x0F	; 15
     800:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     802:	21 e0       	ldi	r18, 0x01	; 1
     804:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     806:	77 9b       	sbis	0x0e, 7	; 14
     808:	fe cf       	rjmp	.-4      	; 0x806 <uint2lcd+0x6c>
  SPDR = byte;                        //send payload
     80a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     80c:	77 9b       	sbis	0x0e, 7	; 14
     80e:	fe cf       	rjmp	.-4      	; 0x80c <uint2lcd+0x72>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     810:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     814:	98 60       	ori	r25, 0x08	; 8
     816:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     81a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     81e:	97 7f       	andi	r25, 0xF7	; 247
     820:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     824:	99 e2       	ldi	r25, 0x29	; 41
     826:	89 9f       	mul	r24, r25
     828:	91 2d       	mov	r25, r1
     82a:	11 24       	eor	r1, r1
     82c:	92 95       	swap	r25
     82e:	9f 70       	andi	r25, 0x0F	; 15
     830:	38 2f       	mov	r19, r24
     832:	24 e6       	ldi	r18, 0x64	; 100
     834:	92 9f       	mul	r25, r18
     836:	30 19       	sub	r19, r0
     838:	11 24       	eor	r1, r1
     83a:	2d ec       	ldi	r18, 0xCD	; 205
     83c:	32 9f       	mul	r19, r18
     83e:	91 2d       	mov	r25, r1
     840:	11 24       	eor	r1, r1
     842:	96 95       	lsr	r25
     844:	96 95       	lsr	r25
     846:	96 95       	lsr	r25
     848:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     84a:	21 e0       	ldi	r18, 0x01	; 1
     84c:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     84e:	77 9b       	sbis	0x0e, 7	; 14
     850:	fe cf       	rjmp	.-4      	; 0x84e <uint2lcd+0xb4>
  SPDR = byte;                        //send payload
     852:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     854:	77 9b       	sbis	0x0e, 7	; 14
     856:	fe cf       	rjmp	.-4      	; 0x854 <uint2lcd+0xba>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     858:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     85c:	98 60       	ori	r25, 0x08	; 8
     85e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     862:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     866:	97 7f       	andi	r25, 0xF7	; 247
     868:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     86c:	af cf       	rjmp	.-162    	; 0x7cc <uint2lcd+0x32>

0000086e <int2lcd>:
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     86e:	87 ff       	sbrs	r24, 7
    else          {uint2lcd(number);                                            }
     870:	0c 94 cd 03 	jmp	0x79a	; 0x79a <uint2lcd>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     874:	91 e0       	ldi	r25, 0x01	; 1
     876:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     878:	77 9b       	sbis	0x0e, 7	; 14
     87a:	fe cf       	rjmp	.-4      	; 0x878 <int2lcd+0xa>
  SPDR = byte;                        //send payload
     87c:	9d e2       	ldi	r25, 0x2D	; 45
     87e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     880:	77 9b       	sbis	0x0e, 7	; 14
     882:	fe cf       	rjmp	.-4      	; 0x880 <int2lcd+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     884:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     888:	98 60       	ori	r25, 0x08	; 8
     88a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     88e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     892:	97 7f       	andi	r25, 0xF7	; 247
     894:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     898:	95 ed       	ldi	r25, 0xD5	; 213
     89a:	9a 95       	dec	r25
     89c:	f1 f7       	brne	.-4      	; 0x89a <int2lcd+0x2c>
     89e:	00 00       	nop
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     8a0:	81 95       	neg	r24
     8a2:	0c 94 cd 03 	jmp	0x79a	; 0x79a <uint2lcd>

000008a6 <cursor_on>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     8a6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8a8:	77 9b       	sbis	0x0e, 7	; 14
     8aa:	fe cf       	rjmp	.-4      	; 0x8a8 <cursor_on+0x2>
  SPDR = byte;                        //send payload
     8ac:	8e e0       	ldi	r24, 0x0E	; 14
     8ae:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8b0:	77 9b       	sbis	0x0e, 7	; 14
     8b2:	fe cf       	rjmp	.-4      	; 0x8b0 <cursor_on+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     8b4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8b8:	88 60       	ori	r24, 0x08	; 8
     8ba:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8be:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8c2:	87 7f       	andi	r24, 0xF7	; 247
     8c4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8c8:	08 95       	ret

000008ca <cursor_off>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     8ca:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8cc:	77 9b       	sbis	0x0e, 7	; 14
     8ce:	fe cf       	rjmp	.-4      	; 0x8cc <cursor_off+0x2>
  SPDR = byte;                        //send payload
     8d0:	8c e0       	ldi	r24, 0x0C	; 12
     8d2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8d4:	77 9b       	sbis	0x0e, 7	; 14
     8d6:	fe cf       	rjmp	.-4      	; 0x8d4 <cursor_off+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     8d8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8dc:	88 60       	ori	r24, 0x08	; 8
     8de:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8e2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8e6:	87 7f       	andi	r24, 0xF7	; 247
     8e8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8ec:	08 95       	ret

000008ee <shift_right>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     8ee:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8f0:	77 9b       	sbis	0x0e, 7	; 14
     8f2:	fe cf       	rjmp	.-4      	; 0x8f0 <shift_right+0x2>
  SPDR = byte;                        //send payload
     8f4:	8e e1       	ldi	r24, 0x1E	; 30
     8f6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8f8:	77 9b       	sbis	0x0e, 7	; 14
     8fa:	fe cf       	rjmp	.-4      	; 0x8f8 <shift_right+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     8fc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     900:	88 60       	ori	r24, 0x08	; 8
     902:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     906:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     90a:	87 7f       	andi	r24, 0xF7	; 247
     90c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     910:	08 95       	ret

00000912 <shift_left>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     912:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     914:	77 9b       	sbis	0x0e, 7	; 14
     916:	fe cf       	rjmp	.-4      	; 0x914 <shift_left+0x2>
  SPDR = byte;                        //send payload
     918:	88 e1       	ldi	r24, 0x18	; 24
     91a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     91c:	77 9b       	sbis	0x0e, 7	; 14
     91e:	fe cf       	rjmp	.-4      	; 0x91c <shift_left+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     920:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     924:	88 60       	ori	r24, 0x08	; 8
     926:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     92a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     92e:	87 7f       	andi	r24, 0xF7	; 247
     930:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     934:	08 95       	ret

00000936 <strobe_lcd>:
     936:	e2 e6       	ldi	r30, 0x62	; 98
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	80 81       	ld	r24, Z
     93c:	88 60       	ori	r24, 0x08	; 8
     93e:	80 83       	st	Z, r24
     940:	80 81       	ld	r24, Z
     942:	87 7f       	andi	r24, 0xF7	; 247
     944:	80 83       	st	Z, r24
     946:	08 95       	ret

00000948 <clear_display>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     948:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     94a:	77 9b       	sbis	0x0e, 7	; 14
     94c:	fe cf       	rjmp	.-4      	; 0x94a <clear_display+0x2>
  SPDR = byte;                        //send payload
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     952:	77 9b       	sbis	0x0e, 7	; 14
     954:	fe cf       	rjmp	.-4      	; 0x952 <clear_display+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     956:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     95a:	88 60       	ori	r24, 0x08	; 8
     95c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     960:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     964:	87 7f       	andi	r24, 0xF7	; 247
     966:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     96a:	8f e1       	ldi	r24, 0x1F	; 31
     96c:	9c e1       	ldi	r25, 0x1C	; 28
     96e:	01 97       	sbiw	r24, 0x01	; 1
     970:	f1 f7       	brne	.-4      	; 0x96e <clear_display+0x26>
     972:	00 c0       	rjmp	.+0      	; 0x974 <clear_display+0x2c>
     974:	00 00       	nop
     976:	08 95       	ret

00000978 <cursor_home>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     978:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     97a:	77 9b       	sbis	0x0e, 7	; 14
     97c:	fe cf       	rjmp	.-4      	; 0x97a <cursor_home+0x2>
  SPDR = byte;                        //send payload
     97e:	82 e0       	ldi	r24, 0x02	; 2
     980:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     982:	77 9b       	sbis	0x0e, 7	; 14
     984:	fe cf       	rjmp	.-4      	; 0x982 <cursor_home+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     986:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     98a:	88 60       	ori	r24, 0x08	; 8
     98c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     990:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     994:	87 7f       	andi	r24, 0xF7	; 247
     996:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     99a:	8f e6       	ldi	r24, 0x6F	; 111
     99c:	97 e1       	ldi	r25, 0x17	; 23
     99e:	01 97       	sbiw	r24, 0x01	; 1
     9a0:	f1 f7       	brne	.-4      	; 0x99e <cursor_home+0x26>
     9a2:	00 c0       	rjmp	.+0      	; 0x9a4 <cursor_home+0x2c>
     9a4:	00 00       	nop
     9a6:	08 95       	ret

000009a8 <line2_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     9a8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9aa:	77 9b       	sbis	0x0e, 7	; 14
     9ac:	fe cf       	rjmp	.-4      	; 0x9aa <line2_col1+0x2>
  SPDR = byte;                        //send payload
     9ae:	80 ec       	ldi	r24, 0xC0	; 192
     9b0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9b2:	77 9b       	sbis	0x0e, 7	; 14
     9b4:	fe cf       	rjmp	.-4      	; 0x9b2 <line2_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     9b6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9ba:	88 60       	ori	r24, 0x08	; 8
     9bc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9c0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9c4:	87 7f       	andi	r24, 0xF7	; 247
     9c6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9ca:	08 95       	ret

000009cc <line1_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     9cc:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9ce:	77 9b       	sbis	0x0e, 7	; 14
     9d0:	fe cf       	rjmp	.-4      	; 0x9ce <line1_col1+0x2>
  SPDR = byte;                        //send payload
     9d2:	80 e8       	ldi	r24, 0x80	; 128
     9d4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9d6:	77 9b       	sbis	0x0e, 7	; 14
     9d8:	fe cf       	rjmp	.-4      	; 0x9d6 <line1_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     9da:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9de:	88 60       	ori	r24, 0x08	; 8
     9e0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9e4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9e8:	87 7f       	andi	r24, 0xF7	; 247
     9ea:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9ee:	08 95       	ret

000009f0 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
     9f0:	90 e1       	ldi	r25, 0x10	; 16
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     9f2:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     9f4:	20 e2       	ldi	r18, 0x20	; 32
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     9f6:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9f8:	77 9b       	sbis	0x0e, 7	; 14
     9fa:	fe cf       	rjmp	.-4      	; 0x9f8 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
     9fc:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9fe:	77 9b       	sbis	0x0e, 7	; 14
     a00:	fe cf       	rjmp	.-4      	; 0x9fe <fill_spaces+0xe>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a02:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a06:	88 60       	ori	r24, 0x08	; 8
     a08:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a0c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a10:	87 7f       	andi	r24, 0xF7	; 247
     a12:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a16:	85 ed       	ldi	r24, 0xD5	; 213
     a18:	8a 95       	dec	r24
     a1a:	f1 f7       	brne	.-4      	; 0xa18 <fill_spaces+0x28>
     a1c:	00 00       	nop
     a1e:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
     a20:	51 f7       	brne	.-44     	; 0x9f6 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
     a22:	08 95       	ret

00000a24 <char2lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a24:	91 e0       	ldi	r25, 0x01	; 1
     a26:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a28:	77 9b       	sbis	0x0e, 7	; 14
     a2a:	fe cf       	rjmp	.-4      	; 0xa28 <char2lcd+0x4>
  SPDR = byte;                        //send payload
     a2c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a2e:	77 9b       	sbis	0x0e, 7	; 14
     a30:	fe cf       	rjmp	.-4      	; 0xa2e <char2lcd+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a32:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a36:	88 60       	ori	r24, 0x08	; 8
     a38:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a3c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a40:	87 7f       	andi	r24, 0xF7	; 247
     a42:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a46:	08 95       	ret

00000a48 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
     a48:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	60 e0       	ldi	r22, 0x00	; 0
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a50:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     a52:	df 01       	movw	r26, r30
     a54:	a4 0f       	add	r26, r20
     a56:	b5 1f       	adc	r27, r21
     a58:	8c 91       	ld	r24, X
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a5a:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a5c:	77 9b       	sbis	0x0e, 7	; 14
     a5e:	fe cf       	rjmp	.-4      	; 0xa5c <string2lcd+0x14>
  SPDR = byte;                        //send payload
     a60:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a62:	77 9b       	sbis	0x0e, 7	; 14
     a64:	fe cf       	rjmp	.-4      	; 0xa62 <string2lcd+0x1a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a66:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a6a:	98 60       	ori	r25, 0x08	; 8
     a6c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a70:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a74:	97 7f       	andi	r25, 0xF7	; 247
     a76:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a7a:	85 ed       	ldi	r24, 0xD5	; 213
     a7c:	8a 95       	dec	r24
     a7e:	f1 f7       	brne	.-4      	; 0xa7c <string2lcd+0x34>
     a80:	00 00       	nop
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     a82:	6f 5f       	subi	r22, 0xFF	; 255
     a84:	46 2f       	mov	r20, r22
     a86:	50 e0       	ldi	r21, 0x00	; 0
     a88:	df 01       	movw	r26, r30
     a8a:	0d 90       	ld	r0, X+
     a8c:	00 20       	and	r0, r0
     a8e:	e9 f7       	brne	.-6      	; 0xa8a <string2lcd+0x42>
     a90:	9d 01       	movw	r18, r26
     a92:	2e 1b       	sub	r18, r30
     a94:	3f 0b       	sbc	r19, r31
     a96:	22 50       	subi	r18, 0x02	; 2
     a98:	31 09       	sbc	r19, r1
     a9a:	24 17       	cp	r18, r20
     a9c:	35 07       	cpc	r19, r21
     a9e:	c8 f6       	brcc	.-78     	; 0xa52 <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
     aa0:	08 95       	ret

00000aa2 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aa2:	8f ef       	ldi	r24, 0xFF	; 255
     aa4:	99 ef       	ldi	r25, 0xF9	; 249
     aa6:	01 97       	sbiw	r24, 0x01	; 1
     aa8:	f1 f7       	brne	.-4      	; 0xaa6 <lcd_init+0x4>
     aaa:	00 c0       	rjmp	.+0      	; 0xaac <lcd_init+0xa>
     aac:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
     aae:	88 e0       	ldi	r24, 0x08	; 8
     ab0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ab4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ab6:	77 9b       	sbis	0x0e, 7	; 14
     ab8:	fe cf       	rjmp	.-4      	; 0xab6 <lcd_init+0x14>
  SPDR = byte;                        //send payload
     aba:	80 e3       	ldi	r24, 0x30	; 48
     abc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     abe:	77 9b       	sbis	0x0e, 7	; 14
     ac0:	fe cf       	rjmp	.-4      	; 0xabe <lcd_init+0x1c>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ac2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ac6:	88 60       	ori	r24, 0x08	; 8
     ac8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     acc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ad0:	87 7f       	andi	r24, 0xF7	; 247
     ad2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ad6:	8f e5       	ldi	r24, 0x5F	; 95
     ad8:	9d e6       	ldi	r25, 0x6D	; 109
     ada:	01 97       	sbiw	r24, 0x01	; 1
     adc:	f1 f7       	brne	.-4      	; 0xada <lcd_init+0x38>
     ade:	00 c0       	rjmp	.+0      	; 0xae0 <lcd_init+0x3e>
     ae0:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ae2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ae4:	77 9b       	sbis	0x0e, 7	; 14
     ae6:	fe cf       	rjmp	.-4      	; 0xae4 <lcd_init+0x42>
  SPDR = byte;                        //send payload
     ae8:	80 e3       	ldi	r24, 0x30	; 48
     aea:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     aec:	77 9b       	sbis	0x0e, 7	; 14
     aee:	fe cf       	rjmp	.-4      	; 0xaec <lcd_init+0x4a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     af0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     af4:	88 60       	ori	r24, 0x08	; 8
     af6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     afa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     afe:	87 7f       	andi	r24, 0xF7	; 247
     b00:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b04:	8f e5       	ldi	r24, 0x5F	; 95
     b06:	9d e6       	ldi	r25, 0x6D	; 109
     b08:	01 97       	sbiw	r24, 0x01	; 1
     b0a:	f1 f7       	brne	.-4      	; 0xb08 <lcd_init+0x66>
     b0c:	00 c0       	rjmp	.+0      	; 0xb0e <lcd_init+0x6c>
     b0e:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b10:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b12:	77 9b       	sbis	0x0e, 7	; 14
     b14:	fe cf       	rjmp	.-4      	; 0xb12 <lcd_init+0x70>
  SPDR = byte;                        //send payload
     b16:	80 e3       	ldi	r24, 0x30	; 48
     b18:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b1a:	77 9b       	sbis	0x0e, 7	; 14
     b1c:	fe cf       	rjmp	.-4      	; 0xb1a <lcd_init+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b1e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b22:	88 60       	ori	r24, 0x08	; 8
     b24:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b28:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b2c:	87 7f       	andi	r24, 0xF7	; 247
     b2e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b32:	8f e5       	ldi	r24, 0x5F	; 95
     b34:	9d e6       	ldi	r25, 0x6D	; 109
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	f1 f7       	brne	.-4      	; 0xb36 <lcd_init+0x94>
     b3a:	00 c0       	rjmp	.+0      	; 0xb3c <lcd_init+0x9a>
     b3c:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b3e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b40:	77 9b       	sbis	0x0e, 7	; 14
     b42:	fe cf       	rjmp	.-4      	; 0xb40 <lcd_init+0x9e>
  SPDR = byte;                        //send payload
     b44:	88 e3       	ldi	r24, 0x38	; 56
     b46:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b48:	77 9b       	sbis	0x0e, 7	; 14
     b4a:	fe cf       	rjmp	.-4      	; 0xb48 <lcd_init+0xa6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b4c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b50:	88 60       	ori	r24, 0x08	; 8
     b52:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b56:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b5a:	87 7f       	andi	r24, 0xF7	; 247
     b5c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b60:	8f e1       	ldi	r24, 0x1F	; 31
     b62:	9e e4       	ldi	r25, 0x4E	; 78
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	f1 f7       	brne	.-4      	; 0xb64 <lcd_init+0xc2>
     b68:	00 c0       	rjmp	.+0      	; 0xb6a <lcd_init+0xc8>
     b6a:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b6c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b6e:	77 9b       	sbis	0x0e, 7	; 14
     b70:	fe cf       	rjmp	.-4      	; 0xb6e <lcd_init+0xcc>
  SPDR = byte;                        //send payload
     b72:	88 e0       	ldi	r24, 0x08	; 8
     b74:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b76:	77 9b       	sbis	0x0e, 7	; 14
     b78:	fe cf       	rjmp	.-4      	; 0xb76 <lcd_init+0xd4>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b7a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b7e:	88 60       	ori	r24, 0x08	; 8
     b80:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b84:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b88:	87 7f       	andi	r24, 0xF7	; 247
     b8a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b8e:	8f e1       	ldi	r24, 0x1F	; 31
     b90:	9e e4       	ldi	r25, 0x4E	; 78
     b92:	01 97       	sbiw	r24, 0x01	; 1
     b94:	f1 f7       	brne	.-4      	; 0xb92 <lcd_init+0xf0>
     b96:	00 c0       	rjmp	.+0      	; 0xb98 <lcd_init+0xf6>
     b98:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b9a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b9c:	77 9b       	sbis	0x0e, 7	; 14
     b9e:	fe cf       	rjmp	.-4      	; 0xb9c <lcd_init+0xfa>
  SPDR = byte;                        //send payload
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ba4:	77 9b       	sbis	0x0e, 7	; 14
     ba6:	fe cf       	rjmp	.-4      	; 0xba4 <lcd_init+0x102>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ba8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bac:	88 60       	ori	r24, 0x08	; 8
     bae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bb2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bb6:	87 7f       	andi	r24, 0xF7	; 247
     bb8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bbc:	8f e1       	ldi	r24, 0x1F	; 31
     bbe:	9e e4       	ldi	r25, 0x4E	; 78
     bc0:	01 97       	sbiw	r24, 0x01	; 1
     bc2:	f1 f7       	brne	.-4      	; 0xbc0 <lcd_init+0x11e>
     bc4:	00 c0       	rjmp	.+0      	; 0xbc6 <lcd_init+0x124>
     bc6:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     bc8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bca:	77 9b       	sbis	0x0e, 7	; 14
     bcc:	fe cf       	rjmp	.-4      	; 0xbca <lcd_init+0x128>
  SPDR = byte;                        //send payload
     bce:	86 e0       	ldi	r24, 0x06	; 6
     bd0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bd2:	77 9b       	sbis	0x0e, 7	; 14
     bd4:	fe cf       	rjmp	.-4      	; 0xbd2 <lcd_init+0x130>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     bd6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bda:	88 60       	ori	r24, 0x08	; 8
     bdc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     be0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     be4:	87 7f       	andi	r24, 0xF7	; 247
     be6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bea:	8f e1       	ldi	r24, 0x1F	; 31
     bec:	9e e4       	ldi	r25, 0x4E	; 78
     bee:	01 97       	sbiw	r24, 0x01	; 1
     bf0:	f1 f7       	brne	.-4      	; 0xbee <lcd_init+0x14c>
     bf2:	00 c0       	rjmp	.+0      	; 0xbf4 <lcd_init+0x152>
     bf4:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     bf6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bf8:	77 9b       	sbis	0x0e, 7	; 14
     bfa:	fe cf       	rjmp	.-4      	; 0xbf8 <lcd_init+0x156>
  SPDR = byte;                        //send payload
     bfc:	8c e0       	ldi	r24, 0x0C	; 12
     bfe:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c00:	77 9b       	sbis	0x0e, 7	; 14
     c02:	fe cf       	rjmp	.-4      	; 0xc00 <lcd_init+0x15e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c04:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c08:	88 60       	ori	r24, 0x08	; 8
     c0a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c0e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c12:	87 7f       	andi	r24, 0xF7	; 247
     c14:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c18:	8f e1       	ldi	r24, 0x1F	; 31
     c1a:	9e e4       	ldi	r25, 0x4E	; 78
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	f1 f7       	brne	.-4      	; 0xc1c <lcd_init+0x17a>
     c20:	00 c0       	rjmp	.+0      	; 0xc22 <lcd_init+0x180>
     c22:	00 00       	nop
     c24:	08 95       	ret

00000c26 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
     c26:	4f 92       	push	r4
     c28:	5f 92       	push	r5
     c2a:	6f 92       	push	r6
     c2c:	7f 92       	push	r7
     c2e:	8f 92       	push	r8
     c30:	9f 92       	push	r9
     c32:	af 92       	push	r10
     c34:	bf 92       	push	r11
     c36:	cf 92       	push	r12
     c38:	df 92       	push	r13
     c3a:	ef 92       	push	r14
     c3c:	ff 92       	push	r15
     c3e:	0f 93       	push	r16
     c40:	1f 93       	push	r17
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
     c4a:	69 97       	sbiw	r28, 0x19	; 25
     c4c:	0f b6       	in	r0, 0x3f	; 63
     c4e:	f8 94       	cli
     c50:	de bf       	out	0x3e, r29	; 62
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	cd bf       	out	0x3d, r28	; 61
     c56:	14 2f       	mov	r17, r20
     c58:	42 2e       	mov	r4, r18
     c5a:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
     c5c:	00 23       	and	r16, r16
     c5e:	79 f0       	breq	.+30     	; 0xc7e <lcd_int32+0x58>
        bSigned = (qr.quot<0);
     c60:	6b 01       	movw	r12, r22
     c62:	7c 01       	movw	r14, r24
     c64:	cc 24       	eor	r12, r12
     c66:	f7 fc       	sbrc	r15, 7
     c68:	c3 94       	inc	r12
     c6a:	dd 24       	eor	r13, r13
     c6c:	ee 24       	eor	r14, r14
     c6e:	ff 24       	eor	r15, r15
     c70:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
     c72:	6b 01       	movw	r12, r22
     c74:	7c 01       	movw	r14, r24
     c76:	97 fd       	sbrc	r25, 7
     c78:	a3 c0       	rjmp	.+326    	; 0xdc0 <lcd_int32+0x19a>
     c7a:	c7 01       	movw	r24, r14
     c7c:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
     c7e:	44 20       	and	r4, r4
     c80:	09 f4       	brne	.+2      	; 0xc84 <lcd_int32+0x5e>
     c82:	96 c0       	rjmp	.+300    	; 0xdb0 <lcd_int32+0x18a>
     c84:	9e 01       	movw	r18, r28
     c86:	2f 5f       	subi	r18, 0xFF	; 255
     c88:	3f 4f       	sbci	r19, 0xFF	; 255
     c8a:	59 01       	movw	r10, r18
     c8c:	49 01       	movw	r8, r18
     c8e:	66 24       	eor	r6, r6
     c90:	6a 94       	dec	r6
     c92:	64 0c       	add	r6, r4
     c94:	71 2c       	mov	r7, r1
     c96:	3f ef       	ldi	r19, 0xFF	; 255
     c98:	63 1a       	sub	r6, r19
     c9a:	73 0a       	sbc	r7, r19
     c9c:	6a 0c       	add	r6, r10
     c9e:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
     ca0:	2a e0       	ldi	r18, 0x0A	; 10
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	40 e0       	ldi	r20, 0x00	; 0
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	0e 94 b3 08 	call	0x1166	; 0x1166 <__divmodsi4>
     cac:	e6 2f       	mov	r30, r22
     cae:	2a 8b       	std	Y+18, r18	; 0x12
     cb0:	3b 8b       	std	Y+19, r19	; 0x13
     cb2:	4c 8b       	std	Y+20, r20	; 0x14
     cb4:	5d 8b       	std	Y+21, r21	; 0x15
     cb6:	6a 89       	ldd	r22, Y+18	; 0x12
     cb8:	7b 89       	ldd	r23, Y+19	; 0x13
     cba:	8c 89       	ldd	r24, Y+20	; 0x14
     cbc:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     cbe:	20 e3       	ldi	r18, 0x30	; 48
     cc0:	2e 0f       	add	r18, r30
     cc2:	f4 01       	movw	r30, r8
     cc4:	21 93       	st	Z+, r18
     cc6:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
     cc8:	6e 16       	cp	r6, r30
     cca:	7f 06       	cpc	r7, r31
     ccc:	49 f7       	brne	.-46     	; 0xca0 <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
     cce:	99 24       	eor	r9, r9
     cd0:	93 94       	inc	r9
     cd2:	94 0c       	add	r9, r4
     cd4:	f5 01       	movw	r30, r10
     cd6:	e4 0d       	add	r30, r4
     cd8:	f1 1d       	adc	r31, r1
     cda:	2e e2       	ldi	r18, 0x2E	; 46
     cdc:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
     cde:	2a e0       	ldi	r18, 0x0A	; 10
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	40 e0       	ldi	r20, 0x00	; 0
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	0e 94 b3 08 	call	0x1166	; 0x1166 <__divmodsi4>
     cea:	e6 2f       	mov	r30, r22
     cec:	2a 8b       	std	Y+18, r18	; 0x12
     cee:	3b 8b       	std	Y+19, r19	; 0x13
     cf0:	4c 8b       	std	Y+20, r20	; 0x14
     cf2:	5d 8b       	std	Y+21, r21	; 0x15
     cf4:	6e 8b       	std	Y+22, r22	; 0x16
     cf6:	7f 8b       	std	Y+23, r23	; 0x17
     cf8:	88 8f       	std	Y+24, r24	; 0x18
     cfa:	99 8f       	std	Y+25, r25	; 0x19
     cfc:	6a 89       	ldd	r22, Y+18	; 0x12
     cfe:	7b 89       	ldd	r23, Y+19	; 0x13
     d00:	8c 89       	ldd	r24, Y+20	; 0x14
     d02:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     d04:	31 e0       	ldi	r19, 0x01	; 1
     d06:	39 0d       	add	r19, r9
     d08:	d5 01       	movw	r26, r10
     d0a:	a9 0d       	add	r26, r9
     d0c:	b1 1d       	adc	r27, r1
     d0e:	e0 5d       	subi	r30, 0xD0	; 208
     d10:	ec 93       	st	X, r30
     d12:	93 2e       	mov	r9, r19
        }while(qr.quot);
     d14:	61 15       	cp	r22, r1
     d16:	71 05       	cpc	r23, r1
     d18:	81 05       	cpc	r24, r1
     d1a:	91 05       	cpc	r25, r1
     d1c:	01 f7       	brne	.-64     	; 0xcde <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
     d1e:	11 23       	and	r17, r17
     d20:	61 f0       	breq	.+24     	; 0xd3a <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
     d22:	51 10       	cpse	r5, r1
     d24:	4b c0       	rjmp	.+150    	; 0xdbc <lcd_int32+0x196>
     d26:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
     d28:	31 17       	cp	r19, r17
     d2a:	38 f4       	brcc	.+14     	; 0xd3a <lcd_int32+0x114>
     d2c:	f5 01       	movw	r30, r10
     d2e:	e3 0f       	add	r30, r19
     d30:	f1 1d       	adc	r31, r1
     d32:	90 83       	st	Z, r25
     d34:	3f 5f       	subi	r19, 0xFF	; 255
     d36:	13 13       	cpse	r17, r19
     d38:	f9 cf       	rjmp	.-14     	; 0xd2c <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
     d3a:	00 23       	and	r16, r16
     d3c:	31 f0       	breq	.+12     	; 0xd4a <lcd_int32+0x124>
     d3e:	f5 01       	movw	r30, r10
     d40:	e3 0f       	add	r30, r19
     d42:	f1 1d       	adc	r31, r1
     d44:	9d e2       	ldi	r25, 0x2D	; 45
     d46:	90 83       	st	Z, r25
     d48:	3f 5f       	subi	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d4a:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     d4c:	31 50       	subi	r19, 0x01	; 1
     d4e:	f5 01       	movw	r30, r10
     d50:	e3 0f       	add	r30, r19
     d52:	f1 1d       	adc	r31, r1
     d54:	90 81       	ld	r25, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d56:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d58:	77 9b       	sbis	0x0e, 7	; 14
     d5a:	fe cf       	rjmp	.-4      	; 0xd58 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
     d5c:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d5e:	77 9b       	sbis	0x0e, 7	; 14
     d60:	fe cf       	rjmp	.-4      	; 0xd5e <lcd_int32+0x138>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     d62:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d66:	98 60       	ori	r25, 0x08	; 8
     d68:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d6c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d70:	97 7f       	andi	r25, 0xF7	; 247
     d72:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d76:	85 ed       	ldi	r24, 0xD5	; 213
     d78:	8a 95       	dec	r24
     d7a:	f1 f7       	brne	.-4      	; 0xd78 <lcd_int32+0x152>
     d7c:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     d7e:	31 11       	cpse	r19, r1
     d80:	e5 cf       	rjmp	.-54     	; 0xd4c <lcd_int32+0x126>

}
     d82:	69 96       	adiw	r28, 0x19	; 25
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	f8 94       	cli
     d88:	de bf       	out	0x3e, r29	; 62
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	cd bf       	out	0x3d, r28	; 61
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	1f 91       	pop	r17
     d94:	0f 91       	pop	r16
     d96:	ff 90       	pop	r15
     d98:	ef 90       	pop	r14
     d9a:	df 90       	pop	r13
     d9c:	cf 90       	pop	r12
     d9e:	bf 90       	pop	r11
     da0:	af 90       	pop	r10
     da2:	9f 90       	pop	r9
     da4:	8f 90       	pop	r8
     da6:	7f 90       	pop	r7
     da8:	6f 90       	pop	r6
     daa:	5f 90       	pop	r5
     dac:	4f 90       	pop	r4
     dae:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
     db0:	91 2c       	mov	r9, r1
     db2:	9e 01       	movw	r18, r28
     db4:	2f 5f       	subi	r18, 0xFF	; 255
     db6:	3f 4f       	sbci	r19, 0xFF	; 255
     db8:	59 01       	movw	r10, r18
     dba:	91 cf       	rjmp	.-222    	; 0xcde <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
     dbc:	90 e3       	ldi	r25, 0x30	; 48
     dbe:	b4 cf       	rjmp	.-152    	; 0xd28 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
     dc0:	f0 94       	com	r15
     dc2:	e0 94       	com	r14
     dc4:	d0 94       	com	r13
     dc6:	c0 94       	com	r12
     dc8:	c1 1c       	adc	r12, r1
     dca:	d1 1c       	adc	r13, r1
     dcc:	e1 1c       	adc	r14, r1
     dce:	f1 1c       	adc	r15, r1
     dd0:	54 cf       	rjmp	.-344    	; 0xc7a <lcd_int32+0x54>

00000dd2 <lcd_int16>:
     dd2:	5f 92       	push	r5
     dd4:	6f 92       	push	r6
     dd6:	7f 92       	push	r7
     dd8:	8f 92       	push	r8
     dda:	9f 92       	push	r9
     ddc:	af 92       	push	r10
     dde:	bf 92       	push	r11
     de0:	cf 92       	push	r12
     de2:	df 92       	push	r13
     de4:	ef 92       	push	r14
     de6:	ff 92       	push	r15
     de8:	0f 93       	push	r16
     dea:	1f 93       	push	r17
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	61 97       	sbiw	r28, 0x11	; 17
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	f8 94       	cli
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	cd bf       	out	0x3d, r28	; 61
     e00:	5c 01       	movw	r10, r24
     e02:	96 2e       	mov	r9, r22
     e04:	54 2e       	mov	r5, r20
     e06:	62 2e       	mov	r6, r18
     e08:	8b 2c       	mov	r8, r11
     e0a:	88 1c       	adc	r8, r8
     e0c:	88 24       	eor	r8, r8
     e0e:	88 1c       	adc	r8, r8
     e10:	78 2c       	mov	r7, r8
     e12:	9c 01       	movw	r18, r24
     e14:	97 fd       	sbrc	r25, 7
     e16:	9d c0       	rjmp	.+314    	; 0xf52 <lcd_int16+0x180>
     e18:	55 20       	and	r5, r5
     e1a:	09 f4       	brne	.+2      	; 0xe1e <lcd_int16+0x4c>
     e1c:	8e c0       	rjmp	.+284    	; 0xf3a <lcd_int16+0x168>
     e1e:	8e 01       	movw	r16, r28
     e20:	0f 5f       	subi	r16, 0xFF	; 255
     e22:	1f 4f       	sbci	r17, 0xFF	; 255
     e24:	78 01       	movw	r14, r16
     e26:	cc 24       	eor	r12, r12
     e28:	ca 94       	dec	r12
     e2a:	c5 0c       	add	r12, r5
     e2c:	d1 2c       	mov	r13, r1
     e2e:	8f ef       	ldi	r24, 0xFF	; 255
     e30:	c8 1a       	sub	r12, r24
     e32:	d8 0a       	sbc	r13, r24
     e34:	c0 0e       	add	r12, r16
     e36:	d1 1e       	adc	r13, r17
     e38:	6a e0       	ldi	r22, 0x0A	; 10
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	c9 01       	movw	r24, r18
     e3e:	0e 94 9f 08 	call	0x113e	; 0x113e <__divmodhi4>
     e42:	46 2f       	mov	r20, r22
     e44:	24 2f       	mov	r18, r20
     e46:	37 2f       	mov	r19, r23
     e48:	80 5d       	subi	r24, 0xD0	; 208
     e4a:	f7 01       	movw	r30, r14
     e4c:	81 93       	st	Z+, r24
     e4e:	7f 01       	movw	r14, r30
     e50:	ec 15       	cp	r30, r12
     e52:	fd 05       	cpc	r31, r13
     e54:	89 f7       	brne	.-30     	; 0xe38 <lcd_int16+0x66>
     e56:	ff 24       	eor	r15, r15
     e58:	f3 94       	inc	r15
     e5a:	f5 0c       	add	r15, r5
     e5c:	f8 01       	movw	r30, r16
     e5e:	e5 0d       	add	r30, r5
     e60:	f1 1d       	adc	r31, r1
     e62:	8e e2       	ldi	r24, 0x2E	; 46
     e64:	80 83       	st	Z, r24
     e66:	01 c0       	rjmp	.+2      	; 0xe6a <lcd_int16+0x98>
     e68:	f9 2e       	mov	r15, r25
     e6a:	6a e0       	ldi	r22, 0x0A	; 10
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	c9 01       	movw	r24, r18
     e70:	0e 94 9f 08 	call	0x113e	; 0x113e <__divmodhi4>
     e74:	46 2f       	mov	r20, r22
     e76:	24 2f       	mov	r18, r20
     e78:	37 2f       	mov	r19, r23
     e7a:	91 e0       	ldi	r25, 0x01	; 1
     e7c:	9f 0d       	add	r25, r15
     e7e:	f8 01       	movw	r30, r16
     e80:	ef 0d       	add	r30, r15
     e82:	f1 1d       	adc	r31, r1
     e84:	80 5d       	subi	r24, 0xD0	; 208
     e86:	80 83       	st	Z, r24
     e88:	21 15       	cp	r18, r1
     e8a:	31 05       	cpc	r19, r1
     e8c:	69 f7       	brne	.-38     	; 0xe68 <lcd_int16+0x96>
     e8e:	61 10       	cpse	r6, r1
     e90:	59 c0       	rjmp	.+178    	; 0xf44 <lcd_int16+0x172>
     e92:	b7 fc       	sbrc	r11, 7
     e94:	63 c0       	rjmp	.+198    	; 0xf5c <lcd_int16+0x18a>
     e96:	99 20       	and	r9, r9
     e98:	b1 f0       	breq	.+44     	; 0xec6 <lcd_int16+0xf4>
     e9a:	68 2d       	mov	r22, r8
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	80 e2       	ldi	r24, 0x20	; 32
     ea0:	29 2f       	mov	r18, r25
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	49 2d       	mov	r20, r9
     ea6:	50 e0       	ldi	r21, 0x00	; 0
     ea8:	46 1b       	sub	r20, r22
     eaa:	57 0b       	sbc	r21, r23
     eac:	24 17       	cp	r18, r20
     eae:	35 07       	cpc	r19, r21
     eb0:	54 f4       	brge	.+20     	; 0xec6 <lcd_int16+0xf4>
     eb2:	9f 5f       	subi	r25, 0xFF	; 255
     eb4:	f8 01       	movw	r30, r16
     eb6:	e2 0f       	add	r30, r18
     eb8:	f3 1f       	adc	r31, r19
     eba:	80 83       	st	Z, r24
     ebc:	29 2f       	mov	r18, r25
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	24 17       	cp	r18, r20
     ec2:	35 07       	cpc	r19, r21
     ec4:	b4 f3       	brlt	.-20     	; 0xeb2 <lcd_int16+0xe0>
     ec6:	77 20       	and	r7, r7
     ec8:	31 f0       	breq	.+12     	; 0xed6 <lcd_int16+0x104>
     eca:	f8 01       	movw	r30, r16
     ecc:	e9 0f       	add	r30, r25
     ece:	f1 1d       	adc	r31, r1
     ed0:	8d e2       	ldi	r24, 0x2D	; 45
     ed2:	80 83       	st	Z, r24
     ed4:	9f 5f       	subi	r25, 0xFF	; 255
     ed6:	21 e0       	ldi	r18, 0x01	; 1
     ed8:	91 50       	subi	r25, 0x01	; 1
     eda:	f8 01       	movw	r30, r16
     edc:	e9 0f       	add	r30, r25
     ede:	f1 1d       	adc	r31, r1
     ee0:	80 81       	ld	r24, Z
     ee2:	2f b9       	out	0x0f, r18	; 15
     ee4:	77 9b       	sbis	0x0e, 7	; 14
     ee6:	fe cf       	rjmp	.-4      	; 0xee4 <lcd_int16+0x112>
     ee8:	8f b9       	out	0x0f, r24	; 15
     eea:	77 9b       	sbis	0x0e, 7	; 14
     eec:	fe cf       	rjmp	.-4      	; 0xeea <lcd_int16+0x118>
     eee:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ef2:	88 60       	ori	r24, 0x08	; 8
     ef4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ef8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     efc:	87 7f       	andi	r24, 0xF7	; 247
     efe:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f02:	f5 ed       	ldi	r31, 0xD5	; 213
     f04:	fa 95       	dec	r31
     f06:	f1 f7       	brne	.-4      	; 0xf04 <lcd_int16+0x132>
     f08:	00 00       	nop
     f0a:	91 11       	cpse	r25, r1
     f0c:	e5 cf       	rjmp	.-54     	; 0xed8 <lcd_int16+0x106>
     f0e:	61 96       	adiw	r28, 0x11	; 17
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	1f 91       	pop	r17
     f20:	0f 91       	pop	r16
     f22:	ff 90       	pop	r15
     f24:	ef 90       	pop	r14
     f26:	df 90       	pop	r13
     f28:	cf 90       	pop	r12
     f2a:	bf 90       	pop	r11
     f2c:	af 90       	pop	r10
     f2e:	9f 90       	pop	r9
     f30:	8f 90       	pop	r8
     f32:	7f 90       	pop	r7
     f34:	6f 90       	pop	r6
     f36:	5f 90       	pop	r5
     f38:	08 95       	ret
     f3a:	f1 2c       	mov	r15, r1
     f3c:	8e 01       	movw	r16, r28
     f3e:	0f 5f       	subi	r16, 0xFF	; 255
     f40:	1f 4f       	sbci	r17, 0xFF	; 255
     f42:	93 cf       	rjmp	.-218    	; 0xe6a <lcd_int16+0x98>
     f44:	99 20       	and	r9, r9
     f46:	09 f4       	brne	.+2      	; 0xf4a <lcd_int16+0x178>
     f48:	be cf       	rjmp	.-132    	; 0xec6 <lcd_int16+0xf4>
     f4a:	68 2d       	mov	r22, r8
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	80 e3       	ldi	r24, 0x30	; 48
     f50:	a7 cf       	rjmp	.-178    	; 0xea0 <lcd_int16+0xce>
     f52:	22 27       	eor	r18, r18
     f54:	33 27       	eor	r19, r19
     f56:	28 1b       	sub	r18, r24
     f58:	39 0b       	sbc	r19, r25
     f5a:	5e cf       	rjmp	.-324    	; 0xe18 <lcd_int16+0x46>
     f5c:	f3 94       	inc	r15
     f5e:	f3 94       	inc	r15
     f60:	f8 01       	movw	r30, r16
     f62:	e9 0f       	add	r30, r25
     f64:	f1 1d       	adc	r31, r1
     f66:	8d e2       	ldi	r24, 0x2D	; 45
     f68:	80 83       	st	Z, r24
     f6a:	99 20       	and	r9, r9
     f6c:	59 f0       	breq	.+22     	; 0xf84 <lcd_int16+0x1b2>
     f6e:	2f 2d       	mov	r18, r15
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	49 2d       	mov	r20, r9
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	24 17       	cp	r18, r20
     f78:	35 07       	cpc	r19, r21
     f7a:	24 f4       	brge	.+8      	; 0xf84 <lcd_int16+0x1b2>
     f7c:	9f 2d       	mov	r25, r15
     f7e:	71 2c       	mov	r7, r1
     f80:	80 e2       	ldi	r24, 0x20	; 32
     f82:	97 cf       	rjmp	.-210    	; 0xeb2 <lcd_int16+0xe0>
     f84:	9f 2d       	mov	r25, r15
     f86:	a7 cf       	rjmp	.-178    	; 0xed6 <lcd_int16+0x104>

00000f88 <main>:
}

//***********************************************************************************
int main()
{
init();
     f88:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <init>
uint8_t  currentDisplayDigit = 0;       //Current LED to display on (0 == 1's digit
uint16_t displayValue = 0;	        //Current value to display on LEDs
uint16_t alarmValue = 1;	        //Current value held by the alarm
uint8_t  alarmActivated = OFF;		//If the Alarm is ON or OFF, initialize to OFF
uint8_t  alarmON = OFF;
uint8_t  alarmSET = ON;
     f8c:	99 24       	eor	r9, r9
     f8e:	93 94       	inc	r9
uint8_t  currentButtonsPressed = 0;	//Stores buttons that are currently pressed (holds value when pressed)
uint8_t  currentDisplayDigit = 0;       //Current LED to display on (0 == 1's digit
uint16_t displayValue = 0;	        //Current value to display on LEDs
uint16_t alarmValue = 1;	        //Current value held by the alarm
uint8_t  alarmActivated = OFF;		//If the Alarm is ON or OFF, initialize to OFF
uint8_t  alarmON = OFF;
     f90:	d1 2c       	mov	r13, r1
init();
uint8_t  currentButtonsPressed = 0;	//Stores buttons that are currently pressed (holds value when pressed)
uint8_t  currentDisplayDigit = 0;       //Current LED to display on (0 == 1's digit
uint16_t displayValue = 0;	        //Current value to display on LEDs
uint16_t alarmValue = 1;	        //Current value held by the alarm
uint8_t  alarmActivated = OFF;		//If the Alarm is ON or OFF, initialize to OFF
     f92:	c1 2c       	mov	r12, r1
{
init();
uint8_t  currentButtonsPressed = 0;	//Stores buttons that are currently pressed (holds value when pressed)
uint8_t  currentDisplayDigit = 0;       //Current LED to display on (0 == 1's digit
uint16_t displayValue = 0;	        //Current value to display on LEDs
uint16_t alarmValue = 1;	        //Current value held by the alarm
     f94:	ee 24       	eor	r14, r14
     f96:	e3 94       	inc	r14
     f98:	f1 2c       	mov	r15, r1
int main()
{
init();
uint8_t  currentButtonsPressed = 0;	//Stores buttons that are currently pressed (holds value when pressed)
uint8_t  currentDisplayDigit = 0;       //Current LED to display on (0 == 1's digit
uint16_t displayValue = 0;	        //Current value to display on LEDs
     f9a:	c0 e0       	ldi	r28, 0x00	; 0
     f9c:	d0 e0       	ldi	r29, 0x00	; 0
//***********************************************************************************
int main()
{
init();
uint8_t  currentButtonsPressed = 0;	//Stores buttons that are currently pressed (holds value when pressed)
uint8_t  currentDisplayDigit = 0;       //Current LED to display on (0 == 1's digit
     f9e:	00 e0       	ldi	r16, 0x00	; 0

//***********************************************************************************
int main()
{
init();
uint8_t  currentButtonsPressed = 0;	//Stores buttons that are currently pressed (holds value when pressed)
     fa0:	10 e0       	ldi	r17, 0x00	; 0
     fa2:	77 24       	eor	r7, r7
     fa4:	73 94       	inc	r7
  // Restart Mode (restarts everything) 
  }else if(currentButtonsPressed == 0x02)
  {
      alarmActivated = OFF;
      snoozeFlag = SNOOZEOFF;
      segment_data[2] |= (0xFF);      
     fa6:	88 24       	eor	r8, r8
     fa8:	8a 94       	dec	r8
  static uint8_t displayValueHours;
  static uint8_t displayValueMins;
  
  displayValueHours = (displayValue / 60);
  displayValueMins  = (displayValue - (60 * displayValueHours));
  displayValue      = ((displayValueHours * 100) + displayValueMins);
     faa:	54 e6       	ldi	r21, 0x64	; 100
     fac:	a5 2e       	mov	r10, r21
     fae:	64 ec       	ldi	r22, 0xC4	; 196
     fb0:	b6 2e       	mov	r11, r22
     fb2:	1c c0       	rjmp	.+56     	; 0xfec <main+0x64>
uint16_t ClockCounterCorrection(uint16_t displayValue)
{
  static uint8_t displayValueHours;
  static uint8_t displayValueMins;
  
  displayValueHours = (displayValue / 60);
     fb4:	9e 01       	movw	r18, r28
     fb6:	a9 e8       	ldi	r26, 0x89	; 137
     fb8:	b8 e8       	ldi	r27, 0x88	; 136
     fba:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <__umulhisi3>
     fbe:	96 95       	lsr	r25
     fc0:	87 95       	ror	r24
     fc2:	92 95       	swap	r25
     fc4:	82 95       	swap	r24
     fc6:	8f 70       	andi	r24, 0x0F	; 15
     fc8:	89 27       	eor	r24, r25
     fca:	9f 70       	andi	r25, 0x0F	; 15
     fcc:	89 27       	eor	r24, r25
  displayValueMins  = (displayValue - (60 * displayValueHours));
  displayValue      = ((displayValueHours * 100) + displayValueMins);
     fce:	b8 9e       	mul	r11, r24
     fd0:	c0 0d       	add	r28, r0
     fd2:	11 24       	eor	r1, r1
     fd4:	d0 e0       	ldi	r29, 0x00	; 0
     fd6:	8a 9d       	mul	r24, r10
     fd8:	c0 0d       	add	r28, r0
     fda:	d1 1d       	adc	r29, r1
     fdc:	11 24       	eor	r1, r1
 
  // Turn minute input to HH:MM 
  displayValue = ClockCounterCorrection(displayValue);
  
  // Display to LED screen
  segsum(displayValue);						//Divide the decimal value to the segment_data[] array
     fde:	ce 01       	movw	r24, r28
     fe0:	0e 94 91 00 	call	0x122	; 0x122 <segsum>
  currentDisplayDigit = displaySwitch(currentDisplayDigit);	//Display the current values stored in segment_data[] to current LED 
     fe4:	80 2f       	mov	r24, r16
     fe6:	0e 94 40 01 	call	0x280	; 0x280 <displaySwitch>
     fea:	08 2f       	mov	r16, r24
uint8_t  alarmOffset = 0;
while(1){
  
  // Button Functionality
  // Pole Buttons
  currentButtonsPressed = ButtonCheck(currentButtonsPressed);
     fec:	81 2f       	mov	r24, r17
     fee:	0e 94 81 01 	call	0x302	; 0x302 <ButtonCheck>
     ff2:	18 2f       	mov	r17, r24
  
  // Buttons (1):
  // Enter Setting mode (sets time or alarm)
  if(currentButtonsPressed == 0x01)
     ff4:	81 30       	cpi	r24, 0x01	; 1
     ff6:	09 f4       	brne	.+2      	; 0xffa <main+0x72>
     ff8:	7f c0       	rjmp	.+254    	; 0x10f8 <main+0x170>
  {
      alarmValue     = AlarmSetMode(alarmOffset);
      displayValue = alarmValue;   
  // Buttons (2):
  // Restart Mode (restarts everything) 
  }else if(currentButtonsPressed == 0x02)
     ffa:	82 30       	cpi	r24, 0x02	; 2
     ffc:	09 f4       	brne	.+2      	; 0x1000 <main+0x78>
     ffe:	5f c0       	rjmp	.+190    	; 0x10be <main+0x136>
      alarmON = OFF;
      clear_display();
  
  // Buttons (1, 2):
  // Sets Alarm 
  }else if(currentButtonsPressed == 0x03)
    1000:	83 30       	cpi	r24, 0x03	; 3
    1002:	f9 f0       	breq	.+62     	; 0x1042 <main+0xba>
      segment_data[2] &= 0xFB;      
      currentButtonsPressed = (0x00);
  
  // Buttons (3):
  // SNOOZE if Alarm is Set/On    
  }else if(currentButtonsPressed == 0x04)
    1004:	84 30       	cpi	r24, 0x04	; 4
    1006:	09 f4       	brne	.+2      	; 0x100a <main+0x82>
    1008:	51 c0       	rjmp	.+162    	; 0x10ac <main+0x124>
      }
      currentButtonsPressed = (0x00);
  
  // Buttons (1, 3):
  // Set Time
  }else if(currentButtonsPressed == 0x05)
    100a:	85 30       	cpi	r24, 0x05	; 5
    100c:	09 f4       	brne	.+2      	; 0x1010 <main+0x88>
    100e:	7a c0       	rjmp	.+244    	; 0x1104 <__stack+0x5>
    currentTime = AlarmSetMode(alarmOffset);
    currentButtonsPressed = (0x00);
  
  // Display CurrentTime
  
  }else if(currentButtonsPressed == 0x08)
    1010:	88 30       	cpi	r24, 0x08	; 8
    1012:	29 f0       	breq	.+10     	; 0x101e <main+0x96>
  {
    //alarmOffset ^= 0x01;
    //currentButtonsPressed = (0x00);
  }else{
    displayValue = currentTime;
    1014:	c0 91 2e 01 	lds	r28, 0x012E	; 0x80012e <__data_end>
    1018:	d0 91 2f 01 	lds	r29, 0x012F	; 0x80012f <__data_end+0x1>
    currentButtonsPressed = (0x00);    
    101c:	10 e0       	ldi	r17, 0x00	; 0
  }

  // Brightness of LED based off Photoresistor
  OCR2  = 350 + (2 * (ADCH - 350));	   
    101e:	85 b1       	in	r24, 0x05	; 5
    1020:	88 0f       	add	r24, r24
    1022:	8e 55       	subi	r24, 0x5E	; 94
    1024:	83 bd       	out	0x23, r24	; 35

  // Turn ON alarm if SNOOZE timedout
  if(snoozeFlag == SNOOZEALARM)
    1026:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <snoozeFlag>
    102a:	82 30       	cpi	r24, 0x02	; 2
    102c:	b1 f0       	breq	.+44     	; 0x105a <main+0xd2>
    alarmActivated = ON;
  }

  // Alarm is reached and activated, either by timer or by snooze reached
  // Play alarm
  if(alarmActivated && ((currentTime == alarmValue) || (snoozeFlag == SNOOZEALARM)) && (snoozeFlag != SNOOZEON))
    102e:	c1 10       	cpse	r12, r1
    1030:	14 c0       	rjmp	.+40     	; 0x105a <main+0xd2>
    OCR3C   = VolumeSetMode();
    alarmON = ON;
  }
  
  // Display 'ALARM' on LCD
  if(alarmON && alarmSET)
    1032:	dd 20       	and	r13, r13
    1034:	09 f4       	brne	.+2      	; 0x1038 <main+0xb0>
    1036:	be cf       	rjmp	.-132    	; 0xfb4 <main+0x2c>
    1038:	91 10       	cpse	r9, r1
    103a:	2e c0       	rjmp	.+92     	; 0x1098 <main+0x110>
    103c:	dd 24       	eor	r13, r13
    103e:	d3 94       	inc	r13
    1040:	b9 cf       	rjmp	.-142    	; 0xfb4 <main+0x2c>
  // Buttons (1, 2):
  // Sets Alarm 
  }else if(currentButtonsPressed == 0x03)
  {
      alarmActivated = ON;
      segment_data[2] &= 0xFB;      
    1042:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <segment_data+0x2>
    1046:	8b 7f       	andi	r24, 0xFB	; 251
    1048:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <segment_data+0x2>
    displayValue = currentTime;
    currentButtonsPressed = (0x00);    
  }

  // Brightness of LED based off Photoresistor
  OCR2  = 350 + (2 * (ADCH - 350));	   
    104c:	85 b1       	in	r24, 0x05	; 5
    104e:	88 0f       	add	r24, r24
    1050:	8e 55       	subi	r24, 0x5E	; 94
    1052:	83 bd       	out	0x23, r24	; 35

  // Turn ON alarm if SNOOZE timedout
  if(snoozeFlag == SNOOZEALARM)
    1054:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <snoozeFlag>
    1058:	10 e0       	ldi	r17, 0x00	; 0
    alarmActivated = ON;
  }

  // Alarm is reached and activated, either by timer or by snooze reached
  // Play alarm
  if(alarmActivated && ((currentTime == alarmValue) || (snoozeFlag == SNOOZEALARM)) && (snoozeFlag != SNOOZEON))
    105a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
    105e:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
    1062:	8e 15       	cp	r24, r14
    1064:	9f 05       	cpc	r25, r15
    1066:	39 f0       	breq	.+14     	; 0x1076 <main+0xee>
    1068:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <snoozeFlag>
    106c:	82 30       	cpi	r24, 0x02	; 2
    106e:	19 f0       	breq	.+6      	; 0x1076 <main+0xee>
    1070:	cc 24       	eor	r12, r12
    1072:	c3 94       	inc	r12
    1074:	de cf       	rjmp	.-68     	; 0x1032 <main+0xaa>
    1076:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <snoozeFlag>
    107a:	81 30       	cpi	r24, 0x01	; 1
    107c:	c9 f3       	breq	.-14     	; 0x1070 <main+0xe8>
  {
    TCCR1B |= (1 << WGM12) | (1<<CS11) | (1<<CS10); 		//CTC mode clear at TOP immediate
    107e:	8e b5       	in	r24, 0x2e	; 46
    1080:	8b 60       	ori	r24, 0x0B	; 11
    1082:	8e bd       	out	0x2e, r24	; 46
    OCR3C   = VolumeSetMode();
    1084:	0e 94 a5 02 	call	0x54a	; 0x54a <VolumeSetMode>
    1088:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    108c:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    1090:	cc 24       	eor	r12, r12
    1092:	c3 94       	inc	r12
    alarmON = ON;
  }
  
  // Display 'ALARM' on LCD
  if(alarmON && alarmSET)
    1094:	99 20       	and	r9, r9
    1096:	91 f2       	breq	.-92     	; 0x103c <main+0xb4>
  {
    clear_display();
    1098:	0e 94 a4 04 	call	0x948	; 0x948 <clear_display>
    string2lcd("ALARM");
    109c:	88 e2       	ldi	r24, 0x28	; 40
    109e:	91 e0       	ldi	r25, 0x01	; 1
    10a0:	0e 94 24 05 	call	0xa48	; 0xa48 <string2lcd>
    10a4:	dd 24       	eor	r13, r13
    10a6:	d3 94       	inc	r13
    alarmSET = OFF; 
    10a8:	91 2c       	mov	r9, r1
    10aa:	84 cf       	rjmp	.-248    	; 0xfb4 <main+0x2c>
  
  // Buttons (3):
  // SNOOZE if Alarm is Set/On    
  }else if(currentButtonsPressed == 0x04)
  {
      if(alarmActivated)
    10ac:	cc 20       	and	r12, r12
    10ae:	c1 f0       	breq	.+48     	; 0x10e0 <main+0x158>
      {
        TCCR1B &= (0 << CS11);
    10b0:	8e b5       	in	r24, 0x2e	; 46
    10b2:	1e bc       	out	0x2e, r1	; 46
        TCCR1B &= (0 << CS12);
    10b4:	8e b5       	in	r24, 0x2e	; 46
    10b6:	1e bc       	out	0x2e, r1	; 46
        snoozeFlag = SNOOZEON;	
    10b8:	70 92 30 01 	sts	0x0130, r7	; 0x800130 <snoozeFlag>
    10bc:	c7 cf       	rjmp	.-114    	; 0x104c <main+0xc4>
  // Buttons (2):
  // Restart Mode (restarts everything) 
  }else if(currentButtonsPressed == 0x02)
  {
      alarmActivated = OFF;
      snoozeFlag = SNOOZEOFF;
    10be:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <snoozeFlag>
      segment_data[2] |= (0xFF);      
    10c2:	80 92 25 01 	sts	0x0125, r8	; 0x800125 <segment_data+0x2>
      currentButtonsPressed = (0x00);
      OCR3C = 0;
    10c6:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    10ca:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
      currentDisplayDigit = 0;       
      displayValue = 0;	        
      alarmValue = 1;	        
      alarmActivated = OFF;
      alarmON = OFF;
      clear_display();
    10ce:	0e 94 a4 04 	call	0x948	; 0x948 <clear_display>
      currentButtonsPressed = 0;	
      currentDisplayDigit = 0;       
      displayValue = 0;	        
      alarmValue = 1;	        
      alarmActivated = OFF;
      alarmON = OFF;
    10d2:	d1 2c       	mov	r13, r1
      currentButtonsPressed = (0x00);
      OCR3C = 0;
      currentButtonsPressed = 0;	
      currentDisplayDigit = 0;       
      displayValue = 0;	        
      alarmValue = 1;	        
    10d4:	ee 24       	eor	r14, r14
    10d6:	e3 94       	inc	r14
    10d8:	f1 2c       	mov	r15, r1
      segment_data[2] |= (0xFF);      
      currentButtonsPressed = (0x00);
      OCR3C = 0;
      currentButtonsPressed = 0;	
      currentDisplayDigit = 0;       
      displayValue = 0;	        
    10da:	c0 e0       	ldi	r28, 0x00	; 0
    10dc:	d0 e0       	ldi	r29, 0x00	; 0
      snoozeFlag = SNOOZEOFF;
      segment_data[2] |= (0xFF);      
      currentButtonsPressed = (0x00);
      OCR3C = 0;
      currentButtonsPressed = 0;	
      currentDisplayDigit = 0;       
    10de:	00 e0       	ldi	r16, 0x00	; 0
    displayValue = currentTime;
    currentButtonsPressed = (0x00);    
  }

  // Brightness of LED based off Photoresistor
  OCR2  = 350 + (2 * (ADCH - 350));	   
    10e0:	85 b1       	in	r24, 0x05	; 5
    10e2:	88 0f       	add	r24, r24
    10e4:	8e 55       	subi	r24, 0x5E	; 94
    10e6:	83 bd       	out	0x23, r24	; 35

  // Turn ON alarm if SNOOZE timedout
  if(snoozeFlag == SNOOZEALARM)
    10e8:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <snoozeFlag>
    10ec:	10 e0       	ldi	r17, 0x00	; 0
    10ee:	82 30       	cpi	r24, 0x02	; 2
    10f0:	09 f4       	brne	.+2      	; 0x10f4 <main+0x16c>
    10f2:	b3 cf       	rjmp	.-154    	; 0x105a <main+0xd2>
    10f4:	c1 2c       	mov	r12, r1
    10f6:	9d cf       	rjmp	.-198    	; 0x1032 <main+0xaa>
  
  // Buttons (1):
  // Enter Setting mode (sets time or alarm)
  if(currentButtonsPressed == 0x01)
  {
      alarmValue     = AlarmSetMode(alarmOffset);
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	0e 94 53 02 	call	0x4a6	; 0x4a6 <AlarmSetMode>
    10fe:	ec 01       	movw	r28, r24
    1100:	7c 01       	movw	r14, r24
    1102:	8d cf       	rjmp	.-230    	; 0x101e <main+0x96>
  
  // Buttons (1, 3):
  // Set Time
  }else if(currentButtonsPressed == 0x05)
  {
    currentTime = AlarmSetMode(alarmOffset);
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	0e 94 53 02 	call	0x4a6	; 0x4a6 <AlarmSetMode>
    110a:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
    110e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
    currentButtonsPressed = (0x00);
    1112:	10 e0       	ldi	r17, 0x00	; 0
    1114:	84 cf       	rjmp	.-248    	; 0x101e <main+0x96>

00001116 <__udivmodhi4>:
    1116:	aa 1b       	sub	r26, r26
    1118:	bb 1b       	sub	r27, r27
    111a:	51 e1       	ldi	r21, 0x11	; 17
    111c:	07 c0       	rjmp	.+14     	; 0x112c <__udivmodhi4_ep>

0000111e <__udivmodhi4_loop>:
    111e:	aa 1f       	adc	r26, r26
    1120:	bb 1f       	adc	r27, r27
    1122:	a6 17       	cp	r26, r22
    1124:	b7 07       	cpc	r27, r23
    1126:	10 f0       	brcs	.+4      	; 0x112c <__udivmodhi4_ep>
    1128:	a6 1b       	sub	r26, r22
    112a:	b7 0b       	sbc	r27, r23

0000112c <__udivmodhi4_ep>:
    112c:	88 1f       	adc	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	5a 95       	dec	r21
    1132:	a9 f7       	brne	.-22     	; 0x111e <__udivmodhi4_loop>
    1134:	80 95       	com	r24
    1136:	90 95       	com	r25
    1138:	bc 01       	movw	r22, r24
    113a:	cd 01       	movw	r24, r26
    113c:	08 95       	ret

0000113e <__divmodhi4>:
    113e:	97 fb       	bst	r25, 7
    1140:	07 2e       	mov	r0, r23
    1142:	16 f4       	brtc	.+4      	; 0x1148 <__divmodhi4+0xa>
    1144:	00 94       	com	r0
    1146:	07 d0       	rcall	.+14     	; 0x1156 <__divmodhi4_neg1>
    1148:	77 fd       	sbrc	r23, 7
    114a:	09 d0       	rcall	.+18     	; 0x115e <__divmodhi4_neg2>
    114c:	0e 94 8b 08 	call	0x1116	; 0x1116 <__udivmodhi4>
    1150:	07 fc       	sbrc	r0, 7
    1152:	05 d0       	rcall	.+10     	; 0x115e <__divmodhi4_neg2>
    1154:	3e f4       	brtc	.+14     	; 0x1164 <__divmodhi4_exit>

00001156 <__divmodhi4_neg1>:
    1156:	90 95       	com	r25
    1158:	81 95       	neg	r24
    115a:	9f 4f       	sbci	r25, 0xFF	; 255
    115c:	08 95       	ret

0000115e <__divmodhi4_neg2>:
    115e:	70 95       	com	r23
    1160:	61 95       	neg	r22
    1162:	7f 4f       	sbci	r23, 0xFF	; 255

00001164 <__divmodhi4_exit>:
    1164:	08 95       	ret

00001166 <__divmodsi4>:
    1166:	05 2e       	mov	r0, r21
    1168:	97 fb       	bst	r25, 7
    116a:	1e f4       	brtc	.+6      	; 0x1172 <__divmodsi4+0xc>
    116c:	00 94       	com	r0
    116e:	0e 94 ca 08 	call	0x1194	; 0x1194 <__negsi2>
    1172:	57 fd       	sbrc	r21, 7
    1174:	07 d0       	rcall	.+14     	; 0x1184 <__divmodsi4_neg2>
    1176:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__udivmodsi4>
    117a:	07 fc       	sbrc	r0, 7
    117c:	03 d0       	rcall	.+6      	; 0x1184 <__divmodsi4_neg2>
    117e:	4e f4       	brtc	.+18     	; 0x1192 <__divmodsi4_exit>
    1180:	0c 94 ca 08 	jmp	0x1194	; 0x1194 <__negsi2>

00001184 <__divmodsi4_neg2>:
    1184:	50 95       	com	r21
    1186:	40 95       	com	r20
    1188:	30 95       	com	r19
    118a:	21 95       	neg	r18
    118c:	3f 4f       	sbci	r19, 0xFF	; 255
    118e:	4f 4f       	sbci	r20, 0xFF	; 255
    1190:	5f 4f       	sbci	r21, 0xFF	; 255

00001192 <__divmodsi4_exit>:
    1192:	08 95       	ret

00001194 <__negsi2>:
    1194:	90 95       	com	r25
    1196:	80 95       	com	r24
    1198:	70 95       	com	r23
    119a:	61 95       	neg	r22
    119c:	7f 4f       	sbci	r23, 0xFF	; 255
    119e:	8f 4f       	sbci	r24, 0xFF	; 255
    11a0:	9f 4f       	sbci	r25, 0xFF	; 255
    11a2:	08 95       	ret

000011a4 <__umulhisi3>:
    11a4:	a2 9f       	mul	r26, r18
    11a6:	b0 01       	movw	r22, r0
    11a8:	b3 9f       	mul	r27, r19
    11aa:	c0 01       	movw	r24, r0
    11ac:	a3 9f       	mul	r26, r19
    11ae:	70 0d       	add	r23, r0
    11b0:	81 1d       	adc	r24, r1
    11b2:	11 24       	eor	r1, r1
    11b4:	91 1d       	adc	r25, r1
    11b6:	b2 9f       	mul	r27, r18
    11b8:	70 0d       	add	r23, r0
    11ba:	81 1d       	adc	r24, r1
    11bc:	11 24       	eor	r1, r1
    11be:	91 1d       	adc	r25, r1
    11c0:	08 95       	ret

000011c2 <__udivmodsi4>:
    11c2:	a1 e2       	ldi	r26, 0x21	; 33
    11c4:	1a 2e       	mov	r1, r26
    11c6:	aa 1b       	sub	r26, r26
    11c8:	bb 1b       	sub	r27, r27
    11ca:	fd 01       	movw	r30, r26
    11cc:	0d c0       	rjmp	.+26     	; 0x11e8 <__udivmodsi4_ep>

000011ce <__udivmodsi4_loop>:
    11ce:	aa 1f       	adc	r26, r26
    11d0:	bb 1f       	adc	r27, r27
    11d2:	ee 1f       	adc	r30, r30
    11d4:	ff 1f       	adc	r31, r31
    11d6:	a2 17       	cp	r26, r18
    11d8:	b3 07       	cpc	r27, r19
    11da:	e4 07       	cpc	r30, r20
    11dc:	f5 07       	cpc	r31, r21
    11de:	20 f0       	brcs	.+8      	; 0x11e8 <__udivmodsi4_ep>
    11e0:	a2 1b       	sub	r26, r18
    11e2:	b3 0b       	sbc	r27, r19
    11e4:	e4 0b       	sbc	r30, r20
    11e6:	f5 0b       	sbc	r31, r21

000011e8 <__udivmodsi4_ep>:
    11e8:	66 1f       	adc	r22, r22
    11ea:	77 1f       	adc	r23, r23
    11ec:	88 1f       	adc	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	1a 94       	dec	r1
    11f2:	69 f7       	brne	.-38     	; 0x11ce <__udivmodsi4_loop>
    11f4:	60 95       	com	r22
    11f6:	70 95       	com	r23
    11f8:	80 95       	com	r24
    11fa:	90 95       	com	r25
    11fc:	9b 01       	movw	r18, r22
    11fe:	ac 01       	movw	r20, r24
    1200:	bd 01       	movw	r22, r26
    1202:	cf 01       	movw	r24, r30
    1204:	08 95       	ret

00001206 <_exit>:
    1206:	f8 94       	cli

00001208 <__stop_program>:
    1208:	ff cf       	rjmp	.-2      	; 0x1208 <__stop_program>
