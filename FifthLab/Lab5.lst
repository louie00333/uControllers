
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007c  00800100  00002410  000024a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002410  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ad  0080017c  0080017c  00002520  2**0
                  ALLOC
  3 .stab         000053a0  00000000  00000000  00002520  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a00  00000000  00000000  000078c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000092c0  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000092d4  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00009310  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00009a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000a1a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  0000a1c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 25 01 	jmp	0x24a	; 0x24a <__ctors_end>
       4:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
       8:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
       c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      10:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      14:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      18:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      1c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      20:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      24:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      28:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      2c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      30:	0c 94 c6 08 	jmp	0x118c	; 0x118c <__vector_12>
      34:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      38:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      3c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      40:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <__vector_16>
      44:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      48:	0c 94 96 08 	jmp	0x112c	; 0x112c <__vector_18>
      4c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      50:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      54:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      58:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      5c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      60:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      64:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      68:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      6c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      70:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      74:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      78:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      7c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      80:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      84:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__vector_33>
      88:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      8c:	7a 01       	movw	r14, r20
      8e:	84 01       	movw	r16, r8
      90:	8e 01       	movw	r16, r28
      92:	98 01       	movw	r18, r16
      94:	a3 01       	movw	r20, r6
      96:	ae 01       	movw	r20, r28
      98:	b9 01       	movw	r22, r18
      9a:	66 01       	movw	r12, r12
      9c:	70 01       	movw	r14, r0
      9e:	0f 03       	fmul	r16, r23
      a0:	07 03       	mulsu	r16, r23
      a2:	02 03       	mulsu	r16, r18
      a4:	2c 03       	fmul	r18, r20
      a6:	1f 03       	fmul	r17, r23
      a8:	27 03       	mulsu	r18, r23
      aa:	17 03       	mulsu	r17, r23
      ac:	e0 02       	muls	r30, r16
      ae:	d8 02       	muls	r29, r24
      b0:	d3 02       	muls	r29, r19
      b2:	cb 02       	muls	r28, r27
      b4:	34 03       	mulsu	r19, r20
      b6:	e8 02       	muls	r30, r24
      b8:	be 02       	muls	r27, r30
      ba:	a6 02       	muls	r26, r22
      bc:	54 03       	mulsu	r21, r20
      be:	fd 02       	muls	r31, r29
      c0:	f5 02       	muls	r31, r21
      c2:	ed 02       	muls	r30, r29
      c4:	74 03       	mulsu	r23, r20
      c6:	ae 02       	muls	r26, r30
      c8:	64 03       	mulsu	r22, r20
      ca:	b6 02       	muls	r27, r22
      cc:	81 03       	fmuls	r16, r17
      ce:	4c 03       	fmul	r20, r20
      d0:	6c 03       	fmul	r22, r20
      d2:	c6 02       	muls	r28, r22
      d4:	44 03       	mulsu	r20, r20
      d6:	3c 03       	fmul	r19, r20
      d8:	5c 03       	fmul	r21, r20
      da:	a1 02       	muls	r26, r17
      dc:	6f 02       	muls	r22, r31
      de:	67 02       	muls	r22, r23
      e0:	77 02       	muls	r23, r23
      e2:	79 03       	fmul	r23, r17
      e4:	5a 02       	muls	r21, r26
      e6:	52 02       	muls	r21, r18
      e8:	7c 02       	muls	r23, r28
      ea:	35 02       	muls	r19, r21
      ec:	99 02       	muls	r25, r25
      ee:	62 02       	muls	r22, r18
      f0:	45 02       	muls	r20, r21
      f2:	3d 02       	muls	r19, r29
      f4:	89 02       	muls	r24, r25
      f6:	4d 02       	muls	r20, r29
      f8:	81 02       	muls	r24, r17
      fa:	2d 02       	muls	r18, r29
      fc:	13 02       	muls	r17, r19
      fe:	91 02       	muls	r25, r17
     100:	03 02       	muls	r16, r19
     102:	fb 01       	movw	r30, r22
     104:	20 02       	muls	r18, r16
     106:	18 02       	muls	r17, r24
     108:	25 02       	muls	r18, r21
     10a:	f6 01       	movw	r30, r12
     10c:	0b 02       	muls	r16, r27
     10e:	de 01       	movw	r26, r28
     110:	ee 01       	movw	r28, r28
     112:	d9 01       	movw	r26, r18
     114:	d1 01       	movw	r26, r2
     116:	c9 01       	movw	r24, r18
     118:	c4 01       	movw	r24, r8
     11a:	e6 01       	movw	r28, r12
     11c:	e5 04       	cpc	r14, r5
     11e:	35 05       	cpc	r19, r5
     120:	d5 04       	cpc	r13, r5
     122:	05 05       	cpc	r16, r5
     124:	b5 04       	cpc	r11, r5
     126:	c5 04       	cpc	r12, r5
     128:	b5 04       	cpc	r11, r5
     12a:	c5 04       	cpc	r12, r5
     12c:	45 05       	cpc	r20, r5
     12e:	e5 04       	cpc	r14, r5
     130:	35 05       	cpc	r19, r5
     132:	d5 04       	cpc	r13, r5
     134:	05 05       	cpc	r16, r5
     136:	f5 04       	cpc	r15, r5
     138:	a5 04       	cpc	r10, r5
     13a:	f5 04       	cpc	r15, r5
     13c:	a5 04       	cpc	r10, r5
     13e:	8d 05       	cpc	r24, r13
     140:	19 06       	cpc	r1, r25
     142:	81 05       	cpc	r24, r1
     144:	99 06       	cpc	r9, r25
     146:	81 05       	cpc	r24, r1
     148:	f9 05       	cpc	r31, r9
     14a:	e9 05       	cpc	r30, r9
     14c:	a5 04       	cpc	r10, r5
     14e:	9d 05       	cpc	r25, r13
     150:	a5 04       	cpc	r10, r5
     152:	cd 05       	cpc	r28, r13
     154:	15 05       	cpc	r17, r5
     156:	69 06       	cpc	r6, r25
     158:	b5 04       	cpc	r11, r5
     15a:	49 06       	cpc	r4, r25
     15c:	55 05       	cpc	r21, r5
     15e:	59 06       	cpc	r5, r25
     160:	65 05       	cpc	r22, r5
     162:	79 06       	cpc	r7, r25
     164:	d9 05       	cpc	r29, r9
     166:	25 05       	cpc	r18, r5
     168:	15 05       	cpc	r17, r5
     16a:	ad 05       	cpc	r26, r13
     16c:	75 05       	cpc	r23, r5
     16e:	e5 04       	cpc	r14, r5
     170:	35 05       	cpc	r19, r5
     172:	d5 04       	cpc	r13, r5
     174:	05 05       	cpc	r16, r5
     176:	b5 04       	cpc	r11, r5
     178:	c5 04       	cpc	r12, r5
     17a:	b5 04       	cpc	r11, r5
     17c:	c5 04       	cpc	r12, r5
     17e:	45 05       	cpc	r20, r5
     180:	e5 04       	cpc	r14, r5
     182:	09 06       	cpc	r0, r25
     184:	25 05       	cpc	r18, r5
     186:	d5 04       	cpc	r13, r5
     188:	f5 04       	cpc	r15, r5
     18a:	a5 04       	cpc	r10, r5
     18c:	f5 04       	cpc	r15, r5
     18e:	a5 04       	cpc	r10, r5
     190:	8d 05       	cpc	r24, r13
     192:	29 06       	cpc	r2, r25
     194:	bd 05       	cpc	r27, r13
     196:	45 05       	cpc	r20, r5
     198:	39 06       	cpc	r3, r25
     19a:	9d 05       	cpc	r25, r13
     19c:	55 05       	cpc	r21, r5
     19e:	65 05       	cpc	r22, r5
     1a0:	15 05       	cpc	r17, r5
     1a2:	25 05       	cpc	r18, r5
     1a4:	89 06       	cpc	r8, r25
     1a6:	75 05       	cpc	r23, r5
     1a8:	29 0f       	add	r18, r25
     1aa:	00 0f       	add	r16, r16
     1ac:	00 0f       	add	r16, r16
     1ae:	00 0f       	add	r16, r16
     1b0:	00 0f       	add	r16, r16
     1b2:	00 0f       	add	r16, r16
     1b4:	00 0f       	add	r16, r16
     1b6:	00 0f       	add	r16, r16
     1b8:	29 0f       	add	r18, r25
     1ba:	00 0f       	add	r16, r16
     1bc:	00 0f       	add	r16, r16
     1be:	00 0f       	add	r16, r16
     1c0:	00 0f       	add	r16, r16
     1c2:	00 0f       	add	r16, r16
     1c4:	00 0f       	add	r16, r16
     1c6:	00 0f       	add	r16, r16
     1c8:	33 0f       	add	r19, r19
     1ca:	00 0f       	add	r16, r16
     1cc:	00 0f       	add	r16, r16
     1ce:	00 0f       	add	r16, r16
     1d0:	00 0f       	add	r16, r16
     1d2:	00 0f       	add	r16, r16
     1d4:	00 0f       	add	r16, r16
     1d6:	00 0f       	add	r16, r16
     1d8:	00 0f       	add	r16, r16
     1da:	00 0f       	add	r16, r16
     1dc:	00 0f       	add	r16, r16
     1de:	00 0f       	add	r16, r16
     1e0:	00 0f       	add	r16, r16
     1e2:	00 0f       	add	r16, r16
     1e4:	00 0f       	add	r16, r16
     1e6:	00 0f       	add	r16, r16
     1e8:	33 0f       	add	r19, r19
     1ea:	00 0f       	add	r16, r16
     1ec:	00 0f       	add	r16, r16
     1ee:	00 0f       	add	r16, r16
     1f0:	00 0f       	add	r16, r16
     1f2:	00 0f       	add	r16, r16
     1f4:	00 0f       	add	r16, r16
     1f6:	00 0f       	add	r16, r16
     1f8:	00 0f       	add	r16, r16
     1fa:	00 0f       	add	r16, r16
     1fc:	00 0f       	add	r16, r16
     1fe:	00 0f       	add	r16, r16
     200:	00 0f       	add	r16, r16
     202:	00 0f       	add	r16, r16
     204:	00 0f       	add	r16, r16
     206:	00 0f       	add	r16, r16
     208:	4a 0f       	add	r20, r26
     20a:	00 0f       	add	r16, r16
     20c:	00 0f       	add	r16, r16
     20e:	00 0f       	add	r16, r16
     210:	00 0f       	add	r16, r16
     212:	00 0f       	add	r16, r16
     214:	00 0f       	add	r16, r16
     216:	00 0f       	add	r16, r16
     218:	4e 0f       	add	r20, r30
     21a:	00 0f       	add	r16, r16
     21c:	00 0f       	add	r16, r16
     21e:	00 0f       	add	r16, r16
     220:	00 0f       	add	r16, r16
     222:	00 0f       	add	r16, r16
     224:	00 0f       	add	r16, r16
     226:	00 0f       	add	r16, r16
     228:	00 0f       	add	r16, r16
     22a:	00 0f       	add	r16, r16
     22c:	00 0f       	add	r16, r16
     22e:	00 0f       	add	r16, r16
     230:	00 0f       	add	r16, r16
     232:	00 0f       	add	r16, r16
     234:	00 0f       	add	r16, r16
     236:	00 0f       	add	r16, r16
     238:	5c 0f       	add	r21, r28
     23a:	00 0f       	add	r16, r16
     23c:	00 0f       	add	r16, r16
     23e:	00 0f       	add	r16, r16
     240:	00 0f       	add	r16, r16
     242:	00 0f       	add	r16, r16
     244:	00 0f       	add	r16, r16
     246:	00 0f       	add	r16, r16
     248:	1a 0f       	add	r17, r26

0000024a <__ctors_end>:
     24a:	11 24       	eor	r1, r1
     24c:	1f be       	out	0x3f, r1	; 63
     24e:	cf ef       	ldi	r28, 0xFF	; 255
     250:	d0 e1       	ldi	r29, 0x10	; 16
     252:	de bf       	out	0x3e, r29	; 62
     254:	cd bf       	out	0x3d, r28	; 61

00000256 <__do_copy_data>:
     256:	11 e0       	ldi	r17, 0x01	; 1
     258:	a0 e0       	ldi	r26, 0x00	; 0
     25a:	b1 e0       	ldi	r27, 0x01	; 1
     25c:	e0 e1       	ldi	r30, 0x10	; 16
     25e:	f4 e2       	ldi	r31, 0x24	; 36
     260:	00 e0       	ldi	r16, 0x00	; 0
     262:	0b bf       	out	0x3b, r16	; 59
     264:	02 c0       	rjmp	.+4      	; 0x26a <__do_copy_data+0x14>
     266:	07 90       	elpm	r0, Z+
     268:	0d 92       	st	X+, r0
     26a:	ac 37       	cpi	r26, 0x7C	; 124
     26c:	b1 07       	cpc	r27, r17
     26e:	d9 f7       	brne	.-10     	; 0x266 <__do_copy_data+0x10>

00000270 <__do_clear_bss>:
     270:	22 e0       	ldi	r18, 0x02	; 2
     272:	ac e7       	ldi	r26, 0x7C	; 124
     274:	b1 e0       	ldi	r27, 0x01	; 1
     276:	01 c0       	rjmp	.+2      	; 0x27a <.do_clear_bss_start>

00000278 <.do_clear_bss_loop>:
     278:	1d 92       	st	X+, r1

0000027a <.do_clear_bss_start>:
     27a:	a9 32       	cpi	r26, 0x29	; 41
     27c:	b2 07       	cpc	r27, r18
     27e:	e1 f7       	brne	.-8      	; 0x278 <.do_clear_bss_loop>
     280:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <main>
     284:	0c 94 06 12 	jmp	0x240c	; 0x240c <_exit>

00000288 <__bad_interrupt>:
     288:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028c <play_note>:
#define B8 0x0005

volatile uint16_t beat;
volatile uint16_t max_beat;
volatile uint8_t  notes;
void play_note(char note, uint8_t flat, uint8_t octave, uint8_t duration) {
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     290:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     292:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     296:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	30 93 9c 01 	sts	0x019C, r19	; 0x80019c <max_beat+0x1>
     2a0:	20 93 9b 01 	sts	0x019B, r18	; 0x80019b <max_beat>
  switch (octave) {
     2a4:	04 2f       	mov	r16, r20
     2a6:	10 e0       	ldi	r17, 0x00	; 0
     2a8:	09 30       	cpi	r16, 0x09	; 9
     2aa:	11 05       	cpc	r17, r1
     2ac:	28 f0       	brcs	.+10     	; 0x2b8 <play_note+0x2c>
      case 'G': if(flat){OCR1A=Gb8;}
        else {OCR1A=G8;}
	break;
      } 
      break;
    default: OCR1A=0x0000;
     2ae:	1b bc       	out	0x2b, r1	; 43
     2b0:	1a bc       	out	0x2a, r1	; 42
  }
}
     2b2:	1f 91       	pop	r17
     2b4:	0f 91       	pop	r16
     2b6:	08 95       	ret
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
     2b8:	f8 01       	movw	r30, r16
     2ba:	ea 5b       	subi	r30, 0xBA	; 186
     2bc:	ff 4f       	sbci	r31, 0xFF	; 255
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
     2be:	08 2e       	mov	r0, r24
     2c0:	00 0c       	add	r0, r0
     2c2:	99 0b       	sbc	r25, r25
     2c4:	aa 0b       	sbc	r26, r26
     2c6:	bb 0b       	sbc	r27, r27
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
     2c8:	0c 94 97 11 	jmp	0x232e	; 0x232e <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb6;}
        else {OCR1A=G6;}
	break;
      } 
      break;
    case 7: switch (note) {
     2cc:	fc 01       	movw	r30, r24
     2ce:	e1 54       	subi	r30, 0x41	; 65
     2d0:	f1 09       	sbc	r31, r1
     2d2:	e7 30       	cpi	r30, 0x07	; 7
     2d4:	f1 05       	cpc	r31, r1
     2d6:	68 f7       	brcc	.-38     	; 0x2b2 <play_note+0x26>
     2d8:	e1 5b       	subi	r30, 0xB1	; 177
     2da:	ff 4f       	sbci	r31, 0xFF	; 255
     2dc:	0c 94 97 11 	jmp	0x232e	; 0x232e <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
     2e0:	fc 01       	movw	r30, r24
     2e2:	e1 54       	subi	r30, 0x41	; 65
     2e4:	f1 09       	sbc	r31, r1
     2e6:	e7 30       	cpi	r30, 0x07	; 7
     2e8:	f1 05       	cpc	r31, r1
     2ea:	18 f7       	brcc	.-58     	; 0x2b2 <play_note+0x26>
     2ec:	ea 5a       	subi	r30, 0xAA	; 170
     2ee:	ff 4f       	sbci	r31, 0xFF	; 255
     2f0:	0c 94 97 11 	jmp	0x232e	; 0x232e <__tablejump2__>
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
     2f4:	fc 01       	movw	r30, r24
     2f6:	e1 54       	subi	r30, 0x41	; 65
     2f8:	f1 09       	sbc	r31, r1
     2fa:	e7 30       	cpi	r30, 0x07	; 7
     2fc:	f1 05       	cpc	r31, r1
     2fe:	c8 f6       	brcc	.-78     	; 0x2b2 <play_note+0x26>
     300:	e3 5a       	subi	r30, 0xA3	; 163
     302:	ff 4f       	sbci	r31, 0xFF	; 255
     304:	0c 94 97 11 	jmp	0x232e	; 0x232e <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb0;}
        else {OCR1A=G0;}
	break;
      } 
      break;
    case 1: switch (note) {
     308:	fc 01       	movw	r30, r24
     30a:	e1 54       	subi	r30, 0x41	; 65
     30c:	f1 09       	sbc	r31, r1
     30e:	e7 30       	cpi	r30, 0x07	; 7
     310:	f1 05       	cpc	r31, r1
     312:	78 f6       	brcc	.-98     	; 0x2b2 <play_note+0x26>
     314:	ec 59       	subi	r30, 0x9C	; 156
     316:	ff 4f       	sbci	r31, 0xFF	; 255
     318:	0c 94 97 11 	jmp	0x232e	; 0x232e <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb1;}
        else {OCR1A=G1;}
	break;
      } 
      break;
    case 2: switch (note) {
     31c:	fc 01       	movw	r30, r24
     31e:	e1 54       	subi	r30, 0x41	; 65
     320:	f1 09       	sbc	r31, r1
     322:	e7 30       	cpi	r30, 0x07	; 7
     324:	f1 05       	cpc	r31, r1
     326:	28 f6       	brcc	.-118    	; 0x2b2 <play_note+0x26>
     328:	e5 59       	subi	r30, 0x95	; 149
     32a:	ff 4f       	sbci	r31, 0xFF	; 255
     32c:	0c 94 97 11 	jmp	0x232e	; 0x232e <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb2;}
        else {OCR1A=G2;}
	break;
      } 
      break;
    case 3: switch (note) {
     330:	fc 01       	movw	r30, r24
     332:	e1 54       	subi	r30, 0x41	; 65
     334:	f1 09       	sbc	r31, r1
     336:	e7 30       	cpi	r30, 0x07	; 7
     338:	f1 05       	cpc	r31, r1
     33a:	08 f0       	brcs	.+2      	; 0x33e <play_note+0xb2>
     33c:	ba cf       	rjmp	.-140    	; 0x2b2 <play_note+0x26>
     33e:	ee 58       	subi	r30, 0x8E	; 142
     340:	ff 4f       	sbci	r31, 0xFF	; 255
     342:	0c 94 97 11 	jmp	0x232e	; 0x232e <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb3;}
        else {OCR1A=G3;}
	break;
      } 
      break;
    case 4: switch (note) {
     346:	fc 01       	movw	r30, r24
     348:	e1 54       	subi	r30, 0x41	; 65
     34a:	f1 09       	sbc	r31, r1
     34c:	e7 30       	cpi	r30, 0x07	; 7
     34e:	f1 05       	cpc	r31, r1
     350:	08 f0       	brcs	.+2      	; 0x354 <play_note+0xc8>
     352:	af cf       	rjmp	.-162    	; 0x2b2 <play_note+0x26>
     354:	e7 58       	subi	r30, 0x87	; 135
     356:	ff 4f       	sbci	r31, 0xFF	; 255
     358:	0c 94 97 11 	jmp	0x232e	; 0x232e <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
	break;
      } 
      break;
    case 5: switch (note) {
     35c:	fc 01       	movw	r30, r24
     35e:	e1 54       	subi	r30, 0x41	; 65
     360:	f1 09       	sbc	r31, r1
     362:	e7 30       	cpi	r30, 0x07	; 7
     364:	f1 05       	cpc	r31, r1
     366:	08 f0       	brcs	.+2      	; 0x36a <play_note+0xde>
     368:	a4 cf       	rjmp	.-184    	; 0x2b2 <play_note+0x26>
     36a:	e0 58       	subi	r30, 0x80	; 128
     36c:	ff 4f       	sbci	r31, 0xFF	; 255
     36e:	0c 94 97 11 	jmp	0x232e	; 0x232e <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb5;}
        else {OCR1A=G5;}
	break;
      } 
      break;
    case 6: switch (note) {
     372:	fc 01       	movw	r30, r24
     374:	e1 54       	subi	r30, 0x41	; 65
     376:	f1 09       	sbc	r31, r1
     378:	e7 30       	cpi	r30, 0x07	; 7
     37a:	f1 05       	cpc	r31, r1
     37c:	08 f0       	brcs	.+2      	; 0x380 <play_note+0xf4>
     37e:	99 cf       	rjmp	.-206    	; 0x2b2 <play_note+0x26>
     380:	e9 57       	subi	r30, 0x79	; 121
     382:	ff 4f       	sbci	r31, 0xFF	; 255
     384:	0c 94 97 11 	jmp	0x232e	; 0x232e <__tablejump2__>
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
     388:	88 e5       	ldi	r24, 0x58	; 88
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	9b bd       	out	0x2b, r25	; 43
     38e:	8a bd       	out	0x2a, r24	; 42
	break;
     390:	90 cf       	rjmp	.-224    	; 0x2b2 <play_note+0x26>
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
     392:	66 23       	and	r22, r22
     394:	09 f4       	brne	.+2      	; 0x398 <play_note+0x10c>
     396:	0f c2       	rjmp	.+1054   	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
     398:	83 e6       	ldi	r24, 0x63	; 99
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	9b bd       	out	0x2b, r25	; 43
     39e:	8a bd       	out	0x2a, r24	; 42
     3a0:	88 cf       	rjmp	.-240    	; 0x2b2 <play_note+0x26>
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
     3a2:	66 23       	and	r22, r22
     3a4:	09 f4       	brne	.+2      	; 0x3a8 <play_note+0x11c>
     3a6:	11 c2       	rjmp	.+1058   	; 0x7ca <__LOCK_REGION_LENGTH__+0x3ca>
     3a8:	8f e6       	ldi	r24, 0x6F	; 111
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	9b bd       	out	0x2b, r25	; 43
     3ae:	8a bd       	out	0x2a, r24	; 42
     3b0:	80 cf       	rjmp	.-256    	; 0x2b2 <play_note+0x26>
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
     3b2:	86 e7       	ldi	r24, 0x76	; 118
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	9b bd       	out	0x2b, r25	; 43
     3b8:	8a bd       	out	0x2a, r24	; 42
	break;
     3ba:	7b cf       	rjmp	.-266    	; 0x2b2 <play_note+0x26>
        else {OCR1A=G5;}
	break;
      } 
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
     3bc:	66 23       	and	r22, r22
     3be:	09 f4       	brne	.+2      	; 0x3c2 <play_note+0x136>
     3c0:	ff c1       	rjmp	.+1022   	; 0x7c0 <__LOCK_REGION_LENGTH__+0x3c0>
     3c2:	8a e4       	ldi	r24, 0x4A	; 74
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	9b bd       	out	0x2b, r25	; 43
     3c8:	8a bd       	out	0x2a, r24	; 42
     3ca:	73 cf       	rjmp	.-282    	; 0x2b2 <play_note+0x26>
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
	break;
      case 'G': if(flat){OCR1A=Gb6;}
     3cc:	66 23       	and	r22, r22
     3ce:	09 f4       	brne	.+2      	; 0x3d2 <play_note+0x146>
     3d0:	01 c2       	rjmp	.+1026   	; 0x7d4 <__LOCK_REGION_LENGTH__+0x3d4>
     3d2:	83 e5       	ldi	r24, 0x53	; 83
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	9b bd       	out	0x2b, r25	; 43
     3d8:	8a bd       	out	0x2a, r24	; 42
     3da:	6b cf       	rjmp	.-298    	; 0x2b2 <play_note+0x26>
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
     3dc:	66 23       	and	r22, r22
     3de:	09 f4       	brne	.+2      	; 0x3e2 <play_note+0x156>
     3e0:	b8 c1       	rjmp	.+880    	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
     3e2:	82 e4       	ldi	r24, 0x42	; 66
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	9b bd       	out	0x2b, r25	; 43
     3e8:	8a bd       	out	0x2a, r24	; 42
     3ea:	63 cf       	rjmp	.-314    	; 0x2b2 <play_note+0x26>
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
     3ec:	81 eb       	ldi	r24, 0xB1	; 177
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	9b bd       	out	0x2b, r25	; 43
     3f2:	8a bd       	out	0x2a, r24	; 42
	break;
     3f4:	5e cf       	rjmp	.-324    	; 0x2b2 <play_note+0x26>
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
     3f6:	66 23       	and	r22, r22
     3f8:	09 f4       	brne	.+2      	; 0x3fc <play_note+0x170>
     3fa:	d3 c1       	rjmp	.+934    	; 0x7a2 <__LOCK_REGION_LENGTH__+0x3a2>
     3fc:	85 e8       	ldi	r24, 0x85	; 133
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	9b bd       	out	0x2b, r25	; 43
     402:	8a bd       	out	0x2a, r24	; 42
     404:	56 cf       	rjmp	.-340    	; 0x2b2 <play_note+0x26>
        else {OCR1A=G4;}
	break;
      } 
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
     406:	66 23       	and	r22, r22
     408:	09 f4       	brne	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     40a:	c1 c1       	rjmp	.+898    	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
     40c:	85 e9       	ldi	r24, 0x95	; 149
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	9b bd       	out	0x2b, r25	; 43
     412:	8a bd       	out	0x2a, r24	; 42
     414:	4e cf       	rjmp	.-356    	; 0x2b2 <play_note+0x26>
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
	break;
      case 'G': if(flat){OCR1A=Gb5;}
     416:	66 23       	and	r22, r22
     418:	09 f4       	brne	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     41a:	be c1       	rjmp	.+892    	; 0x798 <__LOCK_REGION_LENGTH__+0x398>
     41c:	87 ea       	ldi	r24, 0xA7	; 167
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	9b bd       	out	0x2b, r25	; 43
     422:	8a bd       	out	0x2a, r24	; 42
     424:	46 cf       	rjmp	.-372    	; 0x2b2 <play_note+0x26>
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
     426:	84 e6       	ldi	r24, 0x64	; 100
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	9b bd       	out	0x2b, r25	; 43
     42c:	8a bd       	out	0x2a, r24	; 42
	break;
     42e:	41 cf       	rjmp	.-382    	; 0x2b2 <play_note+0x26>
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
     430:	66 23       	and	r22, r22
     432:	09 f4       	brne	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     434:	bb c1       	rjmp	.+886    	; 0x7ac <__LOCK_REGION_LENGTH__+0x3ac>
     436:	80 ee       	ldi	r24, 0xE0	; 224
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	9b bd       	out	0x2b, r25	; 43
     43c:	8a bd       	out	0x2a, r24	; 42
     43e:	39 cf       	rjmp	.-398    	; 0x2b2 <play_note+0x26>
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
     440:	8d ee       	ldi	r24, 0xED	; 237
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	9b bd       	out	0x2b, r25	; 43
     446:	8a bd       	out	0x2a, r24	; 42
	break;
     448:	34 cf       	rjmp	.-408    	; 0x2b2 <play_note+0x26>
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
     44a:	66 23       	and	r22, r22
     44c:	09 f4       	brne	.+2      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44e:	8b c1       	rjmp	.+790    	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
     450:	87 ec       	ldi	r24, 0xC7	; 199
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	9b bd       	out	0x2b, r25	; 43
     456:	8a bd       	out	0x2a, r24	; 42
     458:	2c cf       	rjmp	.-424    	; 0x2b2 <play_note+0x26>
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
     45a:	66 23       	and	r22, r22
     45c:	09 f4       	brne	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     45e:	74 c1       	rjmp	.+744    	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
     460:	80 e9       	ldi	r24, 0x90	; 144
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	9b bd       	out	0x2b, r25	; 43
     466:	8a bd       	out	0x2a, r24	; 42
     468:	24 cf       	rjmp	.-440    	; 0x2b2 <play_note+0x26>
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
     46a:	66 23       	and	r22, r22
     46c:	09 f4       	brne	.+2      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     46e:	cb c1       	rjmp	.+918    	; 0x806 <__LOCK_REGION_LENGTH__+0x406>
     470:	84 e8       	ldi	r24, 0x84	; 132
     472:	93 e0       	ldi	r25, 0x03	; 3
     474:	9b bd       	out	0x2b, r25	; 43
     476:	8a bd       	out	0x2a, r24	; 42
     478:	1c cf       	rjmp	.-456    	; 0x2b2 <play_note+0x26>
        else {OCR1A=G3;}
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
     47a:	66 23       	and	r22, r22
     47c:	09 f4       	brne	.+2      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     47e:	af c1       	rjmp	.+862    	; 0x7de <__LOCK_REGION_LENGTH__+0x3de>
     480:	8b e2       	ldi	r24, 0x2B	; 43
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	9b bd       	out	0x2b, r25	; 43
     486:	8a bd       	out	0x2a, r24	; 42
     488:	14 cf       	rjmp	.-472    	; 0x2b2 <play_note+0x26>
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
	break;
      case 'G': if(flat){OCR1A=Gb3;}
     48a:	66 23       	and	r22, r22
     48c:	09 f4       	brne	.+2      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     48e:	b1 c1       	rjmp	.+866    	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
     490:	82 ea       	ldi	r24, 0xA2	; 162
     492:	92 e0       	ldi	r25, 0x02	; 2
     494:	9b bd       	out	0x2b, r25	; 43
     496:	8a bd       	out	0x2a, r24	; 42
     498:	0c cf       	rjmp	.-488    	; 0x2b2 <play_note+0x26>
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
     49a:	8c ed       	ldi	r24, 0xDC	; 220
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	9b bd       	out	0x2b, r25	; 43
     4a0:	8a bd       	out	0x2a, r24	; 42
	break;
     4a2:	07 cf       	rjmp	.-498    	; 0x2b2 <play_note+0x26>
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
     4a4:	66 23       	and	r22, r22
     4a6:	09 f4       	brne	.+2      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     4a8:	59 c1       	rjmp	.+690    	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
     4aa:	87 e1       	ldi	r24, 0x17	; 23
     4ac:	92 e0       	ldi	r25, 0x02	; 2
     4ae:	9b bd       	out	0x2b, r25	; 43
     4b0:	8a bd       	out	0x2a, r24	; 42
     4b2:	ff ce       	rjmp	.-514    	; 0x2b2 <play_note+0x26>
        else {OCR1A=G2;}
	break;
      } 
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
     4b4:	66 23       	and	r22, r22
     4b6:	09 f4       	brne	.+2      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4b8:	b0 c1       	rjmp	.+864    	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
     4ba:	88 e5       	ldi	r24, 0x58	; 88
     4bc:	92 e0       	ldi	r25, 0x02	; 2
     4be:	9b bd       	out	0x2b, r25	; 43
     4c0:	8a bd       	out	0x2a, r24	; 42
     4c2:	f7 ce       	rjmp	.-530    	; 0x2b2 <play_note+0x26>
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
     4c4:	8a ec       	ldi	r24, 0xCA	; 202
     4c6:	92 e0       	ldi	r25, 0x02	; 2
     4c8:	9b bd       	out	0x2b, r25	; 43
     4ca:	8a bd       	out	0x2a, r24	; 42
	break;
     4cc:	f2 ce       	rjmp	.-540    	; 0x2b2 <play_note+0x26>
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
     4ce:	66 23       	and	r22, r22
     4d0:	09 f4       	brne	.+2      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     4d2:	35 c1       	rjmp	.+618    	; 0x73e <__LOCK_REGION_LENGTH__+0x33e>
     4d4:	86 e4       	ldi	r24, 0x46	; 70
     4d6:	96 e0       	ldi	r25, 0x06	; 6
     4d8:	9b bd       	out	0x2b, r25	; 43
     4da:	8a bd       	out	0x2a, r24	; 42
     4dc:	ea ce       	rjmp	.-556    	; 0x2b2 <play_note+0x26>
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
     4de:	66 23       	and	r22, r22
     4e0:	09 f4       	brne	.+2      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4e2:	82 c1       	rjmp	.+772    	; 0x7e8 <__LOCK_REGION_LENGTH__+0x3e8>
     4e4:	8a e0       	ldi	r24, 0x0A	; 10
     4e6:	97 e0       	ldi	r25, 0x07	; 7
     4e8:	9b bd       	out	0x2b, r25	; 43
     4ea:	8a bd       	out	0x2a, r24	; 42
     4ec:	e2 ce       	rjmp	.-572    	; 0x2b2 <play_note+0x26>
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
     4ee:	86 e9       	ldi	r24, 0x96	; 150
     4f0:	95 e0       	ldi	r25, 0x05	; 5
     4f2:	9b bd       	out	0x2b, r25	; 43
     4f4:	8a bd       	out	0x2a, r24	; 42
	break;
     4f6:	dd ce       	rjmp	.-582    	; 0x2b2 <play_note+0x26>
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
     4f8:	8a eb       	ldi	r24, 0xBA	; 186
     4fa:	93 e0       	ldi	r25, 0x03	; 3
     4fc:	9b bd       	out	0x2b, r25	; 43
     4fe:	8a bd       	out	0x2a, r24	; 42
	break;
     500:	d8 ce       	rjmp	.-592    	; 0x2b2 <play_note+0x26>
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
     502:	66 23       	and	r22, r22
     504:	09 f4       	brne	.+2      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     506:	7a c1       	rjmp	.+756    	; 0x7fc <__LOCK_REGION_LENGTH__+0x3fc>
     508:	81 ec       	ldi	r24, 0xC1	; 193
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	9b bd       	out	0x2b, r25	; 43
     50e:	8a bd       	out	0x2a, r24	; 42
     510:	d0 ce       	rjmp	.-608    	; 0x2b2 <play_note+0x26>
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
     512:	66 23       	and	r22, r22
     514:	09 f4       	brne	.+2      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
     516:	7c c1       	rjmp	.+760    	; 0x810 <__LOCK_REGION_LENGTH__+0x410>
     518:	8b e0       	ldi	r24, 0x0B	; 11
     51a:	91 e0       	ldi	r25, 0x01	; 1
     51c:	9b bd       	out	0x2b, r25	; 43
     51e:	8a bd       	out	0x2a, r24	; 42
     520:	c8 ce       	rjmp	.-624    	; 0x2b2 <play_note+0x26>
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
     522:	66 23       	and	r22, r22
     524:	09 f4       	brne	.+2      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
     526:	7e c1       	rjmp	.+764    	; 0x824 <__LOCK_REGION_LENGTH__+0x424>
     528:	80 e5       	ldi	r24, 0x50	; 80
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	9b bd       	out	0x2b, r25	; 43
     52e:	8a bd       	out	0x2a, r24	; 42
     530:	c0 ce       	rjmp	.-640    	; 0x2b2 <play_note+0x26>
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
     532:	66 23       	and	r22, r22
     534:	09 f4       	brne	.+2      	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
     536:	ad c1       	rjmp	.+858    	; 0x892 <__LOCK_REGION_LENGTH__+0x492>
     538:	82 e2       	ldi	r24, 0x22	; 34
     53a:	93 e0       	ldi	r25, 0x03	; 3
     53c:	9b bd       	out	0x2b, r25	; 43
     53e:	8a bd       	out	0x2a, r24	; 42
     540:	b8 ce       	rjmp	.-656    	; 0x2b2 <play_note+0x26>
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
     542:	86 e7       	ldi	r24, 0x76	; 118
     544:	97 e0       	ldi	r25, 0x07	; 7
     546:	9b bd       	out	0x2b, r25	; 43
     548:	8a bd       	out	0x2a, r24	; 42
	break;
     54a:	b3 ce       	rjmp	.-666    	; 0x2b2 <play_note+0x26>
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
     54c:	66 23       	and	r22, r22
     54e:	09 f4       	brne	.+2      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
     550:	0f c1       	rjmp	.+542    	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
     552:	8e ec       	ldi	r24, 0xCE	; 206
     554:	92 e1       	ldi	r25, 0x12	; 18
     556:	9b bd       	out	0x2b, r25	; 43
     558:	8a bd       	out	0x2a, r24	; 42
     55a:	ab ce       	rjmp	.-682    	; 0x2b2 <play_note+0x26>
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
	break;
      case 'G': if(flat){OCR1A=Gb0;}
     55c:	66 23       	and	r22, r22
     55e:	09 f4       	brne	.+2      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
     560:	7a c1       	rjmp	.+756    	; 0x856 <__LOCK_REGION_LENGTH__+0x456>
     562:	8d e1       	ldi	r24, 0x1D	; 29
     564:	95 e1       	ldi	r25, 0x15	; 21
     566:	9b bd       	out	0x2b, r25	; 43
     568:	8a bd       	out	0x2a, r24	; 42
     56a:	a3 ce       	rjmp	.-698    	; 0x2b2 <play_note+0x26>
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
     56c:	66 23       	and	r22, r22
     56e:	09 f4       	brne	.+2      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
     570:	dc c0       	rjmp	.+440    	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
     572:	80 e6       	ldi	r24, 0x60	; 96
     574:	98 e0       	ldi	r25, 0x08	; 8
     576:	9b bd       	out	0x2b, r25	; 43
     578:	8a bd       	out	0x2a, r24	; 42
     57a:	9b ce       	rjmp	.-714    	; 0x2b2 <play_note+0x26>
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
	break;
      case 'G': if(flat){OCR1A=Gb8;}
     57c:	66 23       	and	r22, r22
     57e:	09 f4       	brne	.+2      	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
     580:	92 c1       	rjmp	.+804    	; 0x8a6 <__LOCK_REGION_LENGTH__+0x4a6>
     582:	80 e1       	ldi	r24, 0x10	; 16
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	9b bd       	out	0x2b, r25	; 43
     588:	8a bd       	out	0x2a, r24	; 42
     58a:	93 ce       	rjmp	.-730    	; 0x2b2 <play_note+0x26>
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
     58c:	8e e2       	ldi	r24, 0x2E	; 46
     58e:	9b e0       	ldi	r25, 0x0B	; 11
     590:	9b bd       	out	0x2b, r25	; 43
     592:	8a bd       	out	0x2a, r24	; 42
	break;
     594:	8e ce       	rjmp	.-740    	; 0x2b2 <play_note+0x26>
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
     596:	66 23       	and	r22, r22
     598:	09 f4       	brne	.+2      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
     59a:	49 c1       	rjmp	.+658    	; 0x82e <__LOCK_REGION_LENGTH__+0x42e>
     59c:	8b e1       	ldi	r24, 0x1B	; 27
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	9b bd       	out	0x2b, r25	; 43
     5a2:	8a bd       	out	0x2a, r24	; 42
     5a4:	86 ce       	rjmp	.-756    	; 0x2b2 <play_note+0x26>
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
     5a6:	8c e1       	ldi	r24, 0x1C	; 28
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	9b bd       	out	0x2b, r25	; 43
     5ac:	8a bd       	out	0x2a, r24	; 42
	break;
     5ae:	81 ce       	rjmp	.-766    	; 0x2b2 <play_note+0x26>
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
     5b0:	66 23       	and	r22, r22
     5b2:	09 f4       	brne	.+2      	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
     5b4:	41 c1       	rjmp	.+642    	; 0x838 <__LOCK_REGION_LENGTH__+0x438>
     5b6:	87 e0       	ldi	r24, 0x07	; 7
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	9b bd       	out	0x2b, r25	; 43
     5bc:	8a bd       	out	0x2a, r24	; 42
     5be:	79 ce       	rjmp	.-782    	; 0x2b2 <play_note+0x26>
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
     5c0:	66 23       	and	r22, r22
     5c2:	09 f4       	brne	.+2      	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
     5c4:	da c0       	rjmp	.+436    	; 0x77a <__LOCK_REGION_LENGTH__+0x37a>
     5c6:	8b e0       	ldi	r24, 0x0B	; 11
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	9b bd       	out	0x2b, r25	; 43
     5cc:	8a bd       	out	0x2a, r24	; 42
     5ce:	71 ce       	rjmp	.-798    	; 0x2b2 <play_note+0x26>
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
     5d0:	82 e1       	ldi	r24, 0x12	; 18
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	9b bd       	out	0x2b, r25	; 43
     5d6:	8a bd       	out	0x2a, r24	; 42
	break;
     5d8:	6c ce       	rjmp	.-808    	; 0x2b2 <play_note+0x26>
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
     5da:	66 23       	and	r22, r22
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     5de:	9b c0       	rjmp	.+310    	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
     5e0:	89 e1       	ldi	r24, 0x19	; 25
     5e2:	99 e1       	ldi	r25, 0x19	; 25
     5e4:	9b bd       	out	0x2b, r25	; 43
     5e6:	8a bd       	out	0x2a, r24	; 42
     5e8:	64 ce       	rjmp	.-824    	; 0x2b2 <play_note+0x26>
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
     5ea:	66 23       	and	r22, r22
     5ec:	09 f4       	brne	.+2      	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
     5ee:	29 c1       	rjmp	.+594    	; 0x842 <__LOCK_REGION_LENGTH__+0x442>
     5f0:	80 e3       	ldi	r24, 0x30	; 48
     5f2:	9c e1       	ldi	r25, 0x1C	; 28
     5f4:	9b bd       	out	0x2b, r25	; 43
     5f6:	8a bd       	out	0x2a, r24	; 42
     5f8:	5c ce       	rjmp	.-840    	; 0x2b2 <play_note+0x26>
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
     5fa:	8c ed       	ldi	r24, 0xDC	; 220
     5fc:	9d e1       	ldi	r25, 0x1D	; 29
     5fe:	9b bd       	out	0x2b, r25	; 43
     600:	8a bd       	out	0x2a, r24	; 42
	break;
     602:	57 ce       	rjmp	.-850    	; 0x2b2 <play_note+0x26>
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
     604:	8a e3       	ldi	r24, 0x3A	; 58
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	9b bd       	out	0x2b, r25	; 43
     60a:	8a bd       	out	0x2a, r24	; 42
	break;
     60c:	52 ce       	rjmp	.-860    	; 0x2b2 <play_note+0x26>
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
     60e:	66 23       	and	r22, r22
     610:	09 f4       	brne	.+2      	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
     612:	35 c1       	rjmp	.+618    	; 0x87e <__LOCK_REGION_LENGTH__+0x47e>
     614:	80 e2       	ldi	r24, 0x20	; 32
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	9b bd       	out	0x2b, r25	; 43
     61a:	8a bd       	out	0x2a, r24	; 42
     61c:	4a ce       	rjmp	.-876    	; 0x2b2 <play_note+0x26>
        else {OCR1A=G6;}
	break;
      } 
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
     61e:	66 23       	and	r22, r22
     620:	09 f4       	brne	.+2      	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
     622:	32 c1       	rjmp	.+612    	; 0x888 <__LOCK_REGION_LENGTH__+0x488>
     624:	84 e2       	ldi	r24, 0x24	; 36
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	9b bd       	out	0x2b, r25	; 43
     62a:	8a bd       	out	0x2a, r24	; 42
     62c:	42 ce       	rjmp	.-892    	; 0x2b2 <play_note+0x26>
      case 'E': if(flat){OCR1A=Eb7;}
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
	break;
      case 'G': if(flat){OCR1A=Gb7;}
     62e:	66 23       	and	r22, r22
     630:	09 f4       	brne	.+2      	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
     632:	76 c0       	rjmp	.+236    	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
     634:	89 e2       	ldi	r24, 0x29	; 41
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	9b bd       	out	0x2b, r25	; 43
     63a:	8a bd       	out	0x2a, r24	; 42
     63c:	3a ce       	rjmp	.-908    	; 0x2b2 <play_note+0x26>
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
	break;
      case 'E': if(flat){OCR1A=Eb7;}
     63e:	66 23       	and	r22, r22
     640:	09 f4       	brne	.+2      	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
     642:	78 c0       	rjmp	.+240    	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
     644:	81 e3       	ldi	r24, 0x31	; 49
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	9b bd       	out	0x2b, r25	; 43
     64a:	8a bd       	out	0x2a, r24	; 42
     64c:	32 ce       	rjmp	.-924    	; 0x2b2 <play_note+0x26>
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
     64e:	8b e2       	ldi	r24, 0x2B	; 43
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	9b bd       	out	0x2b, r25	; 43
     654:	8a bd       	out	0x2a, r24	; 42
	break;
     656:	2d ce       	rjmp	.-934    	; 0x2b2 <play_note+0x26>
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
     658:	66 23       	and	r22, r22
     65a:	09 f4       	brne	.+2      	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
     65c:	93 c0       	rjmp	.+294    	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
     65e:	87 e3       	ldi	r24, 0x37	; 55
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	9b bd       	out	0x2b, r25	; 43
     664:	8a bd       	out	0x2a, r24	; 42
     666:	25 ce       	rjmp	.-950    	; 0x2b2 <play_note+0x26>
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
     668:	66 23       	and	r22, r22
     66a:	09 f4       	brne	.+2      	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
     66c:	4f c0       	rjmp	.+158    	; 0x70c <__LOCK_REGION_LENGTH__+0x30c>
     66e:	88 e1       	ldi	r24, 0x18	; 24
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	9b bd       	out	0x2b, r25	; 43
     674:	8a bd       	out	0x2a, r24	; 42
     676:	1d ce       	rjmp	.-966    	; 0x2b2 <play_note+0x26>
        else {OCR1A=G1;}
	break;
      } 
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
     678:	66 23       	and	r22, r22
     67a:	09 f4       	brne	.+2      	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
     67c:	f6 c0       	rjmp	.+492    	; 0x86a <__LOCK_REGION_LENGTH__+0x46a>
     67e:	82 eb       	ldi	r24, 0xB2	; 178
     680:	94 e0       	ldi	r25, 0x04	; 4
     682:	9b bd       	out	0x2b, r25	; 43
     684:	8a bd       	out	0x2a, r24	; 42
     686:	15 ce       	rjmp	.-982    	; 0x2b2 <play_note+0x26>
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
	break;
      case 'G': if(flat){OCR1A=Gb1;}
     688:	66 23       	and	r22, r22
     68a:	09 f4       	brne	.+2      	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
     68c:	16 c1       	rjmp	.+556    	; 0x8ba <__LOCK_REGION_LENGTH__+0x4ba>
     68e:	8d e8       	ldi	r24, 0x8D	; 141
     690:	9a e0       	ldi	r25, 0x0A	; 10
     692:	9b bd       	out	0x2b, r25	; 43
     694:	8a bd       	out	0x2a, r24	; 42
     696:	0d ce       	rjmp	.-998    	; 0x2b2 <play_note+0x26>
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
     698:	66 23       	and	r22, r22
     69a:	09 f4       	brne	.+2      	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
     69c:	d7 c0       	rjmp	.+430    	; 0x84c <__LOCK_REGION_LENGTH__+0x44c>
     69e:	86 e1       	ldi	r24, 0x16	; 22
     6a0:	9e e0       	ldi	r25, 0x0E	; 14
     6a2:	9b bd       	out	0x2b, r25	; 43
     6a4:	8a bd       	out	0x2a, r24	; 42
     6a6:	05 ce       	rjmp	.-1014   	; 0x2b2 <play_note+0x26>
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
     6a8:	66 23       	and	r22, r22
     6aa:	09 f4       	brne	.+2      	; 0x6ae <__LOCK_REGION_LENGTH__+0x2ae>
     6ac:	f7 c0       	rjmp	.+494    	; 0x89c <__LOCK_REGION_LENGTH__+0x49c>
     6ae:	80 ec       	ldi	r24, 0xC0	; 192
     6b0:	90 e1       	ldi	r25, 0x10	; 16
     6b2:	9b bd       	out	0x2b, r25	; 43
     6b4:	8a bd       	out	0x2a, r24	; 42
     6b6:	fd cd       	rjmp	.-1030   	; 0x2b2 <play_note+0x26>
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
     6b8:	66 23       	and	r22, r22
     6ba:	09 f4       	brne	.+2      	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
     6bc:	d1 c0       	rjmp	.+418    	; 0x860 <__LOCK_REGION_LENGTH__+0x460>
     6be:	8f e2       	ldi	r24, 0x2F	; 47
     6c0:	94 e0       	ldi	r25, 0x04	; 4
     6c2:	9b bd       	out	0x2b, r25	; 43
     6c4:	8a bd       	out	0x2a, r24	; 42
     6c6:	f5 cd       	rjmp	.-1046   	; 0x2b2 <play_note+0x26>
        else {OCR1A=G0;}
	break;
      } 
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
     6c8:	66 23       	and	r22, r22
     6ca:	09 f4       	brne	.+2      	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
     6cc:	f1 c0       	rjmp	.+482    	; 0x8b0 <__LOCK_REGION_LENGTH__+0x4b0>
     6ce:	87 e6       	ldi	r24, 0x67	; 103
     6d0:	99 e0       	ldi	r25, 0x09	; 9
     6d2:	9b bd       	out	0x2b, r25	; 43
     6d4:	8a bd       	out	0x2a, r24	; 42
     6d6:	ed cd       	rjmp	.-1062   	; 0x2b2 <play_note+0x26>
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
     6d8:	66 23       	and	r22, r22
     6da:	09 f4       	brne	.+2      	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     6dc:	cb c0       	rjmp	.+406    	; 0x874 <__LOCK_REGION_LENGTH__+0x474>
     6de:	8d e8       	ldi	r24, 0x8D	; 141
     6e0:	9c e0       	ldi	r25, 0x0C	; 12
     6e2:	9b bd       	out	0x2b, r25	; 43
     6e4:	8a bd       	out	0x2a, r24	; 42
     6e6:	e5 cd       	rjmp	.-1078   	; 0x2b2 <play_note+0x26>
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
     6e8:	8d e5       	ldi	r24, 0x5D	; 93
     6ea:	96 e1       	ldi	r25, 0x16	; 22
     6ec:	9b bd       	out	0x2b, r25	; 43
     6ee:	8a bd       	out	0x2a, r24	; 42
	break;
     6f0:	e0 cd       	rjmp	.-1088   	; 0x2b2 <play_note+0x26>
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
	break;
      case 'G': if(flat){OCR1A=Gb2;}
     6f2:	66 23       	and	r22, r22
     6f4:	09 f4       	brne	.+2      	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     6f6:	e6 c0       	rjmp	.+460    	; 0x8c4 <__LOCK_REGION_LENGTH__+0x4c4>
     6f8:	86 e4       	ldi	r24, 0x46	; 70
     6fa:	95 e0       	ldi	r25, 0x05	; 5
     6fc:	9b bd       	out	0x2b, r25	; 43
     6fe:	8a bd       	out	0x2a, r24	; 42
     700:	d8 cd       	rjmp	.-1104   	; 0x2b2 <play_note+0x26>
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
     702:	8d ee       	ldi	r24, 0xED	; 237
     704:	9e e0       	ldi	r25, 0x0E	; 14
     706:	9b bd       	out	0x2b, r25	; 43
     708:	8a bd       	out	0x2a, r24	; 42
	break;
     70a:	d3 cd       	rjmp	.-1114   	; 0x2b2 <play_note+0x26>
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
     70c:	85 e1       	ldi	r24, 0x15	; 21
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	9b bd       	out	0x2b, r25	; 43
     712:	8a bd       	out	0x2a, r24	; 42
     714:	ce cd       	rjmp	.-1124   	; 0x2b2 <play_note+0x26>
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
     716:	82 eb       	ldi	r24, 0xB2	; 178
     718:	97 e1       	ldi	r25, 0x17	; 23
     71a:	9b bd       	out	0x2b, r25	; 43
     71c:	8a bd       	out	0x2a, r24	; 42
     71e:	c9 cd       	rjmp	.-1134   	; 0x2b2 <play_note+0x26>
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
	break;
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
     720:	86 e2       	ldi	r24, 0x26	; 38
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	9b bd       	out	0x2b, r25	; 43
     726:	8a bd       	out	0x2a, r24	; 42
     728:	c4 cd       	rjmp	.-1144   	; 0x2b2 <play_note+0x26>
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
     72a:	87 ee       	ldi	r24, 0xE7	; 231
     72c:	97 e0       	ldi	r25, 0x07	; 7
     72e:	9b bd       	out	0x2b, r25	; 43
     730:	8a bd       	out	0x2a, r24	; 42
     732:	bf cd       	rjmp	.-1154   	; 0x2b2 <play_note+0x26>
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
	break;
      case 'E': if(flat){OCR1A=Eb7;}
        else {OCR1A=E7;}
     734:	8e e2       	ldi	r24, 0x2E	; 46
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	9b bd       	out	0x2b, r25	; 43
     73a:	8a bd       	out	0x2a, r24	; 42
     73c:	ba cd       	rjmp	.-1164   	; 0x2b2 <play_note+0x26>
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
     73e:	8b ee       	ldi	r24, 0xEB	; 235
     740:	95 e0       	ldi	r25, 0x05	; 5
     742:	9b bd       	out	0x2b, r25	; 43
     744:	8a bd       	out	0x2a, r24	; 42
     746:	b5 cd       	rjmp	.-1174   	; 0x2b2 <play_note+0x26>
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
     748:	8a e7       	ldi	r24, 0x7A	; 122
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	9b bd       	out	0x2b, r25	; 43
     74e:	8a bd       	out	0x2a, r24	; 42
     750:	b0 cd       	rjmp	.-1184   	; 0x2b2 <play_note+0x26>
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
     752:	8e e3       	ldi	r24, 0x3E	; 62
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	9b bd       	out	0x2b, r25	; 43
     758:	8a bd       	out	0x2a, r24	; 42
     75a:	ab cd       	rjmp	.-1194   	; 0x2b2 <play_note+0x26>
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
     75c:	89 ef       	ldi	r24, 0xF9	; 249
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	9b bd       	out	0x2b, r25	; 43
     762:	8a bd       	out	0x2a, r24	; 42
     764:	a6 cd       	rjmp	.-1204   	; 0x2b2 <play_note+0x26>
	break;
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
     766:	8c eb       	ldi	r24, 0xBC	; 188
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	9b bd       	out	0x2b, r25	; 43
     76c:	8a bd       	out	0x2a, r24	; 42
     76e:	a1 cd       	rjmp	.-1214   	; 0x2b2 <play_note+0x26>
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
     770:	80 ec       	ldi	r24, 0xC0	; 192
     772:	91 e1       	ldi	r25, 0x11	; 17
     774:	9b bd       	out	0x2b, r25	; 43
     776:	8a bd       	out	0x2a, r24	; 42
     778:	9c cd       	rjmp	.-1224   	; 0x2b2 <play_note+0x26>
	break;
      } 
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
     77a:	89 e0       	ldi	r24, 0x09	; 9
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	9b bd       	out	0x2b, r25	; 43
     780:	8a bd       	out	0x2a, r24	; 42
     782:	97 cd       	rjmp	.-1234   	; 0x2b2 <play_note+0x26>
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
     784:	84 e3       	ldi	r24, 0x34	; 52
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	9b bd       	out	0x2b, r25	; 43
     78a:	8a bd       	out	0x2a, r24	; 42
     78c:	92 cd       	rjmp	.-1244   	; 0x2b2 <play_note+0x26>
	break;
      } 
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
     78e:	8d e8       	ldi	r24, 0x8D	; 141
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	9b bd       	out	0x2b, r25	; 43
     794:	8a bd       	out	0x2a, r24	; 42
     796:	8d cd       	rjmp	.-1254   	; 0x2b2 <play_note+0x26>
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
	break;
      case 'G': if(flat){OCR1A=Gb5;}
        else {OCR1A=G5;}
     798:	8e e9       	ldi	r24, 0x9E	; 158
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	9b bd       	out	0x2b, r25	; 43
     79e:	8a bd       	out	0x2a, r24	; 42
     7a0:	88 cd       	rjmp	.-1264   	; 0x2b2 <play_note+0x26>
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
     7a2:	8d e7       	ldi	r24, 0x7D	; 125
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	9b bd       	out	0x2b, r25	; 43
     7a8:	8a bd       	out	0x2a, r24	; 42
     7aa:	83 cd       	rjmp	.-1274   	; 0x2b2 <play_note+0x26>
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
     7ac:	83 ed       	ldi	r24, 0xD3	; 211
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	9b bd       	out	0x2b, r25	; 43
     7b2:	8a bd       	out	0x2a, r24	; 42
     7b4:	7e cd       	rjmp	.-1284   	; 0x2b2 <play_note+0x26>
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
     7b6:	8d e5       	ldi	r24, 0x5D	; 93
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	9b bd       	out	0x2b, r25	; 43
     7bc:	8a bd       	out	0x2a, r24	; 42
     7be:	79 cd       	rjmp	.-1294   	; 0x2b2 <play_note+0x26>
	break;
      } 
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
     7c0:	86 e4       	ldi	r24, 0x46	; 70
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	9b bd       	out	0x2b, r25	; 43
     7c6:	8a bd       	out	0x2a, r24	; 42
     7c8:	74 cd       	rjmp	.-1304   	; 0x2b2 <play_note+0x26>
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
     7ca:	89 e6       	ldi	r24, 0x69	; 105
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	9b bd       	out	0x2b, r25	; 43
     7d0:	8a bd       	out	0x2a, r24	; 42
     7d2:	6f cd       	rjmp	.-1314   	; 0x2b2 <play_note+0x26>
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
	break;
      case 'G': if(flat){OCR1A=Gb6;}
        else {OCR1A=G6;}
     7d4:	8e e4       	ldi	r24, 0x4E	; 78
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	9b bd       	out	0x2b, r25	; 43
     7da:	8a bd       	out	0x2a, r24	; 42
     7dc:	6a cd       	rjmp	.-1324   	; 0x2b2 <play_note+0x26>
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
     7de:	8b e1       	ldi	r24, 0x1B	; 27
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	9b bd       	out	0x2b, r25	; 43
     7e4:	8a bd       	out	0x2a, r24	; 42
     7e6:	65 cd       	rjmp	.-1334   	; 0x2b2 <play_note+0x26>
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
     7e8:	85 ea       	ldi	r24, 0xA5	; 165
     7ea:	96 e0       	ldi	r25, 0x06	; 6
     7ec:	9b bd       	out	0x2b, r25	; 43
     7ee:	8a bd       	out	0x2a, r24	; 42
     7f0:	60 cd       	rjmp	.-1344   	; 0x2b2 <play_note+0x26>
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
	break;
      case 'G': if(flat){OCR1A=Gb3;}
        else {OCR1A=G3;}
     7f2:	8c e7       	ldi	r24, 0x7C	; 124
     7f4:	92 e0       	ldi	r25, 0x02	; 2
     7f6:	9b bd       	out	0x2b, r25	; 43
     7f8:	8a bd       	out	0x2a, r24	; 42
     7fa:	5b cd       	rjmp	.-1354   	; 0x2b2 <play_note+0x26>
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
     7fc:	88 ea       	ldi	r24, 0xA8	; 168
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	9b bd       	out	0x2b, r25	; 43
     802:	8a bd       	out	0x2a, r24	; 42
     804:	56 cd       	rjmp	.-1364   	; 0x2b2 <play_note+0x26>
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
     806:	82 e5       	ldi	r24, 0x52	; 82
     808:	93 e0       	ldi	r25, 0x03	; 3
     80a:	9b bd       	out	0x2b, r25	; 43
     80c:	8a bd       	out	0x2a, r24	; 42
     80e:	51 cd       	rjmp	.-1374   	; 0x2b2 <play_note+0x26>
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
     810:	8c ef       	ldi	r24, 0xFC	; 252
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	9b bd       	out	0x2b, r25	; 43
     816:	8a bd       	out	0x2a, r24	; 42
     818:	4c cd       	rjmp	.-1384   	; 0x2b2 <play_note+0x26>
	break;
      } 
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
     81a:	87 e3       	ldi	r24, 0x37	; 55
     81c:	92 e0       	ldi	r25, 0x02	; 2
     81e:	9b bd       	out	0x2b, r25	; 43
     820:	8a bd       	out	0x2a, r24	; 42
     822:	47 cd       	rjmp	.-1394   	; 0x2b2 <play_note+0x26>
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
     824:	8d e3       	ldi	r24, 0x3D	; 61
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	9b bd       	out	0x2b, r25	; 43
     82a:	8a bd       	out	0x2a, r24	; 42
     82c:	42 cd       	rjmp	.-1404   	; 0x2b2 <play_note+0x26>
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
     82e:	89 e1       	ldi	r24, 0x19	; 25
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	9b bd       	out	0x2b, r25	; 43
     834:	8a bd       	out	0x2a, r24	; 42
     836:	3d cd       	rjmp	.-1414   	; 0x2b2 <play_note+0x26>
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
     838:	85 e0       	ldi	r24, 0x05	; 5
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	9b bd       	out	0x2b, r25	; 43
     83e:	8a bd       	out	0x2a, r24	; 42
     840:	38 cd       	rjmp	.-1424   	; 0x2b2 <play_note+0x26>
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
     842:	8a e9       	ldi	r24, 0x9A	; 154
     844:	9a e1       	ldi	r25, 0x1A	; 26
     846:	9b bd       	out	0x2b, r25	; 43
     848:	8a bd       	out	0x2a, r24	; 42
     84a:	33 cd       	rjmp	.-1434   	; 0x2b2 <play_note+0x26>
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
     84c:	8c e4       	ldi	r24, 0x4C	; 76
     84e:	9d e0       	ldi	r25, 0x0D	; 13
     850:	9b bd       	out	0x2b, r25	; 43
     852:	8a bd       	out	0x2a, r24	; 42
     854:	2e cd       	rjmp	.-1444   	; 0x2b2 <play_note+0x26>
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
	break;
      case 'G': if(flat){OCR1A=Gb0;}
        else {OCR1A=G0;}
     856:	8d ee       	ldi	r24, 0xED	; 237
     858:	93 e1       	ldi	r25, 0x13	; 19
     85a:	9b bd       	out	0x2b, r25	; 43
     85c:	8a bd       	out	0x2a, r24	; 42
     85e:	29 cd       	rjmp	.-1454   	; 0x2b2 <play_note+0x26>
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
     860:	83 ef       	ldi	r24, 0xF3	; 243
     862:	93 e0       	ldi	r25, 0x03	; 3
     864:	9b bd       	out	0x2b, r25	; 43
     866:	8a bd       	out	0x2a, r24	; 42
     868:	24 cd       	rjmp	.-1464   	; 0x2b2 <play_note+0x26>
	break;
      } 
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
     86a:	8f e6       	ldi	r24, 0x6F	; 111
     86c:	94 e0       	ldi	r25, 0x04	; 4
     86e:	9b bd       	out	0x2b, r25	; 43
     870:	8a bd       	out	0x2a, r24	; 42
     872:	1f cd       	rjmp	.-1474   	; 0x2b2 <play_note+0x26>
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
     874:	88 ed       	ldi	r24, 0xD8	; 216
     876:	9b e0       	ldi	r25, 0x0B	; 11
     878:	9b bd       	out	0x2b, r25	; 43
     87a:	8a bd       	out	0x2a, r24	; 42
     87c:	1a cd       	rjmp	.-1484   	; 0x2b2 <play_note+0x26>
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
     87e:	8e e1       	ldi	r24, 0x1E	; 30
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	9b bd       	out	0x2b, r25	; 43
     884:	8a bd       	out	0x2a, r24	; 42
     886:	15 cd       	rjmp	.-1494   	; 0x2b2 <play_note+0x26>
	break;
      } 
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
     888:	82 e2       	ldi	r24, 0x22	; 34
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	9b bd       	out	0x2b, r25	; 43
     88e:	8a bd       	out	0x2a, r24	; 42
     890:	10 cd       	rjmp	.-1504   	; 0x2b2 <play_note+0x26>
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
     892:	85 ef       	ldi	r24, 0xF5	; 245
     894:	92 e0       	ldi	r25, 0x02	; 2
     896:	9b bd       	out	0x2b, r25	; 43
     898:	8a bd       	out	0x2a, r24	; 42
     89a:	0b cd       	rjmp	.-1514   	; 0x2b2 <play_note+0x26>
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
     89c:	80 ed       	ldi	r24, 0xD0	; 208
     89e:	9f e0       	ldi	r25, 0x0F	; 15
     8a0:	9b bd       	out	0x2b, r25	; 43
     8a2:	8a bd       	out	0x2a, r24	; 42
     8a4:	06 cd       	rjmp	.-1524   	; 0x2b2 <play_note+0x26>
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
	break;
      case 'G': if(flat){OCR1A=Gb8;}
        else {OCR1A=G8;}
     8a6:	8d e0       	ldi	r24, 0x0D	; 13
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	9b bd       	out	0x2b, r25	; 43
     8ac:	8a bd       	out	0x2a, r24	; 42
     8ae:	01 cd       	rjmp	.-1534   	; 0x2b2 <play_note+0x26>
	break;
      } 
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
     8b0:	8f ed       	ldi	r24, 0xDF	; 223
     8b2:	98 e0       	ldi	r25, 0x08	; 8
     8b4:	9b bd       	out	0x2b, r25	; 43
     8b6:	8a bd       	out	0x2a, r24	; 42
     8b8:	fc cc       	rjmp	.-1544   	; 0x2b2 <play_note+0x26>
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
	break;
      case 'G': if(flat){OCR1A=Gb1;}
        else {OCR1A=G1;}
     8ba:	86 ef       	ldi	r24, 0xF6	; 246
     8bc:	99 e0       	ldi	r25, 0x09	; 9
     8be:	9b bd       	out	0x2b, r25	; 43
     8c0:	8a bd       	out	0x2a, r24	; 42
     8c2:	f7 cc       	rjmp	.-1554   	; 0x2b2 <play_note+0x26>
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
	break;
      case 'G': if(flat){OCR1A=Gb2;}
        else {OCR1A=G2;}
     8c4:	8a ef       	ldi	r24, 0xFA	; 250
     8c6:	94 e0       	ldi	r25, 0x04	; 4
     8c8:	9b bd       	out	0x2b, r25	; 43
     8ca:	8a bd       	out	0x2a, r24	; 42
     8cc:	f2 cc       	rjmp	.-1564   	; 0x2b2 <play_note+0x26>

000008ce <play_rest>:
  }
}
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     8ce:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     8d0:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     8d4:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     8de:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
     8e2:	08 95       	ret

000008e4 <music_off>:
}

void music_off(void) {
  //this turns the alarm timer off
  notes=0;
     8e4:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <notes>
  TCCR1B &= ~((1<<CS11)|(1<<CS10));
     8e8:	8e b5       	in	r24, 0x2e	; 46
     8ea:	8c 7f       	andi	r24, 0xFC	; 252
     8ec:	8e bd       	out	0x2e, r24	; 46
  //and mutes the output
  PORTD |= mute;
     8ee:	92 9a       	sbi	0x12, 2	; 18
     8f0:	08 95       	ret

000008f2 <music_init>:
  play_song(song, notes);
}

void music_init(void) {
  //initially turned off (use music_on() to turn on)
  TIMSK |= (1<<OCIE1A);  //enable timer interrupt 1 on compare
     8f2:	87 b7       	in	r24, 0x37	; 55
     8f4:	80 61       	ori	r24, 0x10	; 16
     8f6:	87 bf       	out	0x37, r24	; 55
  TCCR1A = 0x00;         //TCNT1, normal port operation
     8f8:	1f bc       	out	0x2f, r1	; 47
  TCCR1B |= (1<<WGM12);  //CTC, OCR1A = top, clk/64 (250kHz)
     8fa:	8e b5       	in	r24, 0x2e	; 46
     8fc:	88 60       	ori	r24, 0x08	; 8
     8fe:	8e bd       	out	0x2e, r24	; 46
  TCCR1C = 0x00;         //no forced compare
     900:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  OCR1A = 0x0031;        //(use to vary alarm frequency)
     904:	81 e3       	ldi	r24, 0x31	; 49
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	9b bd       	out	0x2b, r25	; 43
     90a:	8a bd       	out	0x2a, r24	; 42
  max_beat = duration;
}

void music_off(void) {
  //this turns the alarm timer off
  notes=0;
     90c:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <notes>
  TCCR1B &= ~((1<<CS11)|(1<<CS10));
     910:	8e b5       	in	r24, 0x2e	; 46
     912:	8c 7f       	andi	r24, 0xFC	; 252
     914:	8e bd       	out	0x2e, r24	; 46
  //and mutes the output
  PORTD |= mute;
     916:	92 9a       	sbi	0x12, 2	; 18
  TCCR1A = 0x00;         //TCNT1, normal port operation
  TCCR1B |= (1<<WGM12);  //CTC, OCR1A = top, clk/64 (250kHz)
  TCCR1C = 0x00;         //no forced compare
  OCR1A = 0x0031;        //(use to vary alarm frequency)
  music_off();
  beat = 0;
     918:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     91c:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = 0;
     920:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <max_beat+0x1>
     924:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <max_beat>
  notes = 0;
     928:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <notes>
  song = 0;              //beaver fight song
     92c:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <song>
     930:	08 95       	ret

00000932 <song0>:
} 
void song0(uint16_t note) { //beaver fight song (Max and Kellen)
  switch (note) {
     932:	86 34       	cpi	r24, 0x46	; 70
     934:	91 05       	cpc	r25, r1
     936:	20 f0       	brcs	.+8      	; 0x940 <song0+0xe>
       break;
    case 68: play_note('F', 0, 4, 24);
       break;
    case 69: play_rest(8);
       break;
    default: notes=-1;
     938:	8f ef       	ldi	r24, 0xFF	; 255
     93a:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <notes>
     93e:	08 95       	ret
  max_beat = 0;
  notes = 0;
  song = 0;              //beaver fight song
} 
void song0(uint16_t note) { //beaver fight song (Max and Kellen)
  switch (note) {
     940:	fc 01       	movw	r30, r24
     942:	e2 57       	subi	r30, 0x72	; 114
     944:	ff 4f       	sbci	r31, 0xFF	; 255
     946:	0c 94 97 11 	jmp	0x232e	; 0x232e <__tablejump2__>
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     94a:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     94c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     950:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     954:	82 e0       	ldi	r24, 0x02	; 2
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     95c:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
     960:	8b e1       	ldi	r24, 0x1B	; 27
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	9b bd       	out	0x2b, r25	; 43
     966:	8a bd       	out	0x2a, r24	; 42
     968:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     96a:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     96c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     970:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     974:	86 e0       	ldi	r24, 0x06	; 6
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     97c:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
     980:	8b e1       	ldi	r24, 0x1B	; 27
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	9b bd       	out	0x2b, r25	; 43
     986:	8a bd       	out	0x2a, r24	; 42
     988:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     98a:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     98c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     990:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     994:	82 e0       	ldi	r24, 0x02	; 2
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     99c:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
        else {OCR1A=G3;}
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
     9a0:	8b e2       	ldi	r24, 0x2B	; 43
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	9b bd       	out	0x2b, r25	; 43
     9a6:	8a bd       	out	0x2a, r24	; 42
     9a8:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     9aa:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     9ac:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     9b0:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     9b4:	88 e0       	ldi	r24, 0x08	; 8
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     9bc:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
     9c0:	88 ea       	ldi	r24, 0xA8	; 168
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	9b bd       	out	0x2b, r25	; 43
     9c6:	8a bd       	out	0x2a, r24	; 42
     9c8:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     9ca:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     9cc:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     9d0:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     9d4:	88 e0       	ldi	r24, 0x08	; 8
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     9dc:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
     9e0:	84 e6       	ldi	r24, 0x64	; 100
     9e2:	91 e0       	ldi	r25, 0x01	; 1
     9e4:	9b bd       	out	0x2b, r25	; 43
     9e6:	8a bd       	out	0x2a, r24	; 42
     9e8:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     9ea:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     9ec:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     9f0:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     9f4:	86 e0       	ldi	r24, 0x06	; 6
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     9fc:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
     a00:	8b e0       	ldi	r24, 0x0B	; 11
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	9b bd       	out	0x2b, r25	; 43
     a06:	8a bd       	out	0x2a, r24	; 42
     a08:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     a0a:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     a0c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     a10:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     a14:	88 e0       	ldi	r24, 0x08	; 8
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     a1c:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
     a20:	8c ed       	ldi	r24, 0xDC	; 220
     a22:	91 e0       	ldi	r25, 0x01	; 1
     a24:	9b bd       	out	0x2b, r25	; 43
     a26:	8a bd       	out	0x2a, r24	; 42
     a28:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     a2a:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     a2c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     a30:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     a34:	88 e0       	ldi	r24, 0x08	; 8
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     a3c:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
     a40:	8b e1       	ldi	r24, 0x1B	; 27
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	9b bd       	out	0x2b, r25	; 43
     a46:	8a bd       	out	0x2a, r24	; 42
     a48:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     a4a:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     a4c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     a50:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     a54:	88 e0       	ldi	r24, 0x08	; 8
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     a5c:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
     a60:	8d e3       	ldi	r24, 0x3D	; 61
     a62:	91 e0       	ldi	r25, 0x01	; 1
     a64:	9b bd       	out	0x2b, r25	; 43
     a66:	8a bd       	out	0x2a, r24	; 42
     a68:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     a6a:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     a6c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     a70:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     a74:	88 e0       	ldi	r24, 0x08	; 8
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     a7c:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
     a80:	8a e7       	ldi	r24, 0x7A	; 122
     a82:	91 e0       	ldi	r25, 0x01	; 1
     a84:	9b bd       	out	0x2b, r25	; 43
     a86:	8a bd       	out	0x2a, r24	; 42
     a88:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     a8a:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     a8c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     a90:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     a94:	80 e1       	ldi	r24, 0x10	; 16
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     a9c:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
     aa0:	8b e1       	ldi	r24, 0x1B	; 27
     aa2:	91 e0       	ldi	r25, 0x01	; 1
     aa4:	9b bd       	out	0x2b, r25	; 43
     aa6:	8a bd       	out	0x2a, r24	; 42
     aa8:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     aaa:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     aac:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     ab0:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     ab4:	84 e0       	ldi	r24, 0x04	; 4
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     abc:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
     ac0:	8d ee       	ldi	r24, 0xED	; 237
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	9b bd       	out	0x2b, r25	; 43
     ac6:	8a bd       	out	0x2a, r24	; 42
     ac8:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     aca:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     acc:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     ad0:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     ad4:	84 e0       	ldi	r24, 0x04	; 4
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     adc:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
     ae0:	83 ed       	ldi	r24, 0xD3	; 211
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	9b bd       	out	0x2b, r25	; 43
     ae6:	8a bd       	out	0x2a, r24	; 42
     ae8:	08 95       	ret
  }
}
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     aea:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     aec:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     af0:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;
     af4:	88 e0       	ldi	r24, 0x08	; 8
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     afc:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
     b00:	08 95       	ret
  }
}
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     b02:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     b04:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     b08:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     b14:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
     b18:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     b1a:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     b1c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     b20:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     b24:	80 e1       	ldi	r24, 0x10	; 16
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     b2c:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
     b30:	8b e0       	ldi	r24, 0x0B	; 11
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	9b bd       	out	0x2b, r25	; 43
     b36:	8a bd       	out	0x2a, r24	; 42
     b38:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     b3a:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     b3c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     b40:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     b44:	88 e0       	ldi	r24, 0x08	; 8
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     b4c:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
     b50:	8b e0       	ldi	r24, 0x0B	; 11
     b52:	91 e0       	ldi	r25, 0x01	; 1
     b54:	9b bd       	out	0x2b, r25	; 43
     b56:	8a bd       	out	0x2a, r24	; 42
     b58:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     b5a:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     b5c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     b60:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     b64:	88 e1       	ldi	r24, 0x18	; 24
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     b6c:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
     b70:	8d e3       	ldi	r24, 0x3D	; 61
     b72:	91 e0       	ldi	r25, 0x01	; 1
     b74:	9b bd       	out	0x2b, r25	; 43
     b76:	8a bd       	out	0x2a, r24	; 42
     b78:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     b7a:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     b7c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     b80:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     b84:	80 e1       	ldi	r24, 0x10	; 16
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     b8c:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
     b90:	83 ed       	ldi	r24, 0xD3	; 211
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	9b bd       	out	0x2b, r25	; 43
     b96:	8a bd       	out	0x2a, r24	; 42
     b98:	08 95       	ret
  }
}
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     b9a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     b9c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     ba0:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     bac:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
     bb0:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     bb2:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     bb4:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     bb8:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     bbc:	84 e0       	ldi	r24, 0x04	; 4
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     bc4:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
     bc8:	8b e1       	ldi	r24, 0x1B	; 27
     bca:	91 e0       	ldi	r25, 0x01	; 1
     bcc:	9b bd       	out	0x2b, r25	; 43
     bce:	8a bd       	out	0x2a, r24	; 42
     bd0:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     bd2:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     bd4:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     bd8:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     bdc:	86 e0       	ldi	r24, 0x06	; 6
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     be4:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
     be8:	8d e3       	ldi	r24, 0x3D	; 61
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	9b bd       	out	0x2b, r25	; 43
     bee:	8a bd       	out	0x2a, r24	; 42
     bf0:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     bf2:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     bf4:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     bf8:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     bfc:	84 e0       	ldi	r24, 0x04	; 4
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     c04:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
     c08:	80 e5       	ldi	r24, 0x50	; 80
     c0a:	91 e0       	ldi	r25, 0x01	; 1
     c0c:	9b bd       	out	0x2b, r25	; 43
     c0e:	8a bd       	out	0x2a, r24	; 42
     c10:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     c12:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     c14:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     c18:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     c1c:	88 e0       	ldi	r24, 0x08	; 8
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     c24:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
     c28:	80 e5       	ldi	r24, 0x50	; 80
     c2a:	91 e0       	ldi	r25, 0x01	; 1
     c2c:	9b bd       	out	0x2b, r25	; 43
     c2e:	8a bd       	out	0x2a, r24	; 42
     c30:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     c32:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     c34:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     c38:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     c3c:	83 e0       	ldi	r24, 0x03	; 3
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     c44:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
     c48:	8d e3       	ldi	r24, 0x3D	; 61
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	9b bd       	out	0x2b, r25	; 43
     c4e:	8a bd       	out	0x2a, r24	; 42
     c50:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     c52:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     c54:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     c58:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     c5c:	80 e1       	ldi	r24, 0x10	; 16
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     c64:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
     c68:	88 ea       	ldi	r24, 0xA8	; 168
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	9b bd       	out	0x2b, r25	; 43
     c6e:	8a bd       	out	0x2a, r24	; 42
     c70:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     c72:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     c74:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     c78:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     c7c:	80 e1       	ldi	r24, 0x10	; 16
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     c84:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
     c88:	8d ee       	ldi	r24, 0xED	; 237
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	9b bd       	out	0x2b, r25	; 43
     c8e:	8a bd       	out	0x2a, r24	; 42
     c90:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     c92:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     c94:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     c98:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     ca4:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
     ca8:	8b e0       	ldi	r24, 0x0B	; 11
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	9b bd       	out	0x2b, r25	; 43
     cae:	8a bd       	out	0x2a, r24	; 42
     cb0:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     cb2:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     cb4:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     cb8:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     cbc:	84 e0       	ldi	r24, 0x04	; 4
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     cc4:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
     cc8:	80 ee       	ldi	r24, 0xE0	; 224
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	9b bd       	out	0x2b, r25	; 43
     cce:	8a bd       	out	0x2a, r24	; 42
     cd0:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     cd2:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     cd4:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     cd8:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     cdc:	84 e0       	ldi	r24, 0x04	; 4
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     ce4:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
        else {OCR1A=G3;}
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
     ce8:	8b e2       	ldi	r24, 0x2B	; 43
     cea:	91 e0       	ldi	r25, 0x01	; 1
     cec:	9b bd       	out	0x2b, r25	; 43
     cee:	8a bd       	out	0x2a, r24	; 42
     cf0:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     cf2:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     cf4:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     cf8:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     cfc:	88 e0       	ldi	r24, 0x08	; 8
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     d04:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
     d08:	8c ef       	ldi	r24, 0xFC	; 252
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	9b bd       	out	0x2b, r25	; 43
     d0e:	8a bd       	out	0x2a, r24	; 42
     d10:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     d12:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     d14:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     d18:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     d1c:	88 e1       	ldi	r24, 0x18	; 24
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     d24:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
     d28:	84 e6       	ldi	r24, 0x64	; 100
     d2a:	91 e0       	ldi	r25, 0x01	; 1
     d2c:	9b bd       	out	0x2b, r25	; 43
     d2e:	8a bd       	out	0x2a, r24	; 42
     d30:	08 95       	ret
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     d32:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     d34:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <beat+0x1>
     d38:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <beat>
  max_beat = duration;  //set the max beat
     d3c:	87 e0       	ldi	r24, 0x07	; 7
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <max_beat+0x1>
     d44:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <max_beat>
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
     d48:	8d e3       	ldi	r24, 0x3D	; 61
     d4a:	91 e0       	ldi	r25, 0x01	; 1
     d4c:	9b bd       	out	0x2b, r25	; 43
     d4e:	8a bd       	out	0x2a, r24	; 42
     d50:	08 95       	ret

00000d52 <play_song>:
  //if you add a song, you'll have to add it to this
  //switch statement.
  switch (song) {
  case 0: song0(note); //beaver fight song
    break;
  default: song0(note); //defaults to beaver fight song
     d52:	86 2f       	mov	r24, r22
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0c 94 99 04 	jmp	0x932	; 0x932 <song0>

00000d5a <music_on>:
  PORTD |= mute;
}

void music_on(void) {
  //this starts the alarm timer running
  notes=0;
     d5a:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <notes>
  TCCR1B |= (1<<CS11)|(1<<CS10);
     d5e:	8e b5       	in	r24, 0x2e	; 46
     d60:	83 60       	ori	r24, 0x03	; 3
     d62:	8e bd       	out	0x2e, r24	; 46
  //unmutes the output
  PORTD &= unmute;
     d64:	92 98       	cbi	0x12, 2	; 18
  //and starts the selected song
  play_song(song, notes);
     d66:	60 91 99 01 	lds	r22, 0x0199	; 0x800199 <notes>
     d6a:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <song>
     d6e:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <play_song>

00000d72 <SPI_read>:
/*********************************************************************/
//              SPI_read(uint8_t currentBarGraph)
// Sends the bar graph data and then reads the SPI port.
/*********************************************************************/
uint16_t SPI_read(uint8_t currentBarGraph){
  PORTB &= 0x7F;
     d72:	c7 98       	cbi	0x18, 7	; 24
  SPDR = currentBarGraph;
     d74:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){} //wait till 8 bits have been sent
     d76:	77 9b       	sbis	0x0e, 7	; 14
     d78:	fe cf       	rjmp	.-4      	; 0xd76 <SPI_read+0x4>
  //PORTD = 0xFF;
  //PORTD = 0x00;
  PORTE = 0x00;
     d7a:	13 b8       	out	0x03, r1	; 3
  PORTE = 0xFF;
     d7c:	8f ef       	ldi	r24, 0xFF	; 255
     d7e:	83 b9       	out	0x03, r24	; 3
  return(SPDR); //return incoming data from SPDR
     d80:	8f b1       	in	r24, 0x0f	; 15
}
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	08 95       	ret

00000d86 <chk_buttons>:
// Adapted to check all buttons from Ganssel's "Guide to Debouncing"            
// Expects active low pushbuttons on PINA port.  Debounce time is determined by 
// external loop delay times 12. 
// Edited to have a state array of size 8 for each button
//******************************************************************************
uint8_t chk_buttons(uint8_t buttons) {
     d86:	48 2f       	mov	r20, r24
  //Gansels debounce with the state as an array that is used to check against the values that buttons is at
  static uint16_t state[8] = {0}; //holds present state
  state[buttons] = (state[buttons] << 1) | (! bit_is_clear(PINA, buttons)) | 0xE000;
     d88:	e8 2f       	mov	r30, r24
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	99 b3       	in	r25, 0x19	; 25
     d8e:	ee 0f       	add	r30, r30
     d90:	ff 1f       	adc	r31, r31
     d92:	e9 57       	subi	r30, 0x79	; 121
     d94:	fe 4f       	sbci	r31, 0xFE	; 254
     d96:	20 81       	ld	r18, Z
     d98:	31 81       	ldd	r19, Z+1	; 0x01
     d9a:	22 0f       	add	r18, r18
     d9c:	33 1f       	adc	r19, r19
     d9e:	30 6e       	ori	r19, 0xE0	; 224
     da0:	89 2f       	mov	r24, r25
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <chk_buttons+0x24>
     da6:	95 95       	asr	r25
     da8:	87 95       	ror	r24
     daa:	4a 95       	dec	r20
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <chk_buttons+0x20>
     dae:	81 70       	andi	r24, 0x01	; 1
     db0:	99 27       	eor	r25, r25
     db2:	28 2b       	or	r18, r24
     db4:	39 2b       	or	r19, r25
     db6:	31 83       	std	Z+1, r19	; 0x01
     db8:	20 83       	st	Z, r18
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	21 15       	cp	r18, r1
     dbe:	30 4f       	sbci	r19, 0xF0	; 240
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <chk_buttons+0x3e>
     dc2:	80 e0       	ldi	r24, 0x00	; 0
  if (state[buttons] == 0xF000) return 1;
  return 0;
}
     dc4:	08 95       	ret

00000dc6 <segsum>:
//                                   segment_sum                                    
// takes a 16-bit binary input value and places the appropriate equivalent 4 digit 
// BCD segment code in the array segment_data for display.                       
// array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
//***********************************************************************************
void segsum(uint16_t sum) {
     dc6:	0f 93       	push	r16
     dc8:	1f 93       	push	r17
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	8c 01       	movw	r16, r24
     dd0:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <DecHex>
     dd4:	e3 2f       	mov	r30, r19
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	ef 01       	movw	r28, r30
     dda:	21 97       	sbiw	r28, 0x01	; 1
  
  uint8_t  i = 0;
  uint8_t  digitNum = 1;
     ddc:	21 e0       	ldi	r18, 0x01	; 1
  uint16_t sumPlaceHolder = sum;
  while(i < 4 && sumPlaceHolder > (DecHex-1))	
     dde:	c8 17       	cp	r28, r24
     de0:	d9 07       	cpc	r29, r25
     de2:	60 f4       	brcc	.+24     	; 0xdfc <segsum+0x36>
  {
    sumPlaceHolder /= DecHex;
     de4:	bf 01       	movw	r22, r30
     de6:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__udivmodhi4>
     dea:	cb 01       	movw	r24, r22
    digitNum++;
     dec:	2f 5f       	subi	r18, 0xFF	; 255
void segsum(uint16_t sum) {
  
  uint8_t  i = 0;
  uint8_t  digitNum = 1;
  uint16_t sumPlaceHolder = sum;
  while(i < 4 && sumPlaceHolder > (DecHex-1))	
     dee:	25 30       	cpi	r18, 0x05	; 5
     df0:	b1 f7       	brne	.-20     	; 0xdde <segsum+0x18>
      segment_data[1] = hex_to_7seg[(sum/(DecHex*DecHex))%DecHex];
      segment_data[0] = hex_to_7seg[sum/(DecHex*DecHex*DecHex)];
    default:
      break;
  }
}
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	08 95       	ret
    sumPlaceHolder /= DecHex;
    digitNum++;
    i++;
  } 
  // Parses 0-4 digits into seperate segment_data[] locations 
  switch(digitNum)
     dfc:	23 30       	cpi	r18, 0x03	; 3
     dfe:	a1 f0       	breq	.+40     	; 0xe28 <segsum+0x62>
     e00:	24 30       	cpi	r18, 0x04	; 4
     e02:	09 f4       	brne	.+2      	; 0xe06 <segsum+0x40>
     e04:	55 c0       	rjmp	.+170    	; 0xeb0 <segsum+0xea>
     e06:	22 30       	cpi	r18, 0x02	; 2
     e08:	c1 f1       	breq	.+112    	; 0xe7a <segsum+0xb4>
  {
    case 1:
      segment_data[4] = hex_to_7seg[sum];
     e0a:	f8 01       	movw	r30, r16
     e0c:	e5 5a       	subi	r30, 0xA5	; 165
     e0e:	fe 4f       	sbci	r31, 0xFE	; 254
     e10:	80 81       	ld	r24, Z
     e12:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <segment_data+0x4>
      segment_data[3] = hex_to_7seg[0];// 0xFF;
     e16:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <hex_to_7seg>
     e1a:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <segment_data+0x3>
      segment_data[1] = hex_to_7seg[0];//0xFF;
     e1e:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <segment_data+0x1>
      segment_data[0] = hex_to_7seg[0];//0xFF;
     e22:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <segment_data>
      break;
     e26:	e5 cf       	rjmp	.-54     	; 0xdf2 <segsum+0x2c>
      segment_data[3] = hex_to_7seg[(sum / DecHex)];
      segment_data[1] = hex_to_7seg[0];//0xFF;
      segment_data[0] = hex_to_7seg[0];// 0xFF;
      break;
    case 3:
      segment_data[4] = hex_to_7seg[sum % DecHex];
     e28:	c8 01       	movw	r24, r16
     e2a:	bf 01       	movw	r22, r30
     e2c:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__udivmodhi4>
     e30:	dc 01       	movw	r26, r24
     e32:	a5 5a       	subi	r26, 0xA5	; 165
     e34:	be 4f       	sbci	r27, 0xFE	; 254
     e36:	8c 91       	ld	r24, X
     e38:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <segment_data+0x4>
      segment_data[3] = hex_to_7seg[(sum/DecHex)%DecHex];
     e3c:	cb 01       	movw	r24, r22
     e3e:	bf 01       	movw	r22, r30
     e40:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__udivmodhi4>
     e44:	fc 01       	movw	r30, r24
     e46:	e5 5a       	subi	r30, 0xA5	; 165
     e48:	fe 4f       	sbci	r31, 0xFE	; 254
     e4a:	80 81       	ld	r24, Z
     e4c:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <segment_data+0x3>
      segment_data[1] = hex_to_7seg[(sum/(DecHex*DecHex))];
     e50:	33 9f       	mul	r19, r19
     e52:	b0 01       	movw	r22, r0
     e54:	11 24       	eor	r1, r1
     e56:	c8 01       	movw	r24, r16
     e58:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__udivmodhi4>
     e5c:	fb 01       	movw	r30, r22
     e5e:	e5 5a       	subi	r30, 0xA5	; 165
     e60:	fe 4f       	sbci	r31, 0xFE	; 254
     e62:	80 81       	ld	r24, Z
     e64:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <segment_data+0x1>
      segment_data[0] = hex_to_7seg[0];//0xFF;
     e68:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <hex_to_7seg>
     e6c:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <segment_data>
      segment_data[1] = hex_to_7seg[(sum/(DecHex*DecHex))%DecHex];
      segment_data[0] = hex_to_7seg[sum/(DecHex*DecHex*DecHex)];
    default:
      break;
  }
}
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	08 95       	ret
      segment_data[3] = hex_to_7seg[0];// 0xFF;
      segment_data[1] = hex_to_7seg[0];//0xFF;
      segment_data[0] = hex_to_7seg[0];//0xFF;
      break;
    case 2:
      segment_data[4] = hex_to_7seg[(sum % DecHex)];
     e7a:	c8 01       	movw	r24, r16
     e7c:	bf 01       	movw	r22, r30
     e7e:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__udivmodhi4>
     e82:	fc 01       	movw	r30, r24
     e84:	e5 5a       	subi	r30, 0xA5	; 165
     e86:	fe 4f       	sbci	r31, 0xFE	; 254
     e88:	80 81       	ld	r24, Z
     e8a:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <segment_data+0x4>
      segment_data[3] = hex_to_7seg[(sum / DecHex)];
     e8e:	fb 01       	movw	r30, r22
     e90:	e5 5a       	subi	r30, 0xA5	; 165
     e92:	fe 4f       	sbci	r31, 0xFE	; 254
     e94:	80 81       	ld	r24, Z
     e96:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <segment_data+0x3>
      segment_data[1] = hex_to_7seg[0];//0xFF;
     e9a:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <hex_to_7seg>
     e9e:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <segment_data+0x1>
      segment_data[0] = hex_to_7seg[0];// 0xFF;
     ea2:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <segment_data>
      segment_data[1] = hex_to_7seg[(sum/(DecHex*DecHex))%DecHex];
      segment_data[0] = hex_to_7seg[sum/(DecHex*DecHex*DecHex)];
    default:
      break;
  }
}
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	1f 91       	pop	r17
     eac:	0f 91       	pop	r16
     eae:	08 95       	ret
      segment_data[3] = hex_to_7seg[(sum/DecHex)%DecHex];
      segment_data[1] = hex_to_7seg[(sum/(DecHex*DecHex))];
      segment_data[0] = hex_to_7seg[0];//0xFF;
      break;
    case 4:
      segment_data[4] = hex_to_7seg[sum % DecHex];
     eb0:	c8 01       	movw	r24, r16
     eb2:	bf 01       	movw	r22, r30
     eb4:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__udivmodhi4>
     eb8:	dc 01       	movw	r26, r24
     eba:	a5 5a       	subi	r26, 0xA5	; 165
     ebc:	be 4f       	sbci	r27, 0xFE	; 254
     ebe:	8c 91       	ld	r24, X
     ec0:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <segment_data+0x4>
      segment_data[3] = hex_to_7seg[(sum/DecHex)%DecHex];
     ec4:	cb 01       	movw	r24, r22
     ec6:	bf 01       	movw	r22, r30
     ec8:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__udivmodhi4>
     ecc:	dc 01       	movw	r26, r24
     ece:	a5 5a       	subi	r26, 0xA5	; 165
     ed0:	be 4f       	sbci	r27, 0xFE	; 254
     ed2:	8c 91       	ld	r24, X
     ed4:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <segment_data+0x3>
      segment_data[1] = hex_to_7seg[(sum/(DecHex*DecHex))%DecHex];
     ed8:	33 9f       	mul	r19, r19
     eda:	90 01       	movw	r18, r0
     edc:	11 24       	eor	r1, r1
     ede:	c8 01       	movw	r24, r16
     ee0:	b9 01       	movw	r22, r18
     ee2:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__udivmodhi4>
     ee6:	cb 01       	movw	r24, r22
     ee8:	bf 01       	movw	r22, r30
     eea:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__udivmodhi4>
     eee:	dc 01       	movw	r26, r24
     ef0:	a5 5a       	subi	r26, 0xA5	; 165
     ef2:	be 4f       	sbci	r27, 0xFE	; 254
     ef4:	8c 91       	ld	r24, X
     ef6:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <segment_data+0x1>
      segment_data[0] = hex_to_7seg[sum/(DecHex*DecHex*DecHex)];
     efa:	e2 9f       	mul	r30, r18
     efc:	b0 01       	movw	r22, r0
     efe:	e3 9f       	mul	r30, r19
     f00:	70 0d       	add	r23, r0
     f02:	f2 9f       	mul	r31, r18
     f04:	70 0d       	add	r23, r0
     f06:	11 24       	eor	r1, r1
     f08:	c8 01       	movw	r24, r16
     f0a:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__udivmodhi4>
     f0e:	fb 01       	movw	r30, r22
     f10:	e5 5a       	subi	r30, 0xA5	; 165
     f12:	fe 4f       	sbci	r31, 0xFE	; 254
     f14:	80 81       	ld	r24, Z
     f16:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <segment_data>
    default:
      break;
  }
}
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	1f 91       	pop	r17
     f20:	0f 91       	pop	r16
     f22:	08 95       	ret

00000f24 <displaySwitch>:
// Takes the segment_data[] array that has the #_DIGIT values and displays it to the 
// current LED digit (displayValue) and returns the next value that will be used for displaying
//***********************************************************************************
uint8_t displaySwitch(uint8_t displayValue)
{
  switch(displayValue){
     f24:	82 30       	cpi	r24, 0x02	; 2
     f26:	c9 f1       	breq	.+114    	; 0xf9a <displaySwitch+0x76>
     f28:	88 f4       	brcc	.+34     	; 0xf4c <displaySwitch+0x28>
     f2a:	88 23       	and	r24, r24
     f2c:	81 f1       	breq	.+96     	; 0xf8e <displaySwitch+0x6a>
     f2e:	81 30       	cpi	r24, 0x01	; 1
     f30:	f1 f4       	brne	.+60     	; 0xf6e <displaySwitch+0x4a>
    case 0:
      PORTB = 0x07;
      PORTA = segment_data[4];
      break;
    case 1:
      PORTB = 0x17;
     f32:	97 e1       	ldi	r25, 0x17	; 23
     f34:	98 bb       	out	0x18, r25	; 24
      PORTA = segment_data[3];
     f36:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <segment_data+0x3>
     f3a:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f3c:	ef e9       	ldi	r30, 0x9F	; 159
     f3e:	ff e0       	ldi	r31, 0x0F	; 15
     f40:	31 97       	sbiw	r30, 0x01	; 1
     f42:	f1 f7       	brne	.-4      	; 0xf40 <displaySwitch+0x1c>
     f44:	00 c0       	rjmp	.+0      	; 0xf46 <displaySwitch+0x22>
     f46:	00 00       	nop
    default:
      break;
  } 
  _delay_ms(1);				//Adds delay for screen congruency
  if(displayValue == 4) return 0; 	//Starts display back to 0
  return ++displayValue; 
     f48:	8f 5f       	subi	r24, 0xFF	; 255
     f4a:	08 95       	ret
// Takes the segment_data[] array that has the #_DIGIT values and displays it to the 
// current LED digit (displayValue) and returns the next value that will be used for displaying
//***********************************************************************************
uint8_t displaySwitch(uint8_t displayValue)
{
  switch(displayValue){
     f4c:	83 30       	cpi	r24, 0x03	; 3
     f4e:	c9 f0       	breq	.+50     	; 0xf82 <displaySwitch+0x5e>
     f50:	84 30       	cpi	r24, 0x04	; 4
     f52:	69 f4       	brne	.+26     	; 0xf6e <displaySwitch+0x4a>
    case 3:
      PORTB = 0x37;
      PORTA = segment_data[1];
      break;
    case 4:
      PORTB = 0x47;
     f54:	87 e4       	ldi	r24, 0x47	; 71
     f56:	88 bb       	out	0x18, r24	; 24
      PORTA = segment_data[0];
     f58:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <segment_data>
     f5c:	8b bb       	out	0x1b, r24	; 27
     f5e:	8f e9       	ldi	r24, 0x9F	; 159
     f60:	9f e0       	ldi	r25, 0x0F	; 15
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	f1 f7       	brne	.-4      	; 0xf62 <displaySwitch+0x3e>
     f66:	00 c0       	rjmp	.+0      	; 0xf68 <displaySwitch+0x44>
     f68:	00 00       	nop
      break;
    default:
      break;
  } 
  _delay_ms(1);				//Adds delay for screen congruency
  if(displayValue == 4) return 0; 	//Starts display back to 0
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	08 95       	ret
     f6e:	ef e9       	ldi	r30, 0x9F	; 159
     f70:	ff e0       	ldi	r31, 0x0F	; 15
     f72:	31 97       	sbiw	r30, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <displaySwitch+0x4e>
     f76:	00 c0       	rjmp	.+0      	; 0xf78 <displaySwitch+0x54>
     f78:	00 00       	nop
     f7a:	84 30       	cpi	r24, 0x04	; 4
     f7c:	29 f7       	brne	.-54     	; 0xf48 <displaySwitch+0x24>
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	08 95       	ret
    case 2:
      PORTB = 0x27;
      PORTA = segment_data[2];
      break;
    case 3:
      PORTB = 0x37;
     f82:	97 e3       	ldi	r25, 0x37	; 55
     f84:	98 bb       	out	0x18, r25	; 24
      PORTA = segment_data[1];
     f86:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <segment_data+0x1>
     f8a:	9b bb       	out	0x1b, r25	; 27
      break;
     f8c:	d7 cf       	rjmp	.-82     	; 0xf3c <displaySwitch+0x18>
//***********************************************************************************
uint8_t displaySwitch(uint8_t displayValue)
{
  switch(displayValue){
    case 0:
      PORTB = 0x07;
     f8e:	97 e0       	ldi	r25, 0x07	; 7
     f90:	98 bb       	out	0x18, r25	; 24
      PORTA = segment_data[4];
     f92:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <segment_data+0x4>
     f96:	9b bb       	out	0x1b, r25	; 27
      break;
     f98:	d1 cf       	rjmp	.-94     	; 0xf3c <displaySwitch+0x18>
    case 1:
      PORTB = 0x17;
      PORTA = segment_data[3];
      break;
    case 2:
      PORTB = 0x27;
     f9a:	97 e2       	ldi	r25, 0x27	; 39
     f9c:	98 bb       	out	0x18, r25	; 24
      PORTA = segment_data[2];
     f9e:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <segment_data+0x2>
     fa2:	9b bb       	out	0x1b, r25	; 27
      break;
     fa4:	cb cf       	rjmp	.-106    	; 0xf3c <displaySwitch+0x18>

00000fa6 <ButtonCheck>:
// Takes in the current value outputted and returns the adjusted value based on the number
//***********************************************************************************
uint8_t ButtonCheck(uint8_t buttonMode)
{
  //PORTA to input w/ pullups 
  DDRA  = 0x00;	
     fa6:	1a ba       	out	0x1a, r1	; 26
  PORTA = 0xFF;
     fa8:	9f ef       	ldi	r25, 0xFF	; 255
     faa:	9b bb       	out	0x1b, r25	; 27
  //enable tristate buffer for pushbutton switches via DEC7 on the encoder
  PORTB = 0x70; 
     fac:	90 e7       	ldi	r25, 0x70	; 112
     fae:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fb0:	95 e3       	ldi	r25, 0x35	; 53
     fb2:	9a 95       	dec	r25
     fb4:	f1 f7       	brne	.-4      	; 0xfb2 <ButtonCheck+0xc>
     fb6:	00 00       	nop
     fb8:	e7 e8       	ldi	r30, 0x87	; 135
     fba:	f1 e0       	ldi	r31, 0x01	; 1
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	70 e0       	ldi	r23, 0x00	; 0
  _delay_us(10);		//BUG"Added delay to get first button to work, need better fix
  while(buttonLoop < 8)
  {     
    if(chk_buttons(buttonLoop))
    {
      buttonMode ^= (1<<buttonLoop); 
     fc0:	a1 e0       	ldi	r26, 0x01	; 1
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
// Edited to have a state array of size 8 for each button
//******************************************************************************
uint8_t chk_buttons(uint8_t buttons) {
  //Gansels debounce with the state as an array that is used to check against the values that buttons is at
  static uint16_t state[8] = {0}; //holds present state
  state[buttons] = (state[buttons] << 1) | (! bit_is_clear(PINA, buttons)) | 0xE000;
     fc4:	99 b3       	in	r25, 0x19	; 25
     fc6:	20 81       	ld	r18, Z
     fc8:	31 81       	ldd	r19, Z+1	; 0x01
     fca:	22 0f       	add	r18, r18
     fcc:	33 1f       	adc	r19, r19
     fce:	a9 01       	movw	r20, r18
     fd0:	50 6e       	ori	r21, 0xE0	; 224
     fd2:	29 2f       	mov	r18, r25
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	06 2e       	mov	r0, r22
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <ButtonCheck+0x38>
     fda:	35 95       	asr	r19
     fdc:	27 95       	ror	r18
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <ButtonCheck+0x34>
     fe2:	21 70       	andi	r18, 0x01	; 1
     fe4:	33 27       	eor	r19, r19
     fe6:	24 2b       	or	r18, r20
     fe8:	35 2b       	or	r19, r21
     fea:	21 93       	st	Z+, r18
     fec:	31 93       	st	Z+, r19
  if (state[buttons] == 0xF000) return 1;
     fee:	21 15       	cp	r18, r1
     ff0:	30 4f       	sbci	r19, 0xF0	; 240
     ff2:	39 f4       	brne	.+14     	; 0x1002 <ButtonCheck+0x5c>
  _delay_us(10);		//BUG"Added delay to get first button to work, need better fix
  while(buttonLoop < 8)
  {     
    if(chk_buttons(buttonLoop))
    {
      buttonMode ^= (1<<buttonLoop); 
     ff4:	9d 01       	movw	r18, r26
     ff6:	06 2e       	mov	r0, r22
     ff8:	01 c0       	rjmp	.+2      	; 0xffc <ButtonCheck+0x56>
     ffa:	22 0f       	add	r18, r18
     ffc:	0a 94       	dec	r0
     ffe:	ea f7       	brpl	.-6      	; 0xffa <ButtonCheck+0x54>
    1000:	82 27       	eor	r24, r18
    1002:	6f 5f       	subi	r22, 0xFF	; 255
    1004:	7f 4f       	sbci	r23, 0xFF	; 255
  PORTA = 0xFF;
  //enable tristate buffer for pushbutton switches via DEC7 on the encoder
  PORTB = 0x70; 
  uint8_t buttonLoop = 0;
  _delay_us(10);		//BUG"Added delay to get first button to work, need better fix
  while(buttonLoop < 8)
    1006:	68 30       	cpi	r22, 0x08	; 8
    1008:	71 05       	cpc	r23, r1
    100a:	e1 f6       	brne	.-72     	; 0xfc4 <ButtonCheck+0x1e>
    {
      buttonMode ^= (1<<buttonLoop); 
    }
    buttonLoop++;
  }
  DDRA = 0xFF;
    100c:	9f ef       	ldi	r25, 0xFF	; 255
    100e:	9a bb       	out	0x1a, r25	; 26
  return buttonMode;
    1010:	08 95       	ret

00001012 <ClockCounterCorrection>:
//                     ClockCounterCorrection(uint16_t displayValue)                                    
// Takes in a value and ensures it is in the format a clock would use
// Returns value in the format HH:MM 
//***********************************************************************************
uint16_t ClockCounterCorrection(uint16_t displayValue)
{
    1012:	48 2f       	mov	r20, r24
  static uint8_t displayValueHours;
  static uint8_t displayValueMins;
  
  displayValueHours = (displayValue / 60);
    1014:	28 2f       	mov	r18, r24
    1016:	39 2f       	mov	r19, r25
    1018:	a9 e8       	ldi	r26, 0x89	; 137
    101a:	b8 e8       	ldi	r27, 0x88	; 136
    101c:	0e 94 a0 11 	call	0x2340	; 0x2340 <__umulhisi3>
    1020:	9c 01       	movw	r18, r24
    1022:	36 95       	lsr	r19
    1024:	27 95       	ror	r18
    1026:	32 95       	swap	r19
    1028:	22 95       	swap	r18
    102a:	2f 70       	andi	r18, 0x0F	; 15
    102c:	23 27       	eor	r18, r19
    102e:	3f 70       	andi	r19, 0x0F	; 15
    1030:	23 27       	eor	r18, r19
  displayValueMins  = (displayValue - (60 * displayValueHours));
  displayValue      = ((displayValueHours * 100) + displayValueMins);
    1032:	8c e3       	ldi	r24, 0x3C	; 60
    1034:	28 9f       	mul	r18, r24
    1036:	40 19       	sub	r20, r0
    1038:	11 24       	eor	r1, r1
    103a:	84 2f       	mov	r24, r20
    103c:	90 e0       	ldi	r25, 0x00	; 0
  
  return displayValue;
}
    103e:	44 e6       	ldi	r20, 0x64	; 100
    1040:	24 9f       	mul	r18, r20
    1042:	80 0d       	add	r24, r0
    1044:	91 1d       	adc	r25, r1
    1046:	11 24       	eor	r1, r1
    1048:	08 95       	ret

0000104a <EncoderValueDirection>:
  //First If statment checks   0B000000__ 
  //Second If statment checks  0B0000__00 
  
  static uint8_t previousEncoderValue = 0x0F;

  if((previousEncoderValue & 0x03) == 0x00 && (currentEncoderValue & 0x03) == 0x01)
    104a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <previousEncoderValue.2384>
    104e:	29 2f       	mov	r18, r25
    1050:	23 70       	andi	r18, 0x03	; 3
    1052:	71 f4       	brne	.+28     	; 0x1070 <EncoderValueDirection+0x26>
    1054:	28 2f       	mov	r18, r24
    1056:	23 70       	andi	r18, 0x03	; 3
    1058:	21 30       	cpi	r18, 0x01	; 1
    105a:	e9 f0       	breq	.+58     	; 0x1096 <EncoderValueDirection+0x4c>
    105c:	9c 70       	andi	r25, 0x0C	; 12
    previousEncoderValue = (currentEncoderValue & 0x0F);
    return CCW;   
  }
  
  //Checks the second Encoder
  if((previousEncoderValue & 0x0C) == 0x00 && (currentEncoderValue & 0x0C) == 0x04)
    105e:	91 f4       	brne	.+36     	; 0x1084 <EncoderValueDirection+0x3a>
    1060:	98 2f       	mov	r25, r24
    1062:	9c 70       	andi	r25, 0x0C	; 12
    1064:	94 30       	cpi	r25, 0x04	; 4
    1066:	b9 f0       	breq	.+46     	; 0x1096 <EncoderValueDirection+0x4c>
  else if((previousEncoderValue & 0x0C) == 0x04 && (currentEncoderValue & 0x0C) == 0x00)
  {
    previousEncoderValue = (currentEncoderValue & 0x0F);
    return CCW;   
  }
  previousEncoderValue = currentEncoderValue;
    1068:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <previousEncoderValue.2384>
  return 0;
    106c:	80 e0       	ldi	r24, 0x00	; 0
}
    106e:	08 95       	ret
  if((previousEncoderValue & 0x03) == 0x00 && (currentEncoderValue & 0x03) == 0x01)
  {
    previousEncoderValue = (currentEncoderValue & 0x0F);
    return CW;
  }
  else if((previousEncoderValue & 0x03) == 0x01 && (currentEncoderValue & 0x03) == 0x00)
    1070:	21 30       	cpi	r18, 0x01	; 1
    1072:	a1 f7       	brne	.-24     	; 0x105c <EncoderValueDirection+0x12>
    1074:	28 2f       	mov	r18, r24
    1076:	23 70       	andi	r18, 0x03	; 3
    1078:	89 f7       	brne	.-30     	; 0x105c <EncoderValueDirection+0x12>
  {
    previousEncoderValue = (currentEncoderValue & 0x0F);
    107a:	8f 70       	andi	r24, 0x0F	; 15
    107c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <previousEncoderValue.2384>
    return CCW;   
    1080:	8f ef       	ldi	r24, 0xFF	; 255
    1082:	08 95       	ret
  if((previousEncoderValue & 0x0C) == 0x00 && (currentEncoderValue & 0x0C) == 0x04)
  {
    previousEncoderValue = (currentEncoderValue & 0x0F);
    return CW;
  }
  else if((previousEncoderValue & 0x0C) == 0x04 && (currentEncoderValue & 0x0C) == 0x00)
    1084:	94 30       	cpi	r25, 0x04	; 4
    1086:	81 f7       	brne	.-32     	; 0x1068 <EncoderValueDirection+0x1e>
    1088:	98 2f       	mov	r25, r24
    108a:	9c 70       	andi	r25, 0x0C	; 12
    108c:	b1 f3       	breq	.-20     	; 0x107a <EncoderValueDirection+0x30>
  {
    previousEncoderValue = (currentEncoderValue & 0x0F);
    return CCW;   
  }
  previousEncoderValue = currentEncoderValue;
    108e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <previousEncoderValue.2384>
  return 0;
    1092:	80 e0       	ldi	r24, 0x00	; 0
}
    1094:	08 95       	ret
  
  static uint8_t previousEncoderValue = 0x0F;

  if((previousEncoderValue & 0x03) == 0x00 && (currentEncoderValue & 0x03) == 0x01)
  {
    previousEncoderValue = (currentEncoderValue & 0x0F);
    1096:	8f 70       	andi	r24, 0x0F	; 15
    1098:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <previousEncoderValue.2384>
    return CW;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	08 95       	ret

000010a0 <__vector_16>:
// Toggles COLON bits
// Counts Seconds, rolls over every 60, increments and rolls clock over 
// Counts up too 255 (which inidcates 1 sec with 32Khz clk & 128 prescale)
//*********************************************************************************
ISR(TIMER0_OVF_vect)
{
    10a0:	1f 92       	push	r1
    10a2:	0f 92       	push	r0
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	0f 92       	push	r0
    10a8:	11 24       	eor	r1, r1
    10aa:	2f 93       	push	r18
    10ac:	3f 93       	push	r19
    10ae:	8f 93       	push	r24
    10b0:	9f 93       	push	r25
  uint16_t ms = 0;	
  static uint8_t currentSeconds = 0;
  static uint8_t snoozeTimer = 0;
  segment_data[2] ^= 0x03;   
    10b2:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <segment_data+0x2>
    10b6:	83 e0       	ldi	r24, 0x03	; 3
    10b8:	82 27       	eor	r24, r18
    10ba:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <segment_data+0x2>
  // Second Counter
  if(currentSeconds < 60)
    10be:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <currentSeconds.2391>
    10c2:	8c 33       	cpi	r24, 0x3C	; 60
    10c4:	a0 f4       	brcc	.+40     	; 0x10ee <__vector_16+0x4e>
  {
    if(snoozeFlag == SNOOZEON)
    10c6:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <snoozeFlag>
    10ca:	91 30       	cpi	r25, 0x01	; 1
    10cc:	29 f1       	breq	.+74     	; 0x1118 <__stack+0x19>
    10ce:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <snoozeTimer.2392>
    {
      snoozeTimer++;
      segment_data[2] ^= 0x04;
    }
    
    currentSeconds++;
    10d2:	8f 5f       	subi	r24, 0xFF	; 255
    10d4:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <currentSeconds.2391>
  {
    currentTime++;
    currentSeconds = 0;
  }

  if(snoozeTimer == 10)
    10d8:	9a 30       	cpi	r25, 0x0A	; 10
    10da:	c1 f0       	breq	.+48     	; 0x110c <__stack+0xd>
  ms++;
  if(ms % 8 == 0) {
    //for note duration (64th notes) 
    beat++;
  }
}
    10dc:	9f 91       	pop	r25
    10de:	8f 91       	pop	r24
    10e0:	3f 91       	pop	r19
    10e2:	2f 91       	pop	r18
    10e4:	0f 90       	pop	r0
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	0f 90       	pop	r0
    10ea:	1f 90       	pop	r1
    10ec:	18 95       	reti
    }
    
    currentSeconds++;
  }else
  {
    currentTime++;
    10ee:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <currentTime>
    10f2:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <currentTime+0x1>
    10f6:	01 96       	adiw	r24, 0x01	; 1
    10f8:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <currentTime+0x1>
    10fc:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <currentTime>
    currentSeconds = 0;
    1100:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <currentSeconds.2391>
    1104:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <snoozeTimer.2392>
  }

  if(snoozeTimer == 10)
    1108:	9a 30       	cpi	r25, 0x0A	; 10
    110a:	41 f7       	brne	.-48     	; 0x10dc <__vector_16+0x3c>
  {
    snoozeFlag = SNOOZEALARM;
    110c:	82 e0       	ldi	r24, 0x02	; 2
    110e:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <snoozeFlag>
    snoozeTimer = 0;
    1112:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <snoozeTimer.2392>
  ms++;
  if(ms % 8 == 0) {
    //for note duration (64th notes) 
    beat++;
  }
}
    1116:	e2 cf       	rjmp	.-60     	; 0x10dc <__vector_16+0x3c>
  // Second Counter
  if(currentSeconds < 60)
  {
    if(snoozeFlag == SNOOZEON)
    {
      snoozeTimer++;
    1118:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <snoozeTimer.2392>
    111c:	9f 5f       	subi	r25, 0xFF	; 255
    111e:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <snoozeTimer.2392>
      segment_data[2] ^= 0x04;
    1122:	37 e0       	ldi	r19, 0x07	; 7
    1124:	23 27       	eor	r18, r19
    1126:	20 93 79 01 	sts	0x0179, r18	; 0x800179 <segment_data+0x2>
    112a:	d3 cf       	rjmp	.-90     	; 0x10d2 <__vector_16+0x32>

0000112c <__vector_18>:
}

char uart_buff[42] = {' '};

ISR(USART0_RX_vect)
{
    112c:	1f 92       	push	r1
    112e:	0f 92       	push	r0
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	0f 92       	push	r0
    1134:	11 24       	eor	r1, r1
    1136:	0b b6       	in	r0, 0x3b	; 59
    1138:	0f 92       	push	r0
    113a:	8f 93       	push	r24
    113c:	9f 93       	push	r25
    113e:	ef 93       	push	r30
    1140:	ff 93       	push	r31
  static uint8_t counter = 0;
  uart_buff[counter] = UDR0;
    1142:	8c b1       	in	r24, 0x0c	; 12
    1144:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <counter.2399>
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	eb 5f       	subi	r30, 0xFB	; 251
    114c:	fe 4f       	sbci	r31, 0xFE	; 254
    114e:	80 83       	st	Z, r24
  UDR0 = 0;
    1150:	1c b8       	out	0x0c, r1	; 12
  if(uart_buff[counter] == ' ')
    1152:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <counter.2399>
    1156:	e8 2f       	mov	r30, r24
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	eb 5f       	subi	r30, 0xFB	; 251
    115c:	fe 4f       	sbci	r31, 0xFE	; 254
    115e:	90 81       	ld	r25, Z
    1160:	90 32       	cpi	r25, 0x20	; 32
    1162:	71 f0       	breq	.+28     	; 0x1180 <__vector_18+0x54>
  {
    data_complete = 1;
    counter = 0;
  }else
  {
    counter++;
    1164:	8f 5f       	subi	r24, 0xFF	; 255
    1166:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <counter.2399>
  //(*lcd_string_array2) = uart_getc();
  //lcd_string_array2[0] = uart_getc();
  //string2lcd(lcd_string_array2);//lcd_string_array);//................ //send the string to LCD (lcd_functions)
  
  //if(counter == 2){ counter = 1; }
}
    116a:	ff 91       	pop	r31
    116c:	ef 91       	pop	r30
    116e:	9f 91       	pop	r25
    1170:	8f 91       	pop	r24
    1172:	0f 90       	pop	r0
    1174:	0b be       	out	0x3b, r0	; 59
    1176:	0f 90       	pop	r0
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	0f 90       	pop	r0
    117c:	1f 90       	pop	r1
    117e:	18 95       	reti
  static uint8_t counter = 0;
  uart_buff[counter] = UDR0;
  UDR0 = 0;
  if(uart_buff[counter] == ' ')
  {
    data_complete = 1;
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <data_complete>
    counter = 0;
    1186:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <counter.2399>
    118a:	ef cf       	rjmp	.-34     	; 0x116a <__vector_18+0x3e>

0000118c <__vector_12>:
//                                   ISR(TIMER1_OVF_vect)                                    
// Triggered when TimerCounter1 overflows
//
//*********************************************************************************
ISR(TIMER1_COMPA_vect)
{   PORTD ^= 0b10000000;      //flips the bit, creating a tone
    118c:	1f 92       	push	r1
    118e:	0f 92       	push	r0
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	0f 92       	push	r0
    1194:	11 24       	eor	r1, r1
    1196:	0b b6       	in	r0, 0x3b	; 59
    1198:	0f 92       	push	r0
    119a:	2f 93       	push	r18
    119c:	3f 93       	push	r19
    119e:	4f 93       	push	r20
    11a0:	5f 93       	push	r21
    11a2:	6f 93       	push	r22
    11a4:	7f 93       	push	r23
    11a6:	8f 93       	push	r24
    11a8:	9f 93       	push	r25
    11aa:	af 93       	push	r26
    11ac:	bf 93       	push	r27
    11ae:	ef 93       	push	r30
    11b0:	ff 93       	push	r31
    11b2:	82 b3       	in	r24, 0x12	; 18
    11b4:	80 58       	subi	r24, 0x80	; 128
    11b6:	82 bb       	out	0x12, r24	; 18
  if(beat >= max_beat) {   //if we've played the note long enough
    11b8:	20 91 9d 01 	lds	r18, 0x019D	; 0x80019d <beat>
    11bc:	30 91 9e 01 	lds	r19, 0x019E	; 0x80019e <beat+0x1>
    11c0:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <max_beat>
    11c4:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <max_beat+0x1>
    11c8:	28 17       	cp	r18, r24
    11ca:	39 07       	cpc	r19, r25
    11cc:	58 f0       	brcs	.+22     	; 0x11e4 <__vector_12+0x58>
    notes++;               //move on to the next note
    11ce:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <notes>
    11d2:	8f 5f       	subi	r24, 0xFF	; 255
    11d4:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <notes>
    play_song(song, notes);//and play it
    11d8:	60 91 99 01 	lds	r22, 0x0199	; 0x800199 <notes>
    11dc:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <song>
    11e0:	0e 94 a9 06 	call	0xd52	; 0xd52 <play_song>
  }
}
    11e4:	ff 91       	pop	r31
    11e6:	ef 91       	pop	r30
    11e8:	bf 91       	pop	r27
    11ea:	af 91       	pop	r26
    11ec:	9f 91       	pop	r25
    11ee:	8f 91       	pop	r24
    11f0:	7f 91       	pop	r23
    11f2:	6f 91       	pop	r22
    11f4:	5f 91       	pop	r21
    11f6:	4f 91       	pop	r20
    11f8:	3f 91       	pop	r19
    11fa:	2f 91       	pop	r18
    11fc:	0f 90       	pop	r0
    11fe:	0b be       	out	0x3b, r0	; 59
    1200:	0f 90       	pop	r0
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	0f 90       	pop	r0
    1206:	1f 90       	pop	r1
    1208:	18 95       	reti

0000120a <AlarmSetMode>:
// Function entered when the user presses the first button on the button board
// loops until user to inputs time (w/ encoder)
// Once user presses same button, Alarm is set and function is exitted// 
//*********************************************************************************
uint16_t AlarmSetMode(uint8_t alarmOffset)
{
    120a:	cf 93       	push	r28
    120c:	c8 2f       	mov	r28, r24
/*********************************************************************/
//              SPI_read(uint8_t currentBarGraph)
// Sends the bar graph data and then reads the SPI port.
/*********************************************************************/
uint16_t SPI_read(uint8_t currentBarGraph){
  PORTB &= 0x7F;
    120e:	c7 98       	cbi	0x18, 7	; 24
  SPDR = currentBarGraph;
    1210:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){} //wait till 8 bits have been sent
    1212:	77 9b       	sbis	0x0e, 7	; 14
    1214:	fe cf       	rjmp	.-4      	; 0x1212 <AlarmSetMode+0x8>
  //PORTD = 0xFF;
  //PORTD = 0x00;
  PORTE = 0x00;
    1216:	13 b8       	out	0x03, r1	; 3
  PORTE = 0xFF;
    1218:	8f ef       	ldi	r24, 0xFF	; 255
    121a:	83 b9       	out	0x03, r24	; 3
  return(SPDR); //return incoming data from SPDR
    121c:	8f b1       	in	r24, 0x0f	; 15
  static uint8_t  currentEncoderValue  = 0;
  static uint16_t encodersDisplayValue  = 0;
  int8_t currentAdjustmentValue = 0;
  static uint16_t  offsetVal = 1439;
  currentEncoderValue = (SPI_read(currentAdjustmentValue));  
  currentAdjustmentValue = EncoderValueDirection(currentEncoderValue);
    121e:	0e 94 25 08 	call	0x104a	; 0x104a <EncoderValueDirection>
    1222:	48 2f       	mov	r20, r24
  encodersDisplayValue += currentAdjustmentValue;
    1224:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <encodersDisplayValue.2409>
    1228:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <encodersDisplayValue.2409+0x1>
    122c:	c9 01       	movw	r24, r18
    122e:	84 0f       	add	r24, r20
    1230:	91 1d       	adc	r25, r1
    1232:	47 fd       	sbrc	r20, 7
    1234:	9a 95       	dec	r25
    1236:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <encodersDisplayValue.2409+0x1>
    123a:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <encodersDisplayValue.2409>
  // Checks if the clock will roll backwards behind 0
  // 1439 is clock time for 23 : 59
  if(!alarmOffset)
    123e:	c1 11       	cpse	r28, r1
    1240:	1b c0       	rjmp	.+54     	; 0x1278 <AlarmSetMode+0x6e>
  {
    offsetVal = 1439;
    1242:	2f e9       	ldi	r18, 0x9F	; 159
    1244:	35 e0       	ldi	r19, 0x05	; 5
    1246:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <offsetVal.2411+0x1>
    124a:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <offsetVal.2411>
  }else{
    offsetVal = 779;  
  }

  if((encodersDisplayValue == 0) && (currentAdjustmentValue == CCW)) 
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	21 f4       	brne	.+8      	; 0x125a <AlarmSetMode+0x50>
    1252:	4f 3f       	cpi	r20, 0xFF	; 255
    1254:	c1 f0       	breq	.+48     	; 0x1286 <AlarmSetMode+0x7c>
  {
    if(!offsetVal){ encodersDisplayValue = 0;}
    else{encodersDisplayValue = 0;}//	    encodersDisplayValue = 60;}
  }
  return encodersDisplayValue;
}
    1256:	cf 91       	pop	r28
    1258:	08 95       	ret
  }

  if((encodersDisplayValue == 0) && (currentAdjustmentValue == CCW)) 
  {
    encodersDisplayValue = offsetVal;
  }else if(encodersDisplayValue > offsetVal)
    125a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <offsetVal.2411>
    125e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <offsetVal.2411+0x1>
    1262:	28 17       	cp	r18, r24
    1264:	39 07       	cpc	r19, r25
    1266:	b8 f7       	brcc	.-18     	; 0x1256 <AlarmSetMode+0x4c>
  {
    if(!offsetVal){ encodersDisplayValue = 0;}
    1268:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <encodersDisplayValue.2409+0x1>
    126c:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <encodersDisplayValue.2409>
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	90 e0       	ldi	r25, 0x00	; 0
    else{encodersDisplayValue = 0;}//	    encodersDisplayValue = 60;}
  }
  return encodersDisplayValue;
}
    1274:	cf 91       	pop	r28
    1276:	08 95       	ret
  // 1439 is clock time for 23 : 59
  if(!alarmOffset)
  {
    offsetVal = 1439;
  }else{
    offsetVal = 779;  
    1278:	2b e0       	ldi	r18, 0x0B	; 11
    127a:	33 e0       	ldi	r19, 0x03	; 3
    127c:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <offsetVal.2411+0x1>
    1280:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <offsetVal.2411>
    1284:	e4 cf       	rjmp	.-56     	; 0x124e <AlarmSetMode+0x44>
  }

  if((encodersDisplayValue == 0) && (currentAdjustmentValue == CCW)) 
  {
    encodersDisplayValue = offsetVal;
    1286:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <offsetVal.2411>
    128a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <offsetVal.2411+0x1>
    128e:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <encodersDisplayValue.2409+0x1>
    1292:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <encodersDisplayValue.2409>
  {
    if(!offsetVal){ encodersDisplayValue = 0;}
    else{encodersDisplayValue = 0;}//	    encodersDisplayValue = 60;}
  }
  return encodersDisplayValue;
}
    1296:	cf 91       	pop	r28
    1298:	08 95       	ret

0000129a <VolumeSetMode>:
/*********************************************************************/
//              SPI_read(uint8_t currentBarGraph)
// Sends the bar graph data and then reads the SPI port.
/*********************************************************************/
uint16_t SPI_read(uint8_t currentBarGraph){
  PORTB &= 0x7F;
    129a:	c7 98       	cbi	0x18, 7	; 24
  SPDR = currentBarGraph;
    129c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){} //wait till 8 bits have been sent
    129e:	77 9b       	sbis	0x0e, 7	; 14
    12a0:	fe cf       	rjmp	.-4      	; 0x129e <VolumeSetMode+0x4>
  //PORTD = 0xFF;
  //PORTD = 0x00;
  PORTE = 0x00;
    12a2:	13 b8       	out	0x03, r1	; 3
  PORTE = 0xFF;
    12a4:	8f ef       	ldi	r24, 0xFF	; 255
    12a6:	83 b9       	out	0x03, r24	; 3
  return(SPDR); //return incoming data from SPDR
    12a8:	8f b1       	in	r24, 0x0f	; 15
  static uint8_t  currentEncoderValue  = 0;
  static uint16_t encodersVolumeValue  = 0xE0;
  int8_t currentAdjustmentValue = 0;
  
  currentEncoderValue = (SPI_read(currentAdjustmentValue));  
  currentAdjustmentValue = EncoderValueDirection(currentEncoderValue);
    12aa:	0e 94 25 08 	call	0x104a	; 0x104a <EncoderValueDirection>
    12ae:	48 2f       	mov	r20, r24
  encodersVolumeValue += currentAdjustmentValue;
    12b0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    12b4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    12b8:	c9 01       	movw	r24, r18
    12ba:	84 0f       	add	r24, r20
    12bc:	91 1d       	adc	r25, r1
    12be:	47 fd       	sbrc	r20, 7
    12c0:	9a 95       	dec	r25
    12c2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    12c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  if((encodersVolumeValue == 0) && (currentAdjustmentValue == CCW)) 
    12ca:	00 97       	sbiw	r24, 0x00	; 0
    12cc:	19 f4       	brne	.+6      	; 0x12d4 <VolumeSetMode+0x3a>
    12ce:	4f 3f       	cpi	r20, 0xFF	; 255
    12d0:	61 f0       	breq	.+24     	; 0x12ea <VolumeSetMode+0x50>
  }else if(encodersVolumeValue > 0xFF)
  {
    encodersVolumeValue = 0;
  }
  return encodersVolumeValue*2;
}
    12d2:	08 95       	ret
  currentAdjustmentValue = EncoderValueDirection(currentEncoderValue);
  encodersVolumeValue += currentAdjustmentValue;
  if((encodersVolumeValue == 0) && (currentAdjustmentValue == CCW)) 
  {
    encodersVolumeValue = 0xFF;
  }else if(encodersVolumeValue > 0xFF)
    12d4:	8f 3f       	cpi	r24, 0xFF	; 255
    12d6:	91 05       	cpc	r25, r1
    12d8:	89 f0       	breq	.+34     	; 0x12fc <VolumeSetMode+0x62>
    12da:	80 f0       	brcs	.+32     	; 0x12fc <VolumeSetMode+0x62>
  {
    encodersVolumeValue = 0;
    12dc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
    12e0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	90 e0       	ldi	r25, 0x00	; 0
  }
  return encodersVolumeValue*2;
}
    12e8:	08 95       	ret
  currentEncoderValue = (SPI_read(currentAdjustmentValue));  
  currentAdjustmentValue = EncoderValueDirection(currentEncoderValue);
  encodersVolumeValue += currentAdjustmentValue;
  if((encodersVolumeValue == 0) && (currentAdjustmentValue == CCW)) 
  {
    encodersVolumeValue = 0xFF;
    12ea:	8f ef       	ldi	r24, 0xFF	; 255
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    12f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    12f6:	8e ef       	ldi	r24, 0xFE	; 254
    12f8:	91 e0       	ldi	r25, 0x01	; 1
    12fa:	08 95       	ret
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	08 95       	ret

00001302 <LocalTempSensor>:
// Outputs the temperature to the LCD screen
//***********************************************************************************
void LocalTempSensor(uint16_t lm73_temp)
{
  static char previous_LCD_message[42];
  twi_start_rd(LM73_READ,lm73_rd_buf,2);//................ //read temperature data from LM73 (2 bytes) 
    1302:	42 e0       	ldi	r20, 0x02	; 2
    1304:	67 e2       	ldi	r22, 0x27	; 39
    1306:	72 e0       	ldi	r23, 0x02	; 2
    1308:	81 e9       	ldi	r24, 0x91	; 145
    130a:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <twi_start_rd>
    130e:	8f ec       	ldi	r24, 0xCF	; 207
    1310:	97 e0       	ldi	r25, 0x07	; 7
    1312:	01 97       	sbiw	r24, 0x01	; 1
    1314:	f1 f7       	brne	.-4      	; 0x1312 <LocalTempSensor+0x10>
    1316:	00 c0       	rjmp	.+0      	; 0x1318 <LocalTempSensor+0x16>
    1318:	00 00       	nop
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    131a:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <lm73_rd_buf>
    131e:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <lm73_rd_buf+0x1>
    1322:	98 27       	eor	r25, r24
    1324:	89 27       	eor	r24, r25
    1326:	98 27       	eor	r25, r24
    1328:	4a e0       	ldi	r20, 0x0A	; 10
    132a:	60 ea       	ldi	r22, 0xA0	; 160
    132c:	71 e0       	ldi	r23, 0x01	; 1
    132e:	88 0f       	add	r24, r24
    1330:	89 2f       	mov	r24, r25
    1332:	88 1f       	adc	r24, r24
    1334:	99 0b       	sbc	r25, r25
    1336:	91 95       	neg	r25
    1338:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__itoa_ncheck>
  lm73_temp |= lm73_rd_buf[1];//................ //"OR" in the low temp byte to lm73_temp 
  itoa(lm73_temp>>7 , lcd_string_array, 10);//................ //convert to string in array with itoa() from avr-libc                           

  // Determine if value changed, if it did update
//if(strcmp(previous_LCD_message, LCD_message)){  
  LCD_message[0] = 'I';
    133c:	89 e4       	ldi	r24, 0x49	; 73
    133e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <LCD_message>
  LCD_message[1] = 'N';
    1342:	8e e4       	ldi	r24, 0x4E	; 78
    1344:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <LCD_message+0x1>
  LCD_message[2] = 'T';
    1348:	24 e5       	ldi	r18, 0x54	; 84
    134a:	20 93 31 01 	sts	0x0131, r18	; 0x800131 <LCD_message+0x2>
  LCD_message[3] = ':';
    134e:	9a e3       	ldi	r25, 0x3A	; 58
    1350:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <LCD_message+0x3>
  LCD_message[4] = lcd_string_array[0];
    1354:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <lcd_string_array>
    1358:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <LCD_message+0x4>
  LCD_message[5] = lcd_string_array[1];
    135c:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <lcd_string_array+0x1>
    1360:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <LCD_message+0x5>
  LCD_message[6] = ' ';
    1364:	80 e2       	ldi	r24, 0x20	; 32
    1366:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <LCD_message+0x6>
  LCD_message[7] = 'E';
    136a:	35 e4       	ldi	r19, 0x45	; 69
    136c:	30 93 36 01 	sts	0x0136, r19	; 0x800136 <LCD_message+0x7>
  LCD_message[8] = 'X';
    1370:	38 e5       	ldi	r19, 0x58	; 88
    1372:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <LCD_message+0x8>
  LCD_message[9] = 'T';
    1376:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <LCD_message+0x9>
  LCD_message[10] = ':';
    137a:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <LCD_message+0xa>
  LCD_message[11] = uart_buff[1];
    137e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <uart_buff+0x1>
    1382:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <LCD_message+0xb>
  LCD_message[12] = uart_buff[2];
    1386:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <uart_buff+0x2>
    138a:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <LCD_message+0xc>
  LCD_message[13] = uart_buff[3];
    138e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <uart_buff+0x3>
    1392:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <LCD_message+0xd>
  LCD_message[14] = ' ';
    1396:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <LCD_message+0xe>
  LCD_message[15] = ' ';
    139a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <LCD_message+0xf>
  
  uint8_t fill;
  if(alarmGlobal == OFF)
    139e:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <alarmGlobal>
    13a2:	88 23       	and	r24, r24
    13a4:	09 f1       	breq	.+66     	; 0x13e8 <LocalTempSensor+0xe6>
  {
    fill = 16;
  }else{
    LCD_message[16] = 'A';
    13a6:	81 e4       	ldi	r24, 0x41	; 65
    13a8:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <LCD_message+0x10>
    LCD_message[17] = 'L';
    13ac:	9c e4       	ldi	r25, 0x4C	; 76
    13ae:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <LCD_message+0x11>
    LCD_message[18] = 'A';
    13b2:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <LCD_message+0x12>
    LCD_message[19] = 'R';
    13b6:	82 e5       	ldi	r24, 0x52	; 82
    13b8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <LCD_message+0x13>
    LCD_message[20] = 'M';
    13bc:	8d e4       	ldi	r24, 0x4D	; 77
    13be:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <LCD_message+0x14>
    fill = 21;
    13c2:	85 e1       	ldi	r24, 0x15	; 21
  }
  while(fill != 41)
  {
    LCD_message[fill] = ' ';
    13c4:	90 e2       	ldi	r25, 0x20	; 32
    13c6:	e8 2f       	mov	r30, r24
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	e1 5d       	subi	r30, 0xD1	; 209
    13cc:	fe 4f       	sbci	r31, 0xFE	; 254
    13ce:	90 83       	st	Z, r25
    fill++;
    13d0:	8f 5f       	subi	r24, 0xFF	; 255
    LCD_message[18] = 'A';
    LCD_message[19] = 'R';
    LCD_message[20] = 'M';
    fill = 21;
  }
  while(fill != 41)
    13d2:	89 32       	cpi	r24, 0x29	; 41
    13d4:	c1 f7       	brne	.-16     	; 0x13c6 <LocalTempSensor+0xc4>
  {
    LCD_message[fill] = ' ';
    fill++;
  }
  
  if((buttonPos) && data_complete)
    13d6:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
    13da:	88 23       	and	r24, r24
    13dc:	21 f0       	breq	.+8      	; 0x13e6 <LocalTempSensor+0xe4>
    13de:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <data_complete>
    13e2:	81 11       	cpse	r24, r1
    13e4:	03 c0       	rjmp	.+6      	; 0x13ec <LocalTempSensor+0xea>
    13e6:	08 95       	ret
  LCD_message[15] = ' ';
  
  uint8_t fill;
  if(alarmGlobal == OFF)
  {
    fill = 16;
    13e8:	80 e1       	ldi	r24, 0x10	; 16
    13ea:	ec cf       	rjmp	.-40     	; 0x13c4 <LocalTempSensor+0xc2>
    fill++;
  }
  
  if((buttonPos) && data_complete)
  {
    refresh_lcd(LCD_message); 
    13ec:	8f e2       	ldi	r24, 0x2F	; 47
    13ee:	91 e0       	ldi	r25, 0x01	; 1
    13f0:	0c 94 54 0a 	jmp	0x14a8	; 0x14a8 <refresh_lcd>

000013f4 <init>:
{
//  TCNT0 - Norm Mode | Using external 32kHz clock | 128 Prescale	!Count to 250 using uint8_t to reach 1 second for clock!
//  TCNT1 - CTC  Mode | Pick freuquency      | Output too PD7		!Outputs to summing amp, which gets outputted to speaker!
//  TCNT2 - Fast PWM  | Output to PB7 (OC2)  				!Controls brightness of LED Display!
//  TCNT3 - Fast PWM  | Output to PE5 (OC3C)				!Controls volume to Audio Amp!
DDRA  = 0xFF;	      		    //set port A as input  				
    13f4:	8f ef       	ldi	r24, 0xFF	; 255
    13f6:	8a bb       	out	0x1a, r24	; 26
DDRB  = 0xFF; 	      		    //set port B as outputs
    13f8:	87 bb       	out	0x17, r24	; 23
DDRD  |= (1 << PD7);   		    //Sets Port pin2 D to output
    13fa:	8f 9a       	sbi	0x11, 7	; 17
DDRE  |= (1 << PE5) | (1 << PE6);   //Sets Port pin6 E to output
    13fc:	82 b1       	in	r24, 0x02	; 2
    13fe:	80 66       	ori	r24, 0x60	; 96
    1400:	82 b9       	out	0x02, r24	; 2
PORTD = 0x00;   		    //set port D to LOW
    1402:	12 ba       	out	0x12, r1	; 18
PORTB = 0x10;   		    //set port B to start with LED1  	
    1404:	80 e1       	ldi	r24, 0x10	; 16
    1406:	88 bb       	out	0x18, r24	; 24

ASSR   |= (1 << AS0);			//Use external 32kHz clock 
    1408:	80 b7       	in	r24, 0x30	; 48
    140a:	88 60       	ori	r24, 0x08	; 8
    140c:	80 bf       	out	0x30, r24	; 48
SPCR   |= (1 << SPE)   | (1 << MSTR);	//Enable SPI communication in mastermode
    140e:	8d b1       	in	r24, 0x0d	; 13
    1410:	80 65       	ori	r24, 0x50	; 80
    1412:	8d b9       	out	0x0d, r24	; 13
SPSR    = (1 << SPI2X); 		//SPI at 2x speed (8 MHz)  
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	8e b9       	out	0x0e, r24	; 14
TIMSK  |= (1 << TOIE0) | (1 << OCIE1A);	//enable interrupt on compare & overflow of TCNT1
    1418:	87 b7       	in	r24, 0x37	; 55
    141a:	81 61       	ori	r24, 0x11	; 17
    141c:	87 bf       	out	0x37, r24	; 55
TCCR0  |= (1 << CS00)  | (1 << CS02);	//normal mode, prescale by 128
    141e:	83 b7       	in	r24, 0x33	; 51
    1420:	85 60       	ori	r24, 0x05	; 5
    1422:	83 bf       	out	0x33, r24	; 51
TCCR1A  = 0;
    1424:	1f bc       	out	0x2f, r1	; 47
TCCR1B |= (1 << WGM12); 		//CTC mode clear at TOP immediate
    1426:	8e b5       	in	r24, 0x2e	; 46
    1428:	88 60       	ori	r24, 0x08	; 8
    142a:	8e bd       	out	0x2e, r24	; 46
TCCR1C  = 0;
    142c:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
TCCR3A |= (1 << COM3C1) | (1 << WGM30);	//Set as output compare to OC3C (PE5)
    1430:	eb e8       	ldi	r30, 0x8B	; 139
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	89 60       	ori	r24, 0x09	; 9
    1438:	80 83       	st	Z, r24
//TCCR3A |= (1 << WGM32);
TCCR3B |= (1 << WGM32) | (1 << CS00); 
    143a:	ea e8       	ldi	r30, 0x8A	; 138
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	89 60       	ori	r24, 0x09	; 9
    1442:	80 83       	st	Z, r24
OCR1A  = 0xF0F;
    1444:	8f e0       	ldi	r24, 0x0F	; 15
    1446:	9f e0       	ldi	r25, 0x0F	; 15
    1448:	9b bd       	out	0x2b, r25	; 43
    144a:	8a bd       	out	0x2a, r24	; 42
OCR3C  = 0x00;
    144c:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    1450:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
TCCR2  |= (1 << WGM21) | (1 << WGM20) | (1 << COM21) | (1 << CS21); // Set TCNT2 to fast pwm outputting to OC2 (PB7)
    1454:	85 b5       	in	r24, 0x25	; 37
    1456:	8a 66       	ori	r24, 0x6A	; 106
    1458:	85 bd       	out	0x25, r24	; 37
ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); 		    // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
    145a:	86 b1       	in	r24, 0x06	; 6
    145c:	87 60       	ori	r24, 0x07	; 7
    145e:	86 b9       	out	0x06, r24	; 6
ADMUX  |= (1 << REFS0); // Set ADC reference to AVCC
    1460:	3e 9a       	sbi	0x07, 6	; 7
ADMUX  |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
    1462:	3d 9a       	sbi	0x07, 5	; 7
ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode
    1464:	35 9a       	sbi	0x06, 5	; 6
ADCSRA |= (1 << ADEN);  // Enable ADC
    1466:	37 9a       	sbi	0x06, 7	; 6
ADCSRA |= (1 << ADSC);  // Start A2D Conversions
    1468:	36 9a       	sbi	0x06, 6	; 6
lcd_init();
    146a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <lcd_init>
music_init();
    146e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <music_init>
init_twi();//................ //initalize TWI (twi_master.h)  
    1472:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <init_twi>
uart_init();
    1476:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <uart_init>
sei();
    147a:	78 94       	sei
    147c:	08 95       	ret

0000147e <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    147e:	91 e0       	ldi	r25, 0x01	; 1
    1480:	81 11       	cpse	r24, r1
    1482:	01 c0       	rjmp	.+2      	; 0x1486 <send_lcd+0x8>
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1488:	77 9b       	sbis	0x0e, 7	; 14
    148a:	fe cf       	rjmp	.-4      	; 0x1488 <send_lcd+0xa>
  SPDR = byte;                        //send payload
    148c:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    148e:	77 9b       	sbis	0x0e, 7	; 14
    1490:	fe cf       	rjmp	.-4      	; 0x148e <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1492:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1496:	88 60       	ori	r24, 0x08	; 8
    1498:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    149c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    14a0:	87 7f       	andi	r24, 0xF7	; 247
    14a2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    14a6:	08 95       	ret

000014a8 <refresh_lcd>:
//
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
    14a8:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <i.2094>
    14ac:	82 0f       	add	r24, r18
    14ae:	91 1d       	adc	r25, r1
    14b0:	fc 01       	movw	r30, r24
    14b2:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    14b4:	91 e0       	ldi	r25, 0x01	; 1
    14b6:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    14b8:	77 9b       	sbis	0x0e, 7	; 14
    14ba:	fe cf       	rjmp	.-4      	; 0x14b8 <refresh_lcd+0x10>
  SPDR = byte;                        //send payload
    14bc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    14be:	77 9b       	sbis	0x0e, 7	; 14
    14c0:	fe cf       	rjmp	.-4      	; 0x14be <refresh_lcd+0x16>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    14c2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    14c6:	88 60       	ori	r24, 0x08	; 8
    14c8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    14cc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    14d0:	87 7f       	andi	r24, 0xF7	; 247
    14d2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
    14d6:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <i.2094>
    14da:	8f 5f       	subi	r24, 0xFF	; 255
    14dc:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <i.2094>
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
    14e0:	80 31       	cpi	r24, 0x10	; 16
    14e2:	d9 f0       	breq	.+54     	; 0x151a <refresh_lcd+0x72>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
    14e4:	80 32       	cpi	r24, 0x20	; 32
    14e6:	09 f0       	breq	.+2      	; 0x14ea <refresh_lcd+0x42>
    14e8:	08 95       	ret
    14ea:	85 ed       	ldi	r24, 0xD5	; 213
    14ec:	8a 95       	dec	r24
    14ee:	f1 f7       	brne	.-4      	; 0x14ec <refresh_lcd+0x44>
    14f0:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    14f2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    14f4:	77 9b       	sbis	0x0e, 7	; 14
    14f6:	fe cf       	rjmp	.-4      	; 0x14f4 <refresh_lcd+0x4c>
  SPDR = byte;                        //send payload
    14f8:	80 e8       	ldi	r24, 0x80	; 128
    14fa:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    14fc:	77 9b       	sbis	0x0e, 7	; 14
    14fe:	fe cf       	rjmp	.-4      	; 0x14fc <refresh_lcd+0x54>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1500:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1504:	88 60       	ori	r24, 0x08	; 8
    1506:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    150a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    150e:	87 7f       	andi	r24, 0xF7	; 247
    1510:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
    1514:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <i.2094>
    1518:	08 95       	ret
    151a:	f5 ed       	ldi	r31, 0xD5	; 213
    151c:	fa 95       	dec	r31
    151e:	f1 f7       	brne	.-4      	; 0x151c <refresh_lcd+0x74>
    1520:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1522:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1524:	77 9b       	sbis	0x0e, 7	; 14
    1526:	fe cf       	rjmp	.-4      	; 0x1524 <refresh_lcd+0x7c>
  SPDR = byte;                        //send payload
    1528:	80 ec       	ldi	r24, 0xC0	; 192
    152a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    152c:	77 9b       	sbis	0x0e, 7	; 14
    152e:	fe cf       	rjmp	.-4      	; 0x152c <refresh_lcd+0x84>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1530:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1534:	88 60       	ori	r24, 0x08	; 8
    1536:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    153a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    153e:	87 7f       	andi	r24, 0xF7	; 247
    1540:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1544:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <i.2094>
    1548:	cd cf       	rjmp	.-102    	; 0x14e4 <refresh_lcd+0x3c>

0000154a <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    154a:	66 0f       	add	r22, r22
    154c:	66 0f       	add	r22, r22
    154e:	66 0f       	add	r22, r22
    1550:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1552:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1554:	77 9b       	sbis	0x0e, 7	; 14
    1556:	fe cf       	rjmp	.-4      	; 0x1554 <set_custom_character+0xa>
  SPDR = byte;                        //send payload
    1558:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    155a:	77 9b       	sbis	0x0e, 7	; 14
    155c:	fe cf       	rjmp	.-4      	; 0x155a <set_custom_character+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    155e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1562:	28 60       	ori	r18, 0x08	; 8
    1564:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1568:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    156c:	27 7f       	andi	r18, 0xF7	; 247
    156e:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1572:	25 ed       	ldi	r18, 0xD5	; 213
    1574:	2a 95       	dec	r18
    1576:	f1 f7       	brne	.-4      	; 0x1574 <set_custom_character+0x2a>
    1578:	00 00       	nop
    157a:	fc 01       	movw	r30, r24
    157c:	9c 01       	movw	r18, r24
    157e:	28 5f       	subi	r18, 0xF8	; 248
    1580:	3f 4f       	sbci	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1582:	91 e0       	ldi	r25, 0x01	; 1

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    1584:	81 91       	ld	r24, Z+
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1586:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1588:	77 9b       	sbis	0x0e, 7	; 14
    158a:	fe cf       	rjmp	.-4      	; 0x1588 <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
    158c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    158e:	77 9b       	sbis	0x0e, 7	; 14
    1590:	fe cf       	rjmp	.-4      	; 0x158e <set_custom_character+0x44>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1592:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1596:	88 60       	ori	r24, 0x08	; 8
    1598:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    159c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15a0:	87 7f       	andi	r24, 0xF7	; 247
    15a2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15a6:	85 ed       	ldi	r24, 0xD5	; 213
    15a8:	8a 95       	dec	r24
    15aa:	f1 f7       	brne	.-4      	; 0x15a8 <set_custom_character+0x5e>
    15ac:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
    15ae:	e2 17       	cp	r30, r18
    15b0:	f3 07       	cpc	r31, r19
    15b2:	41 f7       	brne	.-48     	; 0x1584 <set_custom_character+0x3a>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
    15b4:	08 95       	ret

000015b6 <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
    15b6:	90 e4       	ldi	r25, 0x40	; 64
    15b8:	89 9f       	mul	r24, r25
    15ba:	60 0d       	add	r22, r0
    15bc:	11 24       	eor	r1, r1
    15be:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    15c0:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    15c2:	77 9b       	sbis	0x0e, 7	; 14
    15c4:	fe cf       	rjmp	.-4      	; 0x15c2 <set_cursor+0xc>
  SPDR = byte;                        //send payload
    15c6:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    15c8:	77 9b       	sbis	0x0e, 7	; 14
    15ca:	fe cf       	rjmp	.-4      	; 0x15c8 <set_cursor+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    15cc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15d0:	88 60       	ori	r24, 0x08	; 8
    15d2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15d6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15da:	87 7f       	andi	r24, 0xF7	; 247
    15dc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15e0:	08 95       	ret

000015e2 <uint2lcd>:
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    15e2:	81 11       	cpse	r24, r1
    15e4:	13 c0       	rjmp	.+38     	; 0x160c <uint2lcd+0x2a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    15ea:	77 9b       	sbis	0x0e, 7	; 14
    15ec:	fe cf       	rjmp	.-4      	; 0x15ea <uint2lcd+0x8>
  SPDR = byte;                        //send payload
    15ee:	80 e3       	ldi	r24, 0x30	; 48
    15f0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    15f2:	77 9b       	sbis	0x0e, 7	; 14
    15f4:	fe cf       	rjmp	.-4      	; 0x15f2 <uint2lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    15f6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15fa:	88 60       	ori	r24, 0x08	; 8
    15fc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1600:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1604:	87 7f       	andi	r24, 0xF7	; 247
    1606:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    160a:	08 95       	ret
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
    160c:	84 36       	cpi	r24, 0x64	; 100
    160e:	b0 f4       	brcc	.+44     	; 0x163c <uint2lcd+0x5a>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
    1610:	8a 30       	cpi	r24, 0x0A	; 10
    1612:	60 f5       	brcc	.+88     	; 0x166c <uint2lcd+0x8a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1614:	91 e0       	ldi	r25, 0x01	; 1
    1616:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1618:	77 9b       	sbis	0x0e, 7	; 14
    161a:	fe cf       	rjmp	.-4      	; 0x1618 <uint2lcd+0x36>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    161c:	9d ec       	ldi	r25, 0xCD	; 205
    161e:	89 9f       	mul	r24, r25
    1620:	91 2d       	mov	r25, r1
    1622:	11 24       	eor	r1, r1
    1624:	96 95       	lsr	r25
    1626:	96 95       	lsr	r25
    1628:	96 95       	lsr	r25
    162a:	2a e0       	ldi	r18, 0x0A	; 10
    162c:	92 9f       	mul	r25, r18
    162e:	80 19       	sub	r24, r0
    1630:	11 24       	eor	r1, r1
    1632:	80 5d       	subi	r24, 0xD0	; 208
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
    1634:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1636:	77 9b       	sbis	0x0e, 7	; 14
    1638:	fe cf       	rjmp	.-4      	; 0x1636 <uint2lcd+0x54>
    163a:	dd cf       	rjmp	.-70     	; 0x15f6 <uint2lcd+0x14>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
    163c:	99 e2       	ldi	r25, 0x29	; 41
    163e:	89 9f       	mul	r24, r25
    1640:	91 2d       	mov	r25, r1
    1642:	11 24       	eor	r1, r1
    1644:	92 95       	swap	r25
    1646:	9f 70       	andi	r25, 0x0F	; 15
    1648:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    164a:	21 e0       	ldi	r18, 0x01	; 1
    164c:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    164e:	77 9b       	sbis	0x0e, 7	; 14
    1650:	fe cf       	rjmp	.-4      	; 0x164e <uint2lcd+0x6c>
  SPDR = byte;                        //send payload
    1652:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1654:	77 9b       	sbis	0x0e, 7	; 14
    1656:	fe cf       	rjmp	.-4      	; 0x1654 <uint2lcd+0x72>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1658:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    165c:	98 60       	ori	r25, 0x08	; 8
    165e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1662:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1666:	97 7f       	andi	r25, 0xF7	; 247
    1668:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
    166c:	99 e2       	ldi	r25, 0x29	; 41
    166e:	89 9f       	mul	r24, r25
    1670:	91 2d       	mov	r25, r1
    1672:	11 24       	eor	r1, r1
    1674:	92 95       	swap	r25
    1676:	9f 70       	andi	r25, 0x0F	; 15
    1678:	38 2f       	mov	r19, r24
    167a:	24 e6       	ldi	r18, 0x64	; 100
    167c:	92 9f       	mul	r25, r18
    167e:	30 19       	sub	r19, r0
    1680:	11 24       	eor	r1, r1
    1682:	2d ec       	ldi	r18, 0xCD	; 205
    1684:	32 9f       	mul	r19, r18
    1686:	91 2d       	mov	r25, r1
    1688:	11 24       	eor	r1, r1
    168a:	96 95       	lsr	r25
    168c:	96 95       	lsr	r25
    168e:	96 95       	lsr	r25
    1690:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1692:	21 e0       	ldi	r18, 0x01	; 1
    1694:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1696:	77 9b       	sbis	0x0e, 7	; 14
    1698:	fe cf       	rjmp	.-4      	; 0x1696 <uint2lcd+0xb4>
  SPDR = byte;                        //send payload
    169a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    169c:	77 9b       	sbis	0x0e, 7	; 14
    169e:	fe cf       	rjmp	.-4      	; 0x169c <uint2lcd+0xba>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    16a0:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16a4:	98 60       	ori	r25, 0x08	; 8
    16a6:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16aa:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16ae:	97 7f       	andi	r25, 0xF7	; 247
    16b0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16b4:	af cf       	rjmp	.-162    	; 0x1614 <uint2lcd+0x32>

000016b6 <int2lcd>:
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    16b6:	87 ff       	sbrs	r24, 7
    else          {uint2lcd(number);                                            }
    16b8:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <uint2lcd>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    16bc:	91 e0       	ldi	r25, 0x01	; 1
    16be:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    16c0:	77 9b       	sbis	0x0e, 7	; 14
    16c2:	fe cf       	rjmp	.-4      	; 0x16c0 <int2lcd+0xa>
  SPDR = byte;                        //send payload
    16c4:	9d e2       	ldi	r25, 0x2D	; 45
    16c6:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    16c8:	77 9b       	sbis	0x0e, 7	; 14
    16ca:	fe cf       	rjmp	.-4      	; 0x16c8 <int2lcd+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    16cc:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16d0:	98 60       	ori	r25, 0x08	; 8
    16d2:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16d6:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16da:	97 7f       	andi	r25, 0xF7	; 247
    16dc:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16e0:	95 ed       	ldi	r25, 0xD5	; 213
    16e2:	9a 95       	dec	r25
    16e4:	f1 f7       	brne	.-4      	; 0x16e2 <int2lcd+0x2c>
    16e6:	00 00       	nop
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    16e8:	81 95       	neg	r24
    16ea:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <uint2lcd>

000016ee <cursor_on>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    16ee:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    16f0:	77 9b       	sbis	0x0e, 7	; 14
    16f2:	fe cf       	rjmp	.-4      	; 0x16f0 <cursor_on+0x2>
  SPDR = byte;                        //send payload
    16f4:	8e e0       	ldi	r24, 0x0E	; 14
    16f6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    16f8:	77 9b       	sbis	0x0e, 7	; 14
    16fa:	fe cf       	rjmp	.-4      	; 0x16f8 <cursor_on+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    16fc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1700:	88 60       	ori	r24, 0x08	; 8
    1702:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1706:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    170a:	87 7f       	andi	r24, 0xF7	; 247
    170c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1710:	08 95       	ret

00001712 <cursor_off>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1712:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1714:	77 9b       	sbis	0x0e, 7	; 14
    1716:	fe cf       	rjmp	.-4      	; 0x1714 <cursor_off+0x2>
  SPDR = byte;                        //send payload
    1718:	8c e0       	ldi	r24, 0x0C	; 12
    171a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    171c:	77 9b       	sbis	0x0e, 7	; 14
    171e:	fe cf       	rjmp	.-4      	; 0x171c <cursor_off+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1720:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1724:	88 60       	ori	r24, 0x08	; 8
    1726:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    172a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    172e:	87 7f       	andi	r24, 0xF7	; 247
    1730:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1734:	08 95       	ret

00001736 <shift_right>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1736:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1738:	77 9b       	sbis	0x0e, 7	; 14
    173a:	fe cf       	rjmp	.-4      	; 0x1738 <shift_right+0x2>
  SPDR = byte;                        //send payload
    173c:	8e e1       	ldi	r24, 0x1E	; 30
    173e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1740:	77 9b       	sbis	0x0e, 7	; 14
    1742:	fe cf       	rjmp	.-4      	; 0x1740 <shift_right+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1744:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1748:	88 60       	ori	r24, 0x08	; 8
    174a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    174e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1752:	87 7f       	andi	r24, 0xF7	; 247
    1754:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1758:	08 95       	ret

0000175a <shift_left>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    175a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    175c:	77 9b       	sbis	0x0e, 7	; 14
    175e:	fe cf       	rjmp	.-4      	; 0x175c <shift_left+0x2>
  SPDR = byte;                        //send payload
    1760:	88 e1       	ldi	r24, 0x18	; 24
    1762:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1764:	77 9b       	sbis	0x0e, 7	; 14
    1766:	fe cf       	rjmp	.-4      	; 0x1764 <shift_left+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1768:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    176c:	88 60       	ori	r24, 0x08	; 8
    176e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1772:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1776:	87 7f       	andi	r24, 0xF7	; 247
    1778:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    177c:	08 95       	ret

0000177e <strobe_lcd>:
    177e:	e2 e6       	ldi	r30, 0x62	; 98
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	88 60       	ori	r24, 0x08	; 8
    1786:	80 83       	st	Z, r24
    1788:	80 81       	ld	r24, Z
    178a:	87 7f       	andi	r24, 0xF7	; 247
    178c:	80 83       	st	Z, r24
    178e:	08 95       	ret

00001790 <clear_display>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1790:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1792:	77 9b       	sbis	0x0e, 7	; 14
    1794:	fe cf       	rjmp	.-4      	; 0x1792 <clear_display+0x2>
  SPDR = byte;                        //send payload
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    179a:	77 9b       	sbis	0x0e, 7	; 14
    179c:	fe cf       	rjmp	.-4      	; 0x179a <clear_display+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    179e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    17a2:	88 60       	ori	r24, 0x08	; 8
    17a4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    17a8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    17ac:	87 7f       	andi	r24, 0xF7	; 247
    17ae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    17b2:	8f e1       	ldi	r24, 0x1F	; 31
    17b4:	9c e1       	ldi	r25, 0x1C	; 28
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <clear_display+0x26>
    17ba:	00 c0       	rjmp	.+0      	; 0x17bc <clear_display+0x2c>
    17bc:	00 00       	nop
    17be:	08 95       	ret

000017c0 <cursor_home>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    17c0:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    17c2:	77 9b       	sbis	0x0e, 7	; 14
    17c4:	fe cf       	rjmp	.-4      	; 0x17c2 <cursor_home+0x2>
  SPDR = byte;                        //send payload
    17c6:	82 e0       	ldi	r24, 0x02	; 2
    17c8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    17ca:	77 9b       	sbis	0x0e, 7	; 14
    17cc:	fe cf       	rjmp	.-4      	; 0x17ca <cursor_home+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    17ce:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    17d2:	88 60       	ori	r24, 0x08	; 8
    17d4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    17d8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    17dc:	87 7f       	andi	r24, 0xF7	; 247
    17de:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    17e2:	8f e6       	ldi	r24, 0x6F	; 111
    17e4:	97 e1       	ldi	r25, 0x17	; 23
    17e6:	01 97       	sbiw	r24, 0x01	; 1
    17e8:	f1 f7       	brne	.-4      	; 0x17e6 <cursor_home+0x26>
    17ea:	00 c0       	rjmp	.+0      	; 0x17ec <cursor_home+0x2c>
    17ec:	00 00       	nop
    17ee:	08 95       	ret

000017f0 <line2_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    17f0:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    17f2:	77 9b       	sbis	0x0e, 7	; 14
    17f4:	fe cf       	rjmp	.-4      	; 0x17f2 <line2_col1+0x2>
  SPDR = byte;                        //send payload
    17f6:	80 ec       	ldi	r24, 0xC0	; 192
    17f8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    17fa:	77 9b       	sbis	0x0e, 7	; 14
    17fc:	fe cf       	rjmp	.-4      	; 0x17fa <line2_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    17fe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1802:	88 60       	ori	r24, 0x08	; 8
    1804:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1808:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    180c:	87 7f       	andi	r24, 0xF7	; 247
    180e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1812:	08 95       	ret

00001814 <line1_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1814:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1816:	77 9b       	sbis	0x0e, 7	; 14
    1818:	fe cf       	rjmp	.-4      	; 0x1816 <line1_col1+0x2>
  SPDR = byte;                        //send payload
    181a:	80 e8       	ldi	r24, 0x80	; 128
    181c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    181e:	77 9b       	sbis	0x0e, 7	; 14
    1820:	fe cf       	rjmp	.-4      	; 0x181e <line1_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1822:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1826:	88 60       	ori	r24, 0x08	; 8
    1828:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    182c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1830:	87 7f       	andi	r24, 0xF7	; 247
    1832:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1836:	08 95       	ret

00001838 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
    1838:	90 e1       	ldi	r25, 0x10	; 16
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    183a:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
    183c:	20 e2       	ldi	r18, 0x20	; 32
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    183e:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1840:	77 9b       	sbis	0x0e, 7	; 14
    1842:	fe cf       	rjmp	.-4      	; 0x1840 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
    1844:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1846:	77 9b       	sbis	0x0e, 7	; 14
    1848:	fe cf       	rjmp	.-4      	; 0x1846 <fill_spaces+0xe>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    184a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    184e:	88 60       	ori	r24, 0x08	; 8
    1850:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1854:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1858:	87 7f       	andi	r24, 0xF7	; 247
    185a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    185e:	85 ed       	ldi	r24, 0xD5	; 213
    1860:	8a 95       	dec	r24
    1862:	f1 f7       	brne	.-4      	; 0x1860 <fill_spaces+0x28>
    1864:	00 00       	nop
    1866:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
    1868:	51 f7       	brne	.-44     	; 0x183e <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
    186a:	08 95       	ret

0000186c <char2lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    186c:	91 e0       	ldi	r25, 0x01	; 1
    186e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1870:	77 9b       	sbis	0x0e, 7	; 14
    1872:	fe cf       	rjmp	.-4      	; 0x1870 <char2lcd+0x4>
  SPDR = byte;                        //send payload
    1874:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1876:	77 9b       	sbis	0x0e, 7	; 14
    1878:	fe cf       	rjmp	.-4      	; 0x1876 <char2lcd+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    187a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    187e:	88 60       	ori	r24, 0x08	; 8
    1880:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1884:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1888:	87 7f       	andi	r24, 0xF7	; 247
    188a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    188e:	08 95       	ret

00001890 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
    1890:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    1892:	40 e0       	ldi	r20, 0x00	; 0
    1894:	50 e0       	ldi	r21, 0x00	; 0
    1896:	60 e0       	ldi	r22, 0x00	; 0
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1898:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    189a:	df 01       	movw	r26, r30
    189c:	a4 0f       	add	r26, r20
    189e:	b5 1f       	adc	r27, r21
    18a0:	8c 91       	ld	r24, X
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    18a2:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    18a4:	77 9b       	sbis	0x0e, 7	; 14
    18a6:	fe cf       	rjmp	.-4      	; 0x18a4 <string2lcd+0x14>
  SPDR = byte;                        //send payload
    18a8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    18aa:	77 9b       	sbis	0x0e, 7	; 14
    18ac:	fe cf       	rjmp	.-4      	; 0x18aa <string2lcd+0x1a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    18ae:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    18b2:	98 60       	ori	r25, 0x08	; 8
    18b4:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    18b8:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    18bc:	97 7f       	andi	r25, 0xF7	; 247
    18be:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    18c2:	85 ed       	ldi	r24, 0xD5	; 213
    18c4:	8a 95       	dec	r24
    18c6:	f1 f7       	brne	.-4      	; 0x18c4 <string2lcd+0x34>
    18c8:	00 00       	nop
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    18ca:	6f 5f       	subi	r22, 0xFF	; 255
    18cc:	46 2f       	mov	r20, r22
    18ce:	50 e0       	ldi	r21, 0x00	; 0
    18d0:	df 01       	movw	r26, r30
    18d2:	0d 90       	ld	r0, X+
    18d4:	00 20       	and	r0, r0
    18d6:	e9 f7       	brne	.-6      	; 0x18d2 <string2lcd+0x42>
    18d8:	9d 01       	movw	r18, r26
    18da:	2e 1b       	sub	r18, r30
    18dc:	3f 0b       	sbc	r19, r31
    18de:	22 50       	subi	r18, 0x02	; 2
    18e0:	31 09       	sbc	r19, r1
    18e2:	24 17       	cp	r18, r20
    18e4:	35 07       	cpc	r19, r21
    18e6:	c8 f6       	brcc	.-78     	; 0x189a <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
    18e8:	08 95       	ret

000018ea <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    18ea:	8f ef       	ldi	r24, 0xFF	; 255
    18ec:	99 ef       	ldi	r25, 0xF9	; 249
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	f1 f7       	brne	.-4      	; 0x18ee <lcd_init+0x4>
    18f2:	00 c0       	rjmp	.+0      	; 0x18f4 <lcd_init+0xa>
    18f4:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
    18f6:	88 e0       	ldi	r24, 0x08	; 8
    18f8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    18fc:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    18fe:	77 9b       	sbis	0x0e, 7	; 14
    1900:	fe cf       	rjmp	.-4      	; 0x18fe <lcd_init+0x14>
  SPDR = byte;                        //send payload
    1902:	80 e3       	ldi	r24, 0x30	; 48
    1904:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1906:	77 9b       	sbis	0x0e, 7	; 14
    1908:	fe cf       	rjmp	.-4      	; 0x1906 <lcd_init+0x1c>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    190a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    190e:	88 60       	ori	r24, 0x08	; 8
    1910:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1914:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1918:	87 7f       	andi	r24, 0xF7	; 247
    191a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    191e:	8f e5       	ldi	r24, 0x5F	; 95
    1920:	9d e6       	ldi	r25, 0x6D	; 109
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	f1 f7       	brne	.-4      	; 0x1922 <lcd_init+0x38>
    1926:	00 c0       	rjmp	.+0      	; 0x1928 <lcd_init+0x3e>
    1928:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    192a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    192c:	77 9b       	sbis	0x0e, 7	; 14
    192e:	fe cf       	rjmp	.-4      	; 0x192c <lcd_init+0x42>
  SPDR = byte;                        //send payload
    1930:	80 e3       	ldi	r24, 0x30	; 48
    1932:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1934:	77 9b       	sbis	0x0e, 7	; 14
    1936:	fe cf       	rjmp	.-4      	; 0x1934 <lcd_init+0x4a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1938:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    193c:	88 60       	ori	r24, 0x08	; 8
    193e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1942:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1946:	87 7f       	andi	r24, 0xF7	; 247
    1948:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    194c:	8f e5       	ldi	r24, 0x5F	; 95
    194e:	9d e6       	ldi	r25, 0x6D	; 109
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	f1 f7       	brne	.-4      	; 0x1950 <lcd_init+0x66>
    1954:	00 c0       	rjmp	.+0      	; 0x1956 <lcd_init+0x6c>
    1956:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1958:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    195a:	77 9b       	sbis	0x0e, 7	; 14
    195c:	fe cf       	rjmp	.-4      	; 0x195a <lcd_init+0x70>
  SPDR = byte;                        //send payload
    195e:	80 e3       	ldi	r24, 0x30	; 48
    1960:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1962:	77 9b       	sbis	0x0e, 7	; 14
    1964:	fe cf       	rjmp	.-4      	; 0x1962 <lcd_init+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1966:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    196a:	88 60       	ori	r24, 0x08	; 8
    196c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1970:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1974:	87 7f       	andi	r24, 0xF7	; 247
    1976:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    197a:	8f e5       	ldi	r24, 0x5F	; 95
    197c:	9d e6       	ldi	r25, 0x6D	; 109
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	f1 f7       	brne	.-4      	; 0x197e <lcd_init+0x94>
    1982:	00 c0       	rjmp	.+0      	; 0x1984 <lcd_init+0x9a>
    1984:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1986:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1988:	77 9b       	sbis	0x0e, 7	; 14
    198a:	fe cf       	rjmp	.-4      	; 0x1988 <lcd_init+0x9e>
  SPDR = byte;                        //send payload
    198c:	88 e3       	ldi	r24, 0x38	; 56
    198e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1990:	77 9b       	sbis	0x0e, 7	; 14
    1992:	fe cf       	rjmp	.-4      	; 0x1990 <lcd_init+0xa6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1994:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1998:	88 60       	ori	r24, 0x08	; 8
    199a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    199e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19a2:	87 7f       	andi	r24, 0xF7	; 247
    19a4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19a8:	8f e1       	ldi	r24, 0x1F	; 31
    19aa:	9e e4       	ldi	r25, 0x4E	; 78
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <lcd_init+0xc2>
    19b0:	00 c0       	rjmp	.+0      	; 0x19b2 <lcd_init+0xc8>
    19b2:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    19b4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    19b6:	77 9b       	sbis	0x0e, 7	; 14
    19b8:	fe cf       	rjmp	.-4      	; 0x19b6 <lcd_init+0xcc>
  SPDR = byte;                        //send payload
    19ba:	88 e0       	ldi	r24, 0x08	; 8
    19bc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    19be:	77 9b       	sbis	0x0e, 7	; 14
    19c0:	fe cf       	rjmp	.-4      	; 0x19be <lcd_init+0xd4>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    19c2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19c6:	88 60       	ori	r24, 0x08	; 8
    19c8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19cc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19d0:	87 7f       	andi	r24, 0xF7	; 247
    19d2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19d6:	8f e1       	ldi	r24, 0x1F	; 31
    19d8:	9e e4       	ldi	r25, 0x4E	; 78
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <lcd_init+0xf0>
    19de:	00 c0       	rjmp	.+0      	; 0x19e0 <lcd_init+0xf6>
    19e0:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    19e2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    19e4:	77 9b       	sbis	0x0e, 7	; 14
    19e6:	fe cf       	rjmp	.-4      	; 0x19e4 <lcd_init+0xfa>
  SPDR = byte;                        //send payload
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    19ec:	77 9b       	sbis	0x0e, 7	; 14
    19ee:	fe cf       	rjmp	.-4      	; 0x19ec <lcd_init+0x102>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    19f0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19f4:	88 60       	ori	r24, 0x08	; 8
    19f6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19fa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19fe:	87 7f       	andi	r24, 0xF7	; 247
    1a00:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1a04:	8f e1       	ldi	r24, 0x1F	; 31
    1a06:	9e e4       	ldi	r25, 0x4E	; 78
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	f1 f7       	brne	.-4      	; 0x1a08 <lcd_init+0x11e>
    1a0c:	00 c0       	rjmp	.+0      	; 0x1a0e <lcd_init+0x124>
    1a0e:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1a10:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1a12:	77 9b       	sbis	0x0e, 7	; 14
    1a14:	fe cf       	rjmp	.-4      	; 0x1a12 <lcd_init+0x128>
  SPDR = byte;                        //send payload
    1a16:	86 e0       	ldi	r24, 0x06	; 6
    1a18:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1a1a:	77 9b       	sbis	0x0e, 7	; 14
    1a1c:	fe cf       	rjmp	.-4      	; 0x1a1a <lcd_init+0x130>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1a1e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1a22:	88 60       	ori	r24, 0x08	; 8
    1a24:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1a28:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1a2c:	87 7f       	andi	r24, 0xF7	; 247
    1a2e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1a32:	8f e1       	ldi	r24, 0x1F	; 31
    1a34:	9e e4       	ldi	r25, 0x4E	; 78
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	f1 f7       	brne	.-4      	; 0x1a36 <lcd_init+0x14c>
    1a3a:	00 c0       	rjmp	.+0      	; 0x1a3c <lcd_init+0x152>
    1a3c:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1a3e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1a40:	77 9b       	sbis	0x0e, 7	; 14
    1a42:	fe cf       	rjmp	.-4      	; 0x1a40 <lcd_init+0x156>
  SPDR = byte;                        //send payload
    1a44:	8c e0       	ldi	r24, 0x0C	; 12
    1a46:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1a48:	77 9b       	sbis	0x0e, 7	; 14
    1a4a:	fe cf       	rjmp	.-4      	; 0x1a48 <lcd_init+0x15e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1a4c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1a50:	88 60       	ori	r24, 0x08	; 8
    1a52:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1a56:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1a5a:	87 7f       	andi	r24, 0xF7	; 247
    1a5c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1a60:	8f e1       	ldi	r24, 0x1F	; 31
    1a62:	9e e4       	ldi	r25, 0x4E	; 78
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	f1 f7       	brne	.-4      	; 0x1a64 <lcd_init+0x17a>
    1a68:	00 c0       	rjmp	.+0      	; 0x1a6a <lcd_init+0x180>
    1a6a:	00 00       	nop
    1a6c:	08 95       	ret

00001a6e <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
    1a6e:	4f 92       	push	r4
    1a70:	5f 92       	push	r5
    1a72:	6f 92       	push	r6
    1a74:	7f 92       	push	r7
    1a76:	8f 92       	push	r8
    1a78:	9f 92       	push	r9
    1a7a:	af 92       	push	r10
    1a7c:	bf 92       	push	r11
    1a7e:	cf 92       	push	r12
    1a80:	df 92       	push	r13
    1a82:	ef 92       	push	r14
    1a84:	ff 92       	push	r15
    1a86:	0f 93       	push	r16
    1a88:	1f 93       	push	r17
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	69 97       	sbiw	r28, 0x19	; 25
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	f8 94       	cli
    1a98:	de bf       	out	0x3e, r29	; 62
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	cd bf       	out	0x3d, r28	; 61
    1a9e:	14 2f       	mov	r17, r20
    1aa0:	42 2e       	mov	r4, r18
    1aa2:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
    1aa4:	00 23       	and	r16, r16
    1aa6:	79 f0       	breq	.+30     	; 0x1ac6 <lcd_int32+0x58>
        bSigned = (qr.quot<0);
    1aa8:	6b 01       	movw	r12, r22
    1aaa:	7c 01       	movw	r14, r24
    1aac:	cc 24       	eor	r12, r12
    1aae:	f7 fc       	sbrc	r15, 7
    1ab0:	c3 94       	inc	r12
    1ab2:	dd 24       	eor	r13, r13
    1ab4:	ee 24       	eor	r14, r14
    1ab6:	ff 24       	eor	r15, r15
    1ab8:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
    1aba:	6b 01       	movw	r12, r22
    1abc:	7c 01       	movw	r14, r24
    1abe:	97 fd       	sbrc	r25, 7
    1ac0:	a3 c0       	rjmp	.+326    	; 0x1c08 <lcd_int32+0x19a>
    1ac2:	c7 01       	movw	r24, r14
    1ac4:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
    1ac6:	44 20       	and	r4, r4
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <lcd_int32+0x5e>
    1aca:	96 c0       	rjmp	.+300    	; 0x1bf8 <lcd_int32+0x18a>
    1acc:	9e 01       	movw	r18, r28
    1ace:	2f 5f       	subi	r18, 0xFF	; 255
    1ad0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad2:	59 01       	movw	r10, r18
    1ad4:	49 01       	movw	r8, r18
    1ad6:	66 24       	eor	r6, r6
    1ad8:	6a 94       	dec	r6
    1ada:	64 0c       	add	r6, r4
    1adc:	71 2c       	mov	r7, r1
    1ade:	3f ef       	ldi	r19, 0xFF	; 255
    1ae0:	63 1a       	sub	r6, r19
    1ae2:	73 0a       	sbc	r7, r19
    1ae4:	6a 0c       	add	r6, r10
    1ae6:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    1ae8:	2a e0       	ldi	r18, 0x0A	; 10
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e0       	ldi	r20, 0x00	; 0
    1aee:	50 e0       	ldi	r21, 0x00	; 0
    1af0:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__divmodsi4>
    1af4:	e6 2f       	mov	r30, r22
    1af6:	2a 8b       	std	Y+18, r18	; 0x12
    1af8:	3b 8b       	std	Y+19, r19	; 0x13
    1afa:	4c 8b       	std	Y+20, r20	; 0x14
    1afc:	5d 8b       	std	Y+21, r21	; 0x15
    1afe:	6a 89       	ldd	r22, Y+18	; 0x12
    1b00:	7b 89       	ldd	r23, Y+19	; 0x13
    1b02:	8c 89       	ldd	r24, Y+20	; 0x14
    1b04:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    1b06:	20 e3       	ldi	r18, 0x30	; 48
    1b08:	2e 0f       	add	r18, r30
    1b0a:	f4 01       	movw	r30, r8
    1b0c:	21 93       	st	Z+, r18
    1b0e:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
    1b10:	6e 16       	cp	r6, r30
    1b12:	7f 06       	cpc	r7, r31
    1b14:	49 f7       	brne	.-46     	; 0x1ae8 <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    1b16:	99 24       	eor	r9, r9
    1b18:	93 94       	inc	r9
    1b1a:	94 0c       	add	r9, r4
    1b1c:	f5 01       	movw	r30, r10
    1b1e:	e4 0d       	add	r30, r4
    1b20:	f1 1d       	adc	r31, r1
    1b22:	2e e2       	ldi	r18, 0x2E	; 46
    1b24:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
    1b26:	2a e0       	ldi	r18, 0x0A	; 10
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e0       	ldi	r20, 0x00	; 0
    1b2c:	50 e0       	ldi	r21, 0x00	; 0
    1b2e:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__divmodsi4>
    1b32:	e6 2f       	mov	r30, r22
    1b34:	2a 8b       	std	Y+18, r18	; 0x12
    1b36:	3b 8b       	std	Y+19, r19	; 0x13
    1b38:	4c 8b       	std	Y+20, r20	; 0x14
    1b3a:	5d 8b       	std	Y+21, r21	; 0x15
    1b3c:	6e 8b       	std	Y+22, r22	; 0x16
    1b3e:	7f 8b       	std	Y+23, r23	; 0x17
    1b40:	88 8f       	std	Y+24, r24	; 0x18
    1b42:	99 8f       	std	Y+25, r25	; 0x19
    1b44:	6a 89       	ldd	r22, Y+18	; 0x12
    1b46:	7b 89       	ldd	r23, Y+19	; 0x13
    1b48:	8c 89       	ldd	r24, Y+20	; 0x14
    1b4a:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    1b4c:	31 e0       	ldi	r19, 0x01	; 1
    1b4e:	39 0d       	add	r19, r9
    1b50:	d5 01       	movw	r26, r10
    1b52:	a9 0d       	add	r26, r9
    1b54:	b1 1d       	adc	r27, r1
    1b56:	e0 5d       	subi	r30, 0xD0	; 208
    1b58:	ec 93       	st	X, r30
    1b5a:	93 2e       	mov	r9, r19
        }while(qr.quot);
    1b5c:	61 15       	cp	r22, r1
    1b5e:	71 05       	cpc	r23, r1
    1b60:	81 05       	cpc	r24, r1
    1b62:	91 05       	cpc	r25, r1
    1b64:	01 f7       	brne	.-64     	; 0x1b26 <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
    1b66:	11 23       	and	r17, r17
    1b68:	61 f0       	breq	.+24     	; 0x1b82 <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1b6a:	51 10       	cpse	r5, r1
    1b6c:	4b c0       	rjmp	.+150    	; 0x1c04 <lcd_int32+0x196>
    1b6e:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    1b70:	31 17       	cp	r19, r17
    1b72:	38 f4       	brcc	.+14     	; 0x1b82 <lcd_int32+0x114>
    1b74:	f5 01       	movw	r30, r10
    1b76:	e3 0f       	add	r30, r19
    1b78:	f1 1d       	adc	r31, r1
    1b7a:	90 83       	st	Z, r25
    1b7c:	3f 5f       	subi	r19, 0xFF	; 255
    1b7e:	13 13       	cpse	r17, r19
    1b80:	f9 cf       	rjmp	.-14     	; 0x1b74 <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    1b82:	00 23       	and	r16, r16
    1b84:	31 f0       	breq	.+12     	; 0x1b92 <lcd_int32+0x124>
    1b86:	f5 01       	movw	r30, r10
    1b88:	e3 0f       	add	r30, r19
    1b8a:	f1 1d       	adc	r31, r1
    1b8c:	9d e2       	ldi	r25, 0x2D	; 45
    1b8e:	90 83       	st	Z, r25
    1b90:	3f 5f       	subi	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1b92:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1b94:	31 50       	subi	r19, 0x01	; 1
    1b96:	f5 01       	movw	r30, r10
    1b98:	e3 0f       	add	r30, r19
    1b9a:	f1 1d       	adc	r31, r1
    1b9c:	90 81       	ld	r25, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1b9e:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1ba0:	77 9b       	sbis	0x0e, 7	; 14
    1ba2:	fe cf       	rjmp	.-4      	; 0x1ba0 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
    1ba4:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1ba6:	77 9b       	sbis	0x0e, 7	; 14
    1ba8:	fe cf       	rjmp	.-4      	; 0x1ba6 <lcd_int32+0x138>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1baa:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1bae:	98 60       	ori	r25, 0x08	; 8
    1bb0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1bb4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1bb8:	97 7f       	andi	r25, 0xF7	; 247
    1bba:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1bbe:	85 ed       	ldi	r24, 0xD5	; 213
    1bc0:	8a 95       	dec	r24
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <lcd_int32+0x152>
    1bc4:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1bc6:	31 11       	cpse	r19, r1
    1bc8:	e5 cf       	rjmp	.-54     	; 0x1b94 <lcd_int32+0x126>

}
    1bca:	69 96       	adiw	r28, 0x19	; 25
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	1f 91       	pop	r17
    1bdc:	0f 91       	pop	r16
    1bde:	ff 90       	pop	r15
    1be0:	ef 90       	pop	r14
    1be2:	df 90       	pop	r13
    1be4:	cf 90       	pop	r12
    1be6:	bf 90       	pop	r11
    1be8:	af 90       	pop	r10
    1bea:	9f 90       	pop	r9
    1bec:	8f 90       	pop	r8
    1bee:	7f 90       	pop	r7
    1bf0:	6f 90       	pop	r6
    1bf2:	5f 90       	pop	r5
    1bf4:	4f 90       	pop	r4
    1bf6:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    1bf8:	91 2c       	mov	r9, r1
    1bfa:	9e 01       	movw	r18, r28
    1bfc:	2f 5f       	subi	r18, 0xFF	; 255
    1bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1c00:	59 01       	movw	r10, r18
    1c02:	91 cf       	rjmp	.-222    	; 0x1b26 <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1c04:	90 e3       	ldi	r25, 0x30	; 48
    1c06:	b4 cf       	rjmp	.-152    	; 0x1b70 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    1c08:	f0 94       	com	r15
    1c0a:	e0 94       	com	r14
    1c0c:	d0 94       	com	r13
    1c0e:	c0 94       	com	r12
    1c10:	c1 1c       	adc	r12, r1
    1c12:	d1 1c       	adc	r13, r1
    1c14:	e1 1c       	adc	r14, r1
    1c16:	f1 1c       	adc	r15, r1
    1c18:	54 cf       	rjmp	.-344    	; 0x1ac2 <lcd_int32+0x54>

00001c1a <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l, 
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
    1c1a:	5f 92       	push	r5
    1c1c:	6f 92       	push	r6
    1c1e:	7f 92       	push	r7
    1c20:	8f 92       	push	r8
    1c22:	9f 92       	push	r9
    1c24:	af 92       	push	r10
    1c26:	bf 92       	push	r11
    1c28:	cf 92       	push	r12
    1c2a:	df 92       	push	r13
    1c2c:	ef 92       	push	r14
    1c2e:	ff 92       	push	r15
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
    1c3c:	61 97       	sbiw	r28, 0x11	; 17
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
    1c48:	5c 01       	movw	r10, r24
    1c4a:	96 2e       	mov	r9, r22
    1c4c:	54 2e       	mov	r5, r20
    1c4e:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient 
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
    1c50:	8b 2c       	mov	r8, r11
    1c52:	88 1c       	adc	r8, r8
    1c54:	88 24       	eor	r8, r8
    1c56:	88 1c       	adc	r8, r8
    1c58:	78 2c       	mov	r7, r8
    1c5a:	9c 01       	movw	r18, r24
    1c5c:	97 fd       	sbrc	r25, 7
    1c5e:	9d c0       	rjmp	.+314    	; 0x1d9a <lcd_int16+0x180>
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
    1c60:	55 20       	and	r5, r5
    1c62:	09 f4       	brne	.+2      	; 0x1c66 <lcd_int16+0x4c>
    1c64:	8e c0       	rjmp	.+284    	; 0x1d82 <lcd_int16+0x168>
    1c66:	8e 01       	movw	r16, r28
    1c68:	0f 5f       	subi	r16, 0xFF	; 255
    1c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6c:	78 01       	movw	r14, r16
    1c6e:	cc 24       	eor	r12, r12
    1c70:	ca 94       	dec	r12
    1c72:	c5 0c       	add	r12, r5
    1c74:	d1 2c       	mov	r13, r1
    1c76:	8f ef       	ldi	r24, 0xFF	; 255
    1c78:	c8 1a       	sub	r12, r24
    1c7a:	d8 0a       	sbc	r13, r24
    1c7c:	c0 0e       	add	r12, r16
    1c7e:	d1 1e       	adc	r13, r17
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
    1c80:	6a e0       	ldi	r22, 0x0A	; 10
    1c82:	70 e0       	ldi	r23, 0x00	; 0
    1c84:	c9 01       	movw	r24, r18
    1c86:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__divmodhi4>
    1c8a:	46 2f       	mov	r20, r22
    1c8c:	24 2f       	mov	r18, r20
    1c8e:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
    1c90:	80 5d       	subi	r24, 0xD0	; 208
    1c92:	f7 01       	movw	r30, r14
    1c94:	81 93       	st	Z+, r24
    1c96:	7f 01       	movw	r14, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
    1c98:	ec 15       	cp	r30, r12
    1c9a:	fd 05       	cpc	r31, r13
    1c9c:	89 f7       	brne	.-30     	; 0x1c80 <lcd_int16+0x66>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
    1c9e:	ff 24       	eor	r15, r15
    1ca0:	f3 94       	inc	r15
    1ca2:	f5 0c       	add	r15, r5
    1ca4:	f8 01       	movw	r30, r16
    1ca6:	e5 0d       	add	r30, r5
    1ca8:	f1 1d       	adc	r31, r1
    1caa:	8e e2       	ldi	r24, 0x2E	; 46
    1cac:	80 83       	st	Z, r24
    1cae:	01 c0       	rjmp	.+2      	; 0x1cb2 <lcd_int16+0x98>

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
    1cb0:	f9 2e       	mov	r15, r25
        }

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
    1cb2:	6a e0       	ldi	r22, 0x0A	; 10
    1cb4:	70 e0       	ldi	r23, 0x00	; 0
    1cb6:	c9 01       	movw	r24, r18
    1cb8:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__divmodhi4>
    1cbc:	46 2f       	mov	r20, r22
    1cbe:	24 2f       	mov	r18, r20
    1cc0:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
    1cc2:	91 e0       	ldi	r25, 0x01	; 1
    1cc4:	9f 0d       	add	r25, r15
    1cc6:	f8 01       	movw	r30, r16
    1cc8:	ef 0d       	add	r30, r15
    1cca:	f1 1d       	adc	r31, r1
    1ccc:	80 5d       	subi	r24, 0xD0	; 208
    1cce:	80 83       	st	Z, r24
        }
        while(qr.quot);
    1cd0:	21 15       	cp	r18, r1
    1cd2:	31 05       	cpc	r19, r1
    1cd4:	69 f7       	brne	.-38     	; 0x1cb0 <lcd_int16+0x96>

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
    1cd6:	61 10       	cpse	r6, r1
    1cd8:	59 c0       	rjmp	.+178    	; 0x1d8c <lcd_int16+0x172>
    1cda:	b7 fc       	sbrc	r11, 7
    1cdc:	63 c0       	rjmp	.+198    	; 0x1da4 <lcd_int16+0x18a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    1cde:	99 20       	and	r9, r9
    1ce0:	b1 f0       	breq	.+44     	; 0x1d0e <lcd_int16+0xf4>
    1ce2:	68 2d       	mov	r22, r8
    1ce4:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    1ce6:	80 e2       	ldi	r24, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    1ce8:	29 2f       	mov	r18, r25
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	49 2d       	mov	r20, r9
    1cee:	50 e0       	ldi	r21, 0x00	; 0
    1cf0:	46 1b       	sub	r20, r22
    1cf2:	57 0b       	sbc	r21, r23
    1cf4:	24 17       	cp	r18, r20
    1cf6:	35 07       	cpc	r19, r21
    1cf8:	54 f4       	brge	.+20     	; 0x1d0e <lcd_int16+0xf4>
    1cfa:	9f 5f       	subi	r25, 0xFF	; 255
    1cfc:	f8 01       	movw	r30, r16
    1cfe:	e2 0f       	add	r30, r18
    1d00:	f3 1f       	adc	r31, r19
    1d02:	80 83       	st	Z, r24
    1d04:	29 2f       	mov	r18, r25
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	24 17       	cp	r18, r20
    1d0a:	35 07       	cpc	r19, r21
    1d0c:	b4 f3       	brlt	.-20     	; 0x1cfa <lcd_int16+0xe0>
        }

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}
    1d0e:	77 20       	and	r7, r7
    1d10:	31 f0       	breq	.+12     	; 0x1d1e <lcd_int16+0x104>
    1d12:	f8 01       	movw	r30, r16
    1d14:	e9 0f       	add	r30, r25
    1d16:	f1 1d       	adc	r31, r1
    1d18:	8d e2       	ldi	r24, 0x2D	; 45
    1d1a:	80 83       	st	Z, r24
    1d1c:	9f 5f       	subi	r25, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1d1e:	21 e0       	ldi	r18, 0x01	; 1

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1d20:	91 50       	subi	r25, 0x01	; 1
    1d22:	f8 01       	movw	r30, r16
    1d24:	e9 0f       	add	r30, r25
    1d26:	f1 1d       	adc	r31, r1
    1d28:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1d2a:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1d2c:	77 9b       	sbis	0x0e, 7	; 14
    1d2e:	fe cf       	rjmp	.-4      	; 0x1d2c <lcd_int16+0x112>
  SPDR = byte;                        //send payload
    1d30:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1d32:	77 9b       	sbis	0x0e, 7	; 14
    1d34:	fe cf       	rjmp	.-4      	; 0x1d32 <lcd_int16+0x118>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1d36:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1d3a:	88 60       	ori	r24, 0x08	; 8
    1d3c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1d40:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1d44:	87 7f       	andi	r24, 0xF7	; 247
    1d46:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1d4a:	f5 ed       	ldi	r31, 0xD5	; 213
    1d4c:	fa 95       	dec	r31
    1d4e:	f1 f7       	brne	.-4      	; 0x1d4c <lcd_int16+0x132>
    1d50:	00 00       	nop

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1d52:	91 11       	cpse	r25, r1
    1d54:	e5 cf       	rjmp	.-54     	; 0x1d20 <lcd_int16+0x106>
}
    1d56:	61 96       	adiw	r28, 0x11	; 17
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	cd bf       	out	0x3d, r28	; 61
    1d62:	df 91       	pop	r29
    1d64:	cf 91       	pop	r28
    1d66:	1f 91       	pop	r17
    1d68:	0f 91       	pop	r16
    1d6a:	ff 90       	pop	r15
    1d6c:	ef 90       	pop	r14
    1d6e:	df 90       	pop	r13
    1d70:	cf 90       	pop	r12
    1d72:	bf 90       	pop	r11
    1d74:	af 90       	pop	r10
    1d76:	9f 90       	pop	r9
    1d78:	8f 90       	pop	r8
    1d7a:	7f 90       	pop	r7
    1d7c:	6f 90       	pop	r6
    1d7e:	5f 90       	pop	r5
    1d80:	08 95       	ret
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
    1d82:	f1 2c       	mov	r15, r1
    1d84:	8e 01       	movw	r16, r28
    1d86:	0f 5f       	subi	r16, 0xFF	; 255
    1d88:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8a:	93 cf       	rjmp	.-218    	; 0x1cb2 <lcd_int16+0x98>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    1d8c:	99 20       	and	r9, r9
    1d8e:	09 f4       	brne	.+2      	; 0x1d92 <lcd_int16+0x178>
    1d90:	be cf       	rjmp	.-132    	; 0x1d0e <lcd_int16+0xf4>
    1d92:	68 2d       	mov	r22, r8
    1d94:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    1d96:	80 e3       	ldi	r24, 0x30	; 48
    1d98:	a7 cf       	rjmp	.-178    	; 0x1ce8 <lcd_int16+0xce>
    1d9a:	22 27       	eor	r18, r18
    1d9c:	33 27       	eor	r19, r19
    1d9e:	28 1b       	sub	r18, r24
    1da0:	39 0b       	sbc	r19, r25
    1da2:	5e cf       	rjmp	.-324    	; 0x1c60 <lcd_int16+0x46>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    1da4:	f3 94       	inc	r15
    1da6:	f3 94       	inc	r15
    1da8:	f8 01       	movw	r30, r16
    1daa:	e9 0f       	add	r30, r25
    1dac:	f1 1d       	adc	r31, r1
    1dae:	8d e2       	ldi	r24, 0x2D	; 45
    1db0:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    1db2:	99 20       	and	r9, r9
    1db4:	59 f0       	breq	.+22     	; 0x1dcc <lcd_int16+0x1b2>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    1db6:	2f 2d       	mov	r18, r15
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	49 2d       	mov	r20, r9
    1dbc:	50 e0       	ldi	r21, 0x00	; 0
    1dbe:	24 17       	cp	r18, r20
    1dc0:	35 07       	cpc	r19, r21
    1dc2:	24 f4       	brge	.+8      	; 0x1dcc <lcd_int16+0x1b2>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    1dc4:	9f 2d       	mov	r25, r15
                bSigned = 0;
    1dc6:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    1dc8:	80 e2       	ldi	r24, 0x20	; 32
    1dca:	97 cf       	rjmp	.-210    	; 0x1cfa <lcd_int16+0xe0>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    1dcc:	9f 2d       	mov	r25, r15
    1dce:	a7 cf       	rjmp	.-178    	; 0x1d1e <lcd_int16+0x104>

00001dd0 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
    1dd0:	1f 92       	push	r1
    1dd2:	0f 92       	push	r0
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	0f 92       	push	r0
    1dd8:	11 24       	eor	r1, r1
    1dda:	0b b6       	in	r0, 0x3b	; 59
    1ddc:	0f 92       	push	r0
    1dde:	2f 93       	push	r18
    1de0:	3f 93       	push	r19
    1de2:	8f 93       	push	r24
    1de4:	9f 93       	push	r25
    1de6:	af 93       	push	r26
    1de8:	bf 93       	push	r27
    1dea:	ef 93       	push	r30
    1dec:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    1dee:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1df2:	8e 2f       	mov	r24, r30
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	fc 01       	movw	r30, r24
    1df8:	38 97       	sbiw	r30, 0x08	; 8
    1dfa:	e1 35       	cpi	r30, 0x51	; 81
    1dfc:	f1 05       	cpc	r31, r1
    1dfe:	b0 f0       	brcs	.+44     	; 0x1e2c <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
    1e00:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1e04:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <twi_state>
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
    1e08:	84 e0       	ldi	r24, 0x04	; 4
    1e0a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  }//switch
}//TWI_isr
    1e0e:	ff 91       	pop	r31
    1e10:	ef 91       	pop	r30
    1e12:	bf 91       	pop	r27
    1e14:	af 91       	pop	r26
    1e16:	9f 91       	pop	r25
    1e18:	8f 91       	pop	r24
    1e1a:	3f 91       	pop	r19
    1e1c:	2f 91       	pop	r18
    1e1e:	0f 90       	pop	r0
    1e20:	0b be       	out	0x3b, r0	; 59
    1e22:	0f 90       	pop	r0
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	0f 90       	pop	r0
    1e28:	1f 90       	pop	r1
    1e2a:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    1e2c:	ec 52       	subi	r30, 0x2C	; 44
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	0c 94 97 11 	jmp	0x232e	; 0x232e <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
    1e34:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <twi_buf_ptr.1780>
    1e38:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <twi_buf>
    1e3c:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <twi_buf+0x1>
    1e40:	e8 0f       	add	r30, r24
    1e42:	f1 1d       	adc	r31, r1
    1e44:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    1e48:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
    1e4a:	84 e9       	ldi	r24, 0x94	; 148
    1e4c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;      
    1e50:	de cf       	rjmp	.-68     	; 0x1e0e <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
    1e52:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <twi_bus_addr>
    1e56:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
      twi_buf_ptr = 0;      //initalize buffer pointer 
    1e5a:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <twi_buf_ptr.1780>
      TWCR = TWCR_SEND;     //send SLA+RW
    1e5e:	85 e8       	ldi	r24, 0x85	; 133
    1e60:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
    1e64:	d4 cf       	rjmp	.-88     	; 0x1e0e <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
    1e66:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <twi_buf_ptr.1780>
    1e6a:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <twi_msg_size>
    1e6e:	89 17       	cp	r24, r25
    1e70:	60 f7       	brcc	.-40     	; 0x1e4a <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
    1e72:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <twi_buf>
    1e76:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <twi_buf+0x1>
    1e7a:	91 e0       	ldi	r25, 0x01	; 1
    1e7c:	98 0f       	add	r25, r24
    1e7e:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <twi_buf_ptr.1780>
    1e82:	e8 0f       	add	r30, r24
    1e84:	f1 1d       	adc	r31, r1
    1e86:	80 81       	ld	r24, Z
    1e88:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
        TWCR = TWCR_SEND;               //send next byte 
    1e8c:	85 e8       	ldi	r24, 0x85	; 133
    1e8e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1e92:	bd cf       	rjmp	.-134    	; 0x1e0e <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
    1e94:	85 ea       	ldi	r24, 0xA5	; 165
    1e96:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
    1e9a:	b9 cf       	rjmp	.-142    	; 0x1e0e <__vector_33+0x3e>
    1e9c:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <twi_buf_ptr.1780>
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    1ea0:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <twi_msg_size>
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	28 17       	cp	r18, r24
    1eac:	39 07       	cpc	r19, r25
    1eae:	dc f4       	brge	.+54     	; 0x1ee6 <__vector_33+0x116>
    1eb0:	85 ec       	ldi	r24, 0xC5	; 197
    1eb2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1eb6:	ab cf       	rjmp	.-170    	; 0x1e0e <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    1eb8:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <twi_buf>
    1ebc:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <twi_buf+0x1>
    1ec0:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <twi_buf_ptr.1780>
    1ec4:	21 e0       	ldi	r18, 0x01	; 1
    1ec6:	28 0f       	add	r18, r24
    1ec8:	20 93 98 01 	sts	0x0198, r18	; 0x800198 <twi_buf_ptr.1780>
    1ecc:	e8 0f       	add	r30, r24
    1ece:	f1 1d       	adc	r31, r1
    1ed0:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    1ed4:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    1ed6:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <twi_msg_size>
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	28 17       	cp	r18, r24
    1ee2:	39 07       	cpc	r19, r25
    1ee4:	2c f3       	brlt	.-54     	; 0x1eb0 <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
    1ee6:	85 e8       	ldi	r24, 0x85	; 133
    1ee8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1eec:	90 cf       	rjmp	.-224    	; 0x1e0e <__vector_33+0x3e>

00001eee <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1eee:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
}
    1ef2:	81 70       	andi	r24, 0x01	; 1
    1ef4:	08 95       	ret

00001ef6 <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1ef6:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
    1efa:	90 fd       	sbrc	r25, 0
    1efc:	fc cf       	rjmp	.-8      	; 0x1ef6 <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
    1efe:	8e 7f       	andi	r24, 0xFE	; 254
    1f00:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <twi_bus_addr>
  twi_buf = twi_data;                   //load pointer to write buffer
    1f04:	70 93 d2 01 	sts	0x01D2, r23	; 0x8001d2 <twi_buf+0x1>
    1f08:	60 93 d1 01 	sts	0x01D1, r22	; 0x8001d1 <twi_buf>
  twi_msg_size = byte_cnt;              //load size of xfer 
    1f0c:	40 93 d4 01 	sts	0x01D4, r20	; 0x8001d4 <twi_msg_size>
  TWCR = TWCR_START;                    //initiate START
    1f10:	85 ea       	ldi	r24, 0xA5	; 165
    1f12:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1f16:	08 95       	ret

00001f18 <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1f18:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
    1f1c:	90 fd       	sbrc	r25, 0
    1f1e:	fc cf       	rjmp	.-8      	; 0x1f18 <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
    1f20:	81 60       	ori	r24, 0x01	; 1
    1f22:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <twi_bus_addr>
  twi_buf = twi_data;                  //load pointer to write buffer
    1f26:	70 93 d2 01 	sts	0x01D2, r23	; 0x8001d2 <twi_buf+0x1>
    1f2a:	60 93 d1 01 	sts	0x01D1, r22	; 0x8001d1 <twi_buf>
  twi_msg_size = byte_cnt;             //load size of xfer 
    1f2e:	40 93 d4 01 	sts	0x01D4, r20	; 0x8001d4 <twi_msg_size>
  TWCR = TWCR_START;                   //initiate START
    1f32:	85 ea       	ldi	r24, 0xA5	; 165
    1f34:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1f38:	08 95       	ret

00001f3a <init_twi>:
//10K pullups are present on the board
//for alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
    1f3a:	8f ef       	ldi	r24, 0xFF	; 255
    1f3c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  TWSR = 0x00;     //prescaler value = 1
    1f40:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  TWBR = TWI_TWBR; //defined in twi_master.h 
    1f44:	8c e0       	ldi	r24, 0x0C	; 12
    1f46:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    1f4a:	08 95       	ret

00001f4c <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1f4c:	5d 9b       	sbis	0x0b, 5	; 11
    1f4e:	fe cf       	rjmp	.-4      	; 0x1f4c <uart_putc>
    UDR0 = data;    // Send data byte
    1f50:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1f52:	5d 9b       	sbis	0x0b, 5	; 11
    1f54:	fe cf       	rjmp	.-4      	; 0x1f52 <uart_putc+0x6>
}
    1f56:	08 95       	ret

00001f58 <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    1f58:	fc 01       	movw	r30, r24
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
    1f5a:	90 81       	ld	r25, Z
    1f5c:	99 23       	and	r25, r25
    1f5e:	49 f0       	breq	.+18     	; 0x1f72 <uart_puts+0x1a>
    1f60:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1f62:	5d 9b       	sbis	0x0b, 5	; 11
    1f64:	fe cf       	rjmp	.-4      	; 0x1f62 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
    1f66:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1f68:	5d 9b       	sbis	0x0b, 5	; 11
    1f6a:	fe cf       	rjmp	.-4      	; 0x1f68 <uart_puts+0x10>
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
    1f6c:	91 91       	ld	r25, Z+
    1f6e:	91 11       	cpse	r25, r1
    1f70:	f8 cf       	rjmp	.-16     	; 0x1f62 <uart_puts+0xa>
    1f72:	08 95       	ret

00001f74 <uart_puts_p>:
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
    1f74:	9c 01       	movw	r18, r24
    1f76:	fc 01       	movw	r30, r24
    1f78:	44 91       	lpm	r20, Z
    1f7a:	44 23       	and	r20, r20
    1f7c:	69 f0       	breq	.+26     	; 0x1f98 <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
    1f7e:	01 96       	adiw	r24, 0x01	; 1
    1f80:	f9 01       	movw	r30, r18
    1f82:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1f84:	5d 9b       	sbis	0x0b, 5	; 11
    1f86:	fe cf       	rjmp	.-4      	; 0x1f84 <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
    1f88:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1f8a:	5d 9b       	sbis	0x0b, 5	; 11
    1f8c:	fe cf       	rjmp	.-4      	; 0x1f8a <uart_puts_p+0x16>
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
    1f8e:	9c 01       	movw	r18, r24
    1f90:	fc 01       	movw	r30, r24
    1f92:	44 91       	lpm	r20, Z
    1f94:	41 11       	cpse	r20, r1
    1f96:	f3 cf       	rjmp	.-26     	; 0x1f7e <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
    1f98:	08 95       	ret

00001f9a <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
    1f9a:	8a b1       	in	r24, 0x0a	; 10
    1f9c:	88 69       	ori	r24, 0x98	; 152
    1f9e:	8a b9       	out	0x0a, r24	; 10
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);  //INTERRUPS DISABLED!!!

//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) ;
//async operation, no parity,  one stop bit, 8-bit characters
UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
    1fa0:	e5 e9       	ldi	r30, 0x95	; 149
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	86 60       	ori	r24, 0x06	; 6
    1fa8:	80 83       	st	Z, r24
UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
    1faa:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
    1fae:	87 e6       	ldi	r24, 0x67	; 103
    1fb0:	89 b9       	out	0x09, r24	; 9
    1fb2:	08 95       	ret

00001fb4 <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    1fb4:	80 e8       	ldi	r24, 0x80	; 128
    1fb6:	9e e3       	ldi	r25, 0x3E	; 62
    1fb8:	02 c0       	rjmp	.+4      	; 0x1fbe <uart_getc+0xa>
    1fba:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
    1fbc:	21 f0       	breq	.+8      	; 0x1fc6 <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    1fbe:	5f 9b       	sbis	0x0b, 7	; 11
    1fc0:	fc cf       	rjmp	.-8      	; 0x1fba <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
    1fc2:	8c b1       	in	r24, 0x0c	; 12
    1fc4:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
    1fc8:	08 95       	ret

00001fca <lm73_temp_convert>:
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	08 95       	ret

00001fce <main>:

}

//***********************************************************************************
int main()
{
    1fce:	cf 93       	push	r28
    1fd0:	df 93       	push	r29
    1fd2:	00 d0       	rcall	.+0      	; 0x1fd4 <main+0x6>
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
init();
    1fd8:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <init>
uint8_t  alarmON = OFF;
uint8_t  alarmSET = ON;
uint8_t  alarmOffset = 0;

//set LM73 mode for reading temperature by loading pointer register
lm73_wr_buf[0] = (&lm73_temp);		//load lm73_wr_buf[0] with temperature pointer address
    1fdc:	ce 01       	movw	r24, r28
    1fde:	01 96       	adiw	r24, 0x01	; 1
    1fe0:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lm73_wr_buf>
twi_start_wr(LM73_WRITE,lm73_wr_buf,2); //start the TWI write process
    1fe4:	42 e0       	ldi	r20, 0x02	; 2
    1fe6:	65 e2       	ldi	r22, 0x25	; 37
    1fe8:	72 e0       	ldi	r23, 0x02	; 2
    1fea:	80 e9       	ldi	r24, 0x90	; 144
    1fec:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ff0:	8f e3       	ldi	r24, 0x3F	; 63
    1ff2:	9f e1       	ldi	r25, 0x1F	; 31
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	f1 f7       	brne	.-4      	; 0x1ff4 <main+0x26>
    1ff8:	00 c0       	rjmp	.+0      	; 0x1ffa <main+0x2c>
    1ffa:	00 00       	nop
_delay_ms(2);    			//wait for the xfer to finish

clear_display(); //clean up the display
    1ffc:	0e 94 c8 0b 	call	0x1790	; 0x1790 <clear_display>
uint8_t  currentDisplayDigit = 0;       //Current LED to display on (0 == 1's digit
uint16_t displayValue = 0;	        //Current value to display on LEDs
uint16_t alarmValue = 1;	        //Current value held by the alarm
uint8_t  alarmActivated = OFF;		//If the Alarm is ON or OFF, initialize to OFF
uint8_t  alarmON = OFF;
uint8_t  alarmSET = ON;
    2000:	88 24       	eor	r8, r8
    2002:	83 94       	inc	r8
uint16_t lm73_temp;  			//a place to assemble the temperature from the lm73
uint8_t  currentButtonsPressed = 0;	//Stores buttons that are currently pressed (holds value when pressed)
uint8_t  currentDisplayDigit = 0;       //Current LED to display on (0 == 1's digit
uint16_t displayValue = 0;	        //Current value to display on LEDs
uint16_t alarmValue = 1;	        //Current value held by the alarm
uint8_t  alarmActivated = OFF;		//If the Alarm is ON or OFF, initialize to OFF
    2004:	d1 2c       	mov	r13, r1
init();
uint16_t lm73_temp;  			//a place to assemble the temperature from the lm73
uint8_t  currentButtonsPressed = 0;	//Stores buttons that are currently pressed (holds value when pressed)
uint8_t  currentDisplayDigit = 0;       //Current LED to display on (0 == 1's digit
uint16_t displayValue = 0;	        //Current value to display on LEDs
uint16_t alarmValue = 1;	        //Current value held by the alarm
    2006:	aa 24       	eor	r10, r10
    2008:	a3 94       	inc	r10
    200a:	b1 2c       	mov	r11, r1
{
init();
uint16_t lm73_temp;  			//a place to assemble the temperature from the lm73
uint8_t  currentButtonsPressed = 0;	//Stores buttons that are currently pressed (holds value when pressed)
uint8_t  currentDisplayDigit = 0;       //Current LED to display on (0 == 1's digit
uint16_t displayValue = 0;	        //Current value to display on LEDs
    200c:	00 e0       	ldi	r16, 0x00	; 0
    200e:	f1 2c       	mov	r15, r1
int main()
{
init();
uint16_t lm73_temp;  			//a place to assemble the temperature from the lm73
uint8_t  currentButtonsPressed = 0;	//Stores buttons that are currently pressed (holds value when pressed)
uint8_t  currentDisplayDigit = 0;       //Current LED to display on (0 == 1's digit
    2010:	e1 2c       	mov	r14, r1
//***********************************************************************************
int main()
{
init();
uint16_t lm73_temp;  			//a place to assemble the temperature from the lm73
uint8_t  currentButtonsPressed = 0;	//Stores buttons that are currently pressed (holds value when pressed)
    2012:	10 e0       	ldi	r17, 0x00	; 0
    2014:	b4 e6       	ldi	r27, 0x64	; 100
    2016:	9b 2e       	mov	r9, r27
    2018:	84 ec       	ldi	r24, 0xC4	; 196
    201a:	c8 2e       	mov	r12, r24
      if(alarmActivated)
      {
        TCCR1B &= (0 << CS11);
        TCCR1B &= (0 << CS12);
        OCR3C   = 0;
	snoozeFlag = SNOOZEON;	
    201c:	77 24       	eor	r7, r7
    201e:	73 94       	inc	r7
  }else if(currentButtonsPressed == 0x02)
  {
      alarmActivated = OFF;
      alarmGlobal    = OFF;
      snoozeFlag = SNOOZEOFF;
      segment_data[2] |= (0xFF);      
    2020:	55 24       	eor	r5, r5
    2022:	5a 94       	dec	r5
  if(ADCH >= 400)
  {
    OCR2 = 5;
  }else if(ADCH < 20)
  {
    OCR2 = 240;	  
    2024:	90 ef       	ldi	r25, 0xF0	; 240
    2026:	69 2e       	mov	r6, r25
    2028:	14 c0       	rjmp	.+40     	; 0x2052 <main+0x84>
    202a:	63 bc       	out	0x23, r6	; 35
    OCR2 = 255- ADCH;
  }
  //OCR2  = ADCH//395 + (2 * (450 - ADCH));	   

  // Turn ON alarm if SNOOZE timedout
  if(snoozeFlag == SNOOZEALARM)
    202c:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <snoozeFlag>
    2030:	82 30       	cpi	r24, 0x02	; 2
    2032:	09 f4       	brne	.+2      	; 0x2036 <main+0x68>
    2034:	4f c0       	rjmp	.+158    	; 0x20d4 <main+0x106>
    alarmGlobal = ON;
  }

  // Alarm is reached and activated, either by timer or by snooze reached
  // Play alarm
  if(alarmActivated && ((currentTime == alarmValue) || (snoozeFlag == SNOOZEALARM)) && (snoozeFlag != SNOOZEON) && (currentButtonsPressed != 0x01))
    2036:	d1 10       	cpse	r13, r1
    2038:	4f c0       	rjmp	.+158    	; 0x20d8 <main+0x10a>
  {
    music_on();
    alarmSET = OFF; 
  }
  
  LocalTempSensor(lm73_temp);
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	9a 81       	ldd	r25, Y+2	; 0x02
    203e:	0e 94 81 09 	call	0x1302	; 0x1302 <LocalTempSensor>
  // Turn minute input to HH:MM 
  displayValue = ClockCounterCorrection(displayValue);
  
  // Display to LED screen
  segsum(displayValue);						//Divide the decimal value to the segment_data[] array
    2042:	80 2f       	mov	r24, r16
    2044:	9f 2d       	mov	r25, r15
    2046:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <segsum>
  currentDisplayDigit = displaySwitch(currentDisplayDigit);	//Display the current values stored in segment_data[] to current LED 
    204a:	8e 2d       	mov	r24, r14
    204c:	0e 94 92 07 	call	0xf24	; 0xf24 <displaySwitch>
    2050:	e8 2e       	mov	r14, r24

while(1){
  
  // Button Functionality
  // Pole Buttons
  currentButtonsPressed = ButtonCheck(currentButtonsPressed);
    2052:	81 2f       	mov	r24, r17
    2054:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <ButtonCheck>
    2058:	18 2f       	mov	r17, r24
  
  // Buttons (1):
  // Enter Setting mode (sets time or alarm)
  if(currentButtonsPressed == 0x01)
    205a:	81 30       	cpi	r24, 0x01	; 1
    205c:	09 f4       	brne	.+2      	; 0x2060 <main+0x92>
    205e:	af c0       	rjmp	.+350    	; 0x21be <main+0x1f0>
      buttonPos    = 1;
      alarmValue   = AlarmSetMode(alarmOffset);
      displayValue = alarmValue;   
  // Buttons (2):
  // Restart Mode (restarts everything) 
  }else if(currentButtonsPressed == 0x02)
    2060:	82 30       	cpi	r24, 0x02	; 2
    2062:	09 f4       	brne	.+2      	; 0x2066 <main+0x98>
    2064:	ed c0       	rjmp	.+474    	; 0x2240 <main+0x272>
      alarmON = OFF;
      clear_display();
  
  // Buttons (1, 2):
  // Sets Alarm 
  }else if(currentButtonsPressed == 0x03)
    2066:	83 30       	cpi	r24, 0x03	; 3
    2068:	09 f4       	brne	.+2      	; 0x206c <main+0x9e>
    206a:	5d c0       	rjmp	.+186    	; 0x2126 <main+0x158>
      segment_data[2] &= 0xFB;      
      currentButtonsPressed = (0x00);
  
  // Buttons (3):
  // SNOOZE if Alarm is Set/On    
  }else if(currentButtonsPressed == 0x04)
    206c:	84 30       	cpi	r24, 0x04	; 4
    206e:	09 f4       	brne	.+2      	; 0x2072 <main+0xa4>
    2070:	7c c0       	rjmp	.+248    	; 0x216a <main+0x19c>
      }
      currentButtonsPressed = (0x00);
  
  // Buttons (1, 3):
  // Set Time
  }else if(currentButtonsPressed == 0x05)
    2072:	85 30       	cpi	r24, 0x05	; 5
    2074:	09 f4       	brne	.+2      	; 0x2078 <main+0xaa>
    2076:	c4 c0       	rjmp	.+392    	; 0x2200 <main+0x232>
    currentTime = AlarmSetMode(alarmOffset);
    currentButtonsPressed = (0x00);
  
  // Display CurrentTime
  
  }else if(currentButtonsPressed == 0x08)
    2078:	88 30       	cpi	r24, 0x08	; 8
    207a:	09 f4       	brne	.+2      	; 0x207e <main+0xb0>
    207c:	f6 c0       	rjmp	.+492    	; 0x226a <main+0x29c>
  {
    //alarmOffset ^= 0x01;
    //currentButtonsPressed = (0x00);
  }else{
    displayValue = currentTime;
    207e:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <currentTime>
    2082:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <currentTime+0x1>
    currentButtonsPressed = (0x00);  
    buttonPos = 0 ;  
    2086:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <__data_end>
    208a:	9a 01       	movw	r18, r20
    208c:	a9 e8       	ldi	r26, 0x89	; 137
    208e:	b8 e8       	ldi	r27, 0x88	; 136
    2090:	0e 94 a0 11 	call	0x2340	; 0x2340 <__umulhisi3>
    2094:	96 95       	lsr	r25
    2096:	87 95       	ror	r24
    2098:	92 95       	swap	r25
    209a:	82 95       	swap	r24
    209c:	8f 70       	andi	r24, 0x0F	; 15
    209e:	89 27       	eor	r24, r25
    20a0:	9f 70       	andi	r25, 0x0F	; 15
    20a2:	89 27       	eor	r24, r25
    20a4:	c8 9e       	mul	r12, r24
    20a6:	40 0d       	add	r20, r0
    20a8:	11 24       	eor	r1, r1
    20aa:	50 e0       	ldi	r21, 0x00	; 0
    20ac:	89 9d       	mul	r24, r9
    20ae:	40 0d       	add	r20, r0
    20b0:	51 1d       	adc	r21, r1
    20b2:	11 24       	eor	r1, r1
    20b4:	04 2f       	mov	r16, r20
    20b6:	f5 2e       	mov	r15, r21
  {
    //alarmOffset ^= 0x01;
    //currentButtonsPressed = (0x00);
  }else{
    displayValue = currentTime;
    currentButtonsPressed = (0x00);  
    20b8:	10 e0       	ldi	r17, 0x00	; 0
    buttonPos = 0 ;  
  }

  // Brightness of LED based off Photoresistor
  if(ADCH >= 400)
    20ba:	85 b1       	in	r24, 0x05	; 5
  {
    OCR2 = 5;
  }else if(ADCH < 20)
    20bc:	85 b1       	in	r24, 0x05	; 5
    20be:	84 31       	cpi	r24, 0x14	; 20
    20c0:	08 f4       	brcc	.+2      	; 0x20c4 <main+0xf6>
    20c2:	b3 cf       	rjmp	.-154    	; 0x202a <main+0x5c>
  {
    OCR2 = 240;	  
  }else{
    OCR2 = 255- ADCH;
    20c4:	85 b1       	in	r24, 0x05	; 5
    20c6:	80 95       	com	r24
    20c8:	83 bd       	out	0x23, r24	; 35
  }
  //OCR2  = ADCH//395 + (2 * (450 - ADCH));	   

  // Turn ON alarm if SNOOZE timedout
  if(snoozeFlag == SNOOZEALARM)
    20ca:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <snoozeFlag>
    20ce:	82 30       	cpi	r24, 0x02	; 2
    20d0:	09 f0       	breq	.+2      	; 0x20d4 <main+0x106>
    20d2:	b1 cf       	rjmp	.-158    	; 0x2036 <main+0x68>
  {
    alarmActivated = ON;
    alarmGlobal = ON;
    20d4:	70 92 7d 01 	sts	0x017D, r7	; 0x80017d <alarmGlobal>
  }

  // Alarm is reached and activated, either by timer or by snooze reached
  // Play alarm
  if(alarmActivated && ((currentTime == alarmValue) || (snoozeFlag == SNOOZEALARM)) && (snoozeFlag != SNOOZEON) && (currentButtonsPressed != 0x01))
    20d8:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <currentTime>
    20dc:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <currentTime+0x1>
    20e0:	a8 16       	cp	r10, r24
    20e2:	b9 06       	cpc	r11, r25
    20e4:	49 f0       	breq	.+18     	; 0x20f8 <main+0x12a>
    20e6:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <snoozeFlag>
    20ea:	82 30       	cpi	r24, 0x02	; 2
    20ec:	29 f0       	breq	.+10     	; 0x20f8 <main+0x12a>
    OCR3C   = VolumeSetMode();
    alarmON = ON;
  }
  
  // Display 'ALARM' on LCD
  if(alarmActivated && alarmSET)
    20ee:	81 10       	cpse	r8, r1
    20f0:	14 c0       	rjmp	.+40     	; 0x211a <main+0x14c>
    20f2:	dd 24       	eor	r13, r13
    20f4:	d3 94       	inc	r13
    20f6:	a1 cf       	rjmp	.-190    	; 0x203a <main+0x6c>
    alarmGlobal = ON;
  }

  // Alarm is reached and activated, either by timer or by snooze reached
  // Play alarm
  if(alarmActivated && ((currentTime == alarmValue) || (snoozeFlag == SNOOZEALARM)) && (snoozeFlag != SNOOZEON) && (currentButtonsPressed != 0x01))
    20f8:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <snoozeFlag>
    20fc:	81 30       	cpi	r24, 0x01	; 1
    20fe:	b9 f3       	breq	.-18     	; 0x20ee <main+0x120>
    2100:	11 30       	cpi	r17, 0x01	; 1
    2102:	a9 f3       	breq	.-22     	; 0x20ee <main+0x120>
  {
    TCCR1B |= (1 << WGM12) | (1<<CS11) | (1<<CS10); 		//CTC mode clear at TOP immediate
    2104:	8e b5       	in	r24, 0x2e	; 46
    2106:	8b 60       	ori	r24, 0x0B	; 11
    2108:	8e bd       	out	0x2e, r24	; 46
    OCR3C   = VolumeSetMode();
    210a:	0e 94 4d 09 	call	0x129a	; 0x129a <VolumeSetMode>
    210e:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    2112:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    alarmON = ON;
  }
  
  // Display 'ALARM' on LCD
  if(alarmActivated && alarmSET)
    2116:	88 20       	and	r8, r8
    2118:	61 f3       	breq	.-40     	; 0x20f2 <main+0x124>
  {
    music_on();
    211a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <music_on>
    211e:	dd 24       	eor	r13, r13
    2120:	d3 94       	inc	r13
    alarmSET = OFF; 
    2122:	81 2c       	mov	r8, r1
    2124:	8a cf       	rjmp	.-236    	; 0x203a <main+0x6c>
  // Buttons (1, 2):
  // Sets Alarm 
  }else if(currentButtonsPressed == 0x03)
  {
      alarmActivated = ON;
      alarmGlobal = ON;
    2126:	70 92 7d 01 	sts	0x017D, r7	; 0x80017d <alarmGlobal>
      segment_data[2] &= 0xFB;      
    212a:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <segment_data+0x2>
    212e:	8b 7f       	andi	r24, 0xFB	; 251
    2130:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <segment_data+0x2>
    2134:	20 2f       	mov	r18, r16
    2136:	3f 2d       	mov	r19, r15
    2138:	a9 e8       	ldi	r26, 0x89	; 137
    213a:	b8 e8       	ldi	r27, 0x88	; 136
    213c:	0e 94 a0 11 	call	0x2340	; 0x2340 <__umulhisi3>
    2140:	96 95       	lsr	r25
    2142:	87 95       	ror	r24
    2144:	92 95       	swap	r25
    2146:	82 95       	swap	r24
    2148:	8f 70       	andi	r24, 0x0F	; 15
    214a:	89 27       	eor	r24, r25
    214c:	9f 70       	andi	r25, 0x0F	; 15
    214e:	89 27       	eor	r24, r25
    2150:	c8 9e       	mul	r12, r24
    2152:	00 0d       	add	r16, r0
    2154:	11 24       	eor	r1, r1
    2156:	10 e0       	ldi	r17, 0x00	; 0
    2158:	89 9d       	mul	r24, r9
    215a:	00 0d       	add	r16, r0
    215c:	11 1d       	adc	r17, r1
    215e:	11 24       	eor	r1, r1
    2160:	f1 2e       	mov	r15, r17
  
  // Buttons (1, 2):
  // Sets Alarm 
  }else if(currentButtonsPressed == 0x03)
  {
      alarmActivated = ON;
    2162:	dd 24       	eor	r13, r13
    2164:	d3 94       	inc	r13
      alarmGlobal = ON;
      segment_data[2] &= 0xFB;      
      currentButtonsPressed = (0x00);
    2166:	10 e0       	ldi	r17, 0x00	; 0
    2168:	a8 cf       	rjmp	.-176    	; 0x20ba <main+0xec>
  
  // Buttons (3):
  // SNOOZE if Alarm is Set/On    
  }else if(currentButtonsPressed == 0x04)
  {
      if(alarmActivated)
    216a:	dd 20       	and	r13, r13
    216c:	09 f4       	brne	.+2      	; 0x2170 <main+0x1a2>
    216e:	4f c0       	rjmp	.+158    	; 0x220e <main+0x240>
      {
        TCCR1B &= (0 << CS11);
    2170:	8e b5       	in	r24, 0x2e	; 46
    2172:	1e bc       	out	0x2e, r1	; 46
        TCCR1B &= (0 << CS12);
    2174:	8e b5       	in	r24, 0x2e	; 46
    2176:	1e bc       	out	0x2e, r1	; 46
        OCR3C   = 0;
    2178:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    217c:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	snoozeFlag = SNOOZEON;	
    2180:	70 92 81 01 	sts	0x0181, r7	; 0x800181 <snoozeFlag>
    2184:	20 2f       	mov	r18, r16
    2186:	3f 2d       	mov	r19, r15
    2188:	a9 e8       	ldi	r26, 0x89	; 137
    218a:	b8 e8       	ldi	r27, 0x88	; 136
    218c:	0e 94 a0 11 	call	0x2340	; 0x2340 <__umulhisi3>
    2190:	96 95       	lsr	r25
    2192:	87 95       	ror	r24
    2194:	92 95       	swap	r25
    2196:	82 95       	swap	r24
    2198:	8f 70       	andi	r24, 0x0F	; 15
    219a:	89 27       	eor	r24, r25
    219c:	9f 70       	andi	r25, 0x0F	; 15
    219e:	89 27       	eor	r24, r25
    21a0:	c8 9e       	mul	r12, r24
    21a2:	00 0d       	add	r16, r0
    21a4:	11 24       	eor	r1, r1
    21a6:	10 e0       	ldi	r17, 0x00	; 0
    21a8:	89 9d       	mul	r24, r9
    21aa:	00 0d       	add	r16, r0
    21ac:	11 1d       	adc	r17, r1
    21ae:	11 24       	eor	r1, r1
    21b0:	f1 2e       	mov	r15, r17
        alarmSET = ON;
    21b2:	88 24       	eor	r8, r8
    21b4:	83 94       	inc	r8
      if(alarmActivated)
      {
        TCCR1B &= (0 << CS11);
        TCCR1B &= (0 << CS12);
        OCR3C   = 0;
	snoozeFlag = SNOOZEON;	
    21b6:	dd 24       	eor	r13, r13
    21b8:	d3 94       	inc	r13
        alarmSET = ON;
      }
      currentButtonsPressed = (0x00);
    21ba:	10 e0       	ldi	r17, 0x00	; 0
    21bc:	7e cf       	rjmp	.-260    	; 0x20ba <main+0xec>
  
  // Buttons (1):
  // Enter Setting mode (sets time or alarm)
  if(currentButtonsPressed == 0x01)
  {
      buttonPos    = 1;
    21be:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
      alarmValue   = AlarmSetMode(alarmOffset);
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	0e 94 05 09 	call	0x120a	; 0x120a <AlarmSetMode>
    21c8:	5c 01       	movw	r10, r24
    21ca:	9c 01       	movw	r18, r24
    21cc:	a9 e8       	ldi	r26, 0x89	; 137
    21ce:	b8 e8       	ldi	r27, 0x88	; 136
    21d0:	0e 94 a0 11 	call	0x2340	; 0x2340 <__umulhisi3>
    21d4:	9c 01       	movw	r18, r24
    21d6:	36 95       	lsr	r19
    21d8:	27 95       	ror	r18
    21da:	32 95       	swap	r19
    21dc:	22 95       	swap	r18
    21de:	2f 70       	andi	r18, 0x0F	; 15
    21e0:	23 27       	eor	r18, r19
    21e2:	3f 70       	andi	r19, 0x0F	; 15
    21e4:	23 27       	eor	r18, r19
    21e6:	9a 2d       	mov	r25, r10
    21e8:	c2 9e       	mul	r12, r18
    21ea:	90 0d       	add	r25, r0
    21ec:	11 24       	eor	r1, r1
    21ee:	89 2f       	mov	r24, r25
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	29 9d       	mul	r18, r9
    21f4:	80 0d       	add	r24, r0
    21f6:	91 1d       	adc	r25, r1
    21f8:	11 24       	eor	r1, r1
    21fa:	08 2f       	mov	r16, r24
    21fc:	f9 2e       	mov	r15, r25
    21fe:	5d cf       	rjmp	.-326    	; 0x20ba <main+0xec>
  
  // Buttons (1, 3):
  // Set Time
  }else if(currentButtonsPressed == 0x05)
  {
    currentTime = AlarmSetMode(alarmOffset);
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	0e 94 05 09 	call	0x120a	; 0x120a <AlarmSetMode>
    2206:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <currentTime+0x1>
    220a:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <currentTime>
    220e:	20 2f       	mov	r18, r16
    2210:	3f 2d       	mov	r19, r15
    2212:	a9 e8       	ldi	r26, 0x89	; 137
    2214:	b8 e8       	ldi	r27, 0x88	; 136
    2216:	0e 94 a0 11 	call	0x2340	; 0x2340 <__umulhisi3>
    221a:	96 95       	lsr	r25
    221c:	87 95       	ror	r24
    221e:	92 95       	swap	r25
    2220:	82 95       	swap	r24
    2222:	8f 70       	andi	r24, 0x0F	; 15
    2224:	89 27       	eor	r24, r25
    2226:	9f 70       	andi	r25, 0x0F	; 15
    2228:	89 27       	eor	r24, r25
    222a:	c8 9e       	mul	r12, r24
    222c:	00 0d       	add	r16, r0
    222e:	11 24       	eor	r1, r1
    2230:	10 e0       	ldi	r17, 0x00	; 0
    2232:	89 9d       	mul	r24, r9
    2234:	00 0d       	add	r16, r0
    2236:	11 1d       	adc	r17, r1
    2238:	11 24       	eor	r1, r1
    223a:	f1 2e       	mov	r15, r17
    currentButtonsPressed = (0x00);
    223c:	10 e0       	ldi	r17, 0x00	; 0
    223e:	3d cf       	rjmp	.-390    	; 0x20ba <main+0xec>
  // Buttons (2):
  // Restart Mode (restarts everything) 
  }else if(currentButtonsPressed == 0x02)
  {
      alarmActivated = OFF;
      alarmGlobal    = OFF;
    2240:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <alarmGlobal>
      snoozeFlag = SNOOZEOFF;
    2244:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <snoozeFlag>
      segment_data[2] |= (0xFF);      
    2248:	50 92 79 01 	sts	0x0179, r5	; 0x800179 <segment_data+0x2>
      currentButtonsPressed = (0x00);
      OCR3C = 0;
    224c:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    2250:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
      displayValue = 0;	        
      alarmValue = 1;	        
      //alarmActivated = OFF;
      //alarmGlobal    = OFF;
      alarmON = OFF;
      clear_display();
    2254:	0e 94 c8 0b 	call	0x1790	; 0x1790 <clear_display>
    2258:	00 e0       	ldi	r16, 0x00	; 0
    225a:	f1 2c       	mov	r15, r1
      displayValue = alarmValue;   
  // Buttons (2):
  // Restart Mode (restarts everything) 
  }else if(currentButtonsPressed == 0x02)
  {
      alarmActivated = OFF;
    225c:	d1 2c       	mov	r13, r1
      currentButtonsPressed = (0x00);
      OCR3C = 0;
      currentButtonsPressed = 0;	
      currentDisplayDigit = 0;       
      displayValue = 0;	        
      alarmValue = 1;	        
    225e:	aa 24       	eor	r10, r10
    2260:	a3 94       	inc	r10
    2262:	b1 2c       	mov	r11, r1
      snoozeFlag = SNOOZEOFF;
      segment_data[2] |= (0xFF);      
      currentButtonsPressed = (0x00);
      OCR3C = 0;
      currentButtonsPressed = 0;	
      currentDisplayDigit = 0;       
    2264:	e1 2c       	mov	r14, r1
      alarmGlobal    = OFF;
      snoozeFlag = SNOOZEOFF;
      segment_data[2] |= (0xFF);      
      currentButtonsPressed = (0x00);
      OCR3C = 0;
      currentButtonsPressed = 0;	
    2266:	10 e0       	ldi	r17, 0x00	; 0
    2268:	28 cf       	rjmp	.-432    	; 0x20ba <main+0xec>
    226a:	20 2f       	mov	r18, r16
    226c:	3f 2d       	mov	r19, r15
    226e:	a9 e8       	ldi	r26, 0x89	; 137
    2270:	b8 e8       	ldi	r27, 0x88	; 136
    2272:	0e 94 a0 11 	call	0x2340	; 0x2340 <__umulhisi3>
    2276:	9c 01       	movw	r18, r24
    2278:	36 95       	lsr	r19
    227a:	27 95       	ror	r18
    227c:	32 95       	swap	r19
    227e:	22 95       	swap	r18
    2280:	2f 70       	andi	r18, 0x0F	; 15
    2282:	23 27       	eor	r18, r19
    2284:	3f 70       	andi	r19, 0x0F	; 15
    2286:	23 27       	eor	r18, r19
    2288:	c2 9e       	mul	r12, r18
    228a:	00 0d       	add	r16, r0
    228c:	11 24       	eor	r1, r1
    228e:	80 2f       	mov	r24, r16
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	29 9d       	mul	r18, r9
    2294:	80 0d       	add	r24, r0
    2296:	91 1d       	adc	r25, r1
    2298:	11 24       	eor	r1, r1
    currentTime = AlarmSetMode(alarmOffset);
    currentButtonsPressed = (0x00);
  
  // Display CurrentTime
  
  }else if(currentButtonsPressed == 0x08)
    229a:	08 2f       	mov	r16, r24
    229c:	f9 2e       	mov	r15, r25
    229e:	0d cf       	rjmp	.-486    	; 0x20ba <main+0xec>

000022a0 <__udivmodhi4>:
    22a0:	aa 1b       	sub	r26, r26
    22a2:	bb 1b       	sub	r27, r27
    22a4:	51 e1       	ldi	r21, 0x11	; 17
    22a6:	07 c0       	rjmp	.+14     	; 0x22b6 <__udivmodhi4_ep>

000022a8 <__udivmodhi4_loop>:
    22a8:	aa 1f       	adc	r26, r26
    22aa:	bb 1f       	adc	r27, r27
    22ac:	a6 17       	cp	r26, r22
    22ae:	b7 07       	cpc	r27, r23
    22b0:	10 f0       	brcs	.+4      	; 0x22b6 <__udivmodhi4_ep>
    22b2:	a6 1b       	sub	r26, r22
    22b4:	b7 0b       	sbc	r27, r23

000022b6 <__udivmodhi4_ep>:
    22b6:	88 1f       	adc	r24, r24
    22b8:	99 1f       	adc	r25, r25
    22ba:	5a 95       	dec	r21
    22bc:	a9 f7       	brne	.-22     	; 0x22a8 <__udivmodhi4_loop>
    22be:	80 95       	com	r24
    22c0:	90 95       	com	r25
    22c2:	bc 01       	movw	r22, r24
    22c4:	cd 01       	movw	r24, r26
    22c6:	08 95       	ret

000022c8 <__divmodhi4>:
    22c8:	97 fb       	bst	r25, 7
    22ca:	07 2e       	mov	r0, r23
    22cc:	16 f4       	brtc	.+4      	; 0x22d2 <__divmodhi4+0xa>
    22ce:	00 94       	com	r0
    22d0:	07 d0       	rcall	.+14     	; 0x22e0 <__divmodhi4_neg1>
    22d2:	77 fd       	sbrc	r23, 7
    22d4:	09 d0       	rcall	.+18     	; 0x22e8 <__divmodhi4_neg2>
    22d6:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__udivmodhi4>
    22da:	07 fc       	sbrc	r0, 7
    22dc:	05 d0       	rcall	.+10     	; 0x22e8 <__divmodhi4_neg2>
    22de:	3e f4       	brtc	.+14     	; 0x22ee <__divmodhi4_exit>

000022e0 <__divmodhi4_neg1>:
    22e0:	90 95       	com	r25
    22e2:	81 95       	neg	r24
    22e4:	9f 4f       	sbci	r25, 0xFF	; 255
    22e6:	08 95       	ret

000022e8 <__divmodhi4_neg2>:
    22e8:	70 95       	com	r23
    22ea:	61 95       	neg	r22
    22ec:	7f 4f       	sbci	r23, 0xFF	; 255

000022ee <__divmodhi4_exit>:
    22ee:	08 95       	ret

000022f0 <__divmodsi4>:
    22f0:	05 2e       	mov	r0, r21
    22f2:	97 fb       	bst	r25, 7
    22f4:	1e f4       	brtc	.+6      	; 0x22fc <__divmodsi4+0xc>
    22f6:	00 94       	com	r0
    22f8:	0e 94 8f 11 	call	0x231e	; 0x231e <__negsi2>
    22fc:	57 fd       	sbrc	r21, 7
    22fe:	07 d0       	rcall	.+14     	; 0x230e <__divmodsi4_neg2>
    2300:	0e 94 af 11 	call	0x235e	; 0x235e <__udivmodsi4>
    2304:	07 fc       	sbrc	r0, 7
    2306:	03 d0       	rcall	.+6      	; 0x230e <__divmodsi4_neg2>
    2308:	4e f4       	brtc	.+18     	; 0x231c <__divmodsi4_exit>
    230a:	0c 94 8f 11 	jmp	0x231e	; 0x231e <__negsi2>

0000230e <__divmodsi4_neg2>:
    230e:	50 95       	com	r21
    2310:	40 95       	com	r20
    2312:	30 95       	com	r19
    2314:	21 95       	neg	r18
    2316:	3f 4f       	sbci	r19, 0xFF	; 255
    2318:	4f 4f       	sbci	r20, 0xFF	; 255
    231a:	5f 4f       	sbci	r21, 0xFF	; 255

0000231c <__divmodsi4_exit>:
    231c:	08 95       	ret

0000231e <__negsi2>:
    231e:	90 95       	com	r25
    2320:	80 95       	com	r24
    2322:	70 95       	com	r23
    2324:	61 95       	neg	r22
    2326:	7f 4f       	sbci	r23, 0xFF	; 255
    2328:	8f 4f       	sbci	r24, 0xFF	; 255
    232a:	9f 4f       	sbci	r25, 0xFF	; 255
    232c:	08 95       	ret

0000232e <__tablejump2__>:
    232e:	ee 0f       	add	r30, r30
    2330:	ff 1f       	adc	r31, r31
    2332:	00 24       	eor	r0, r0
    2334:	00 1c       	adc	r0, r0
    2336:	0b be       	out	0x3b, r0	; 59
    2338:	07 90       	elpm	r0, Z+
    233a:	f6 91       	elpm	r31, Z
    233c:	e0 2d       	mov	r30, r0
    233e:	09 94       	ijmp

00002340 <__umulhisi3>:
    2340:	a2 9f       	mul	r26, r18
    2342:	b0 01       	movw	r22, r0
    2344:	b3 9f       	mul	r27, r19
    2346:	c0 01       	movw	r24, r0
    2348:	a3 9f       	mul	r26, r19
    234a:	70 0d       	add	r23, r0
    234c:	81 1d       	adc	r24, r1
    234e:	11 24       	eor	r1, r1
    2350:	91 1d       	adc	r25, r1
    2352:	b2 9f       	mul	r27, r18
    2354:	70 0d       	add	r23, r0
    2356:	81 1d       	adc	r24, r1
    2358:	11 24       	eor	r1, r1
    235a:	91 1d       	adc	r25, r1
    235c:	08 95       	ret

0000235e <__udivmodsi4>:
    235e:	a1 e2       	ldi	r26, 0x21	; 33
    2360:	1a 2e       	mov	r1, r26
    2362:	aa 1b       	sub	r26, r26
    2364:	bb 1b       	sub	r27, r27
    2366:	fd 01       	movw	r30, r26
    2368:	0d c0       	rjmp	.+26     	; 0x2384 <__udivmodsi4_ep>

0000236a <__udivmodsi4_loop>:
    236a:	aa 1f       	adc	r26, r26
    236c:	bb 1f       	adc	r27, r27
    236e:	ee 1f       	adc	r30, r30
    2370:	ff 1f       	adc	r31, r31
    2372:	a2 17       	cp	r26, r18
    2374:	b3 07       	cpc	r27, r19
    2376:	e4 07       	cpc	r30, r20
    2378:	f5 07       	cpc	r31, r21
    237a:	20 f0       	brcs	.+8      	; 0x2384 <__udivmodsi4_ep>
    237c:	a2 1b       	sub	r26, r18
    237e:	b3 0b       	sbc	r27, r19
    2380:	e4 0b       	sbc	r30, r20
    2382:	f5 0b       	sbc	r31, r21

00002384 <__udivmodsi4_ep>:
    2384:	66 1f       	adc	r22, r22
    2386:	77 1f       	adc	r23, r23
    2388:	88 1f       	adc	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	1a 94       	dec	r1
    238e:	69 f7       	brne	.-38     	; 0x236a <__udivmodsi4_loop>
    2390:	60 95       	com	r22
    2392:	70 95       	com	r23
    2394:	80 95       	com	r24
    2396:	90 95       	com	r25
    2398:	9b 01       	movw	r18, r22
    239a:	ac 01       	movw	r20, r24
    239c:	bd 01       	movw	r22, r26
    239e:	cf 01       	movw	r24, r30
    23a0:	08 95       	ret

000023a2 <__itoa_ncheck>:
    23a2:	bb 27       	eor	r27, r27
    23a4:	4a 30       	cpi	r20, 0x0A	; 10
    23a6:	31 f4       	brne	.+12     	; 0x23b4 <__itoa_ncheck+0x12>
    23a8:	99 23       	and	r25, r25
    23aa:	22 f4       	brpl	.+8      	; 0x23b4 <__itoa_ncheck+0x12>
    23ac:	bd e2       	ldi	r27, 0x2D	; 45
    23ae:	90 95       	com	r25
    23b0:	81 95       	neg	r24
    23b2:	9f 4f       	sbci	r25, 0xFF	; 255
    23b4:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__utoa_common>

000023b8 <__utoa_ncheck>:
    23b8:	bb 27       	eor	r27, r27

000023ba <__utoa_common>:
    23ba:	fb 01       	movw	r30, r22
    23bc:	55 27       	eor	r21, r21
    23be:	aa 27       	eor	r26, r26
    23c0:	88 0f       	add	r24, r24
    23c2:	99 1f       	adc	r25, r25
    23c4:	aa 1f       	adc	r26, r26
    23c6:	a4 17       	cp	r26, r20
    23c8:	10 f0       	brcs	.+4      	; 0x23ce <__utoa_common+0x14>
    23ca:	a4 1b       	sub	r26, r20
    23cc:	83 95       	inc	r24
    23ce:	50 51       	subi	r21, 0x10	; 16
    23d0:	b9 f7       	brne	.-18     	; 0x23c0 <__utoa_common+0x6>
    23d2:	a0 5d       	subi	r26, 0xD0	; 208
    23d4:	aa 33       	cpi	r26, 0x3A	; 58
    23d6:	08 f0       	brcs	.+2      	; 0x23da <__utoa_common+0x20>
    23d8:	a9 5d       	subi	r26, 0xD9	; 217
    23da:	a1 93       	st	Z+, r26
    23dc:	00 97       	sbiw	r24, 0x00	; 0
    23de:	79 f7       	brne	.-34     	; 0x23be <__utoa_common+0x4>
    23e0:	b1 11       	cpse	r27, r1
    23e2:	b1 93       	st	Z+, r27
    23e4:	11 92       	st	Z+, r1
    23e6:	cb 01       	movw	r24, r22
    23e8:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <strrev>

000023ec <strrev>:
    23ec:	dc 01       	movw	r26, r24
    23ee:	fc 01       	movw	r30, r24
    23f0:	67 2f       	mov	r22, r23
    23f2:	71 91       	ld	r23, Z+
    23f4:	77 23       	and	r23, r23
    23f6:	e1 f7       	brne	.-8      	; 0x23f0 <strrev+0x4>
    23f8:	32 97       	sbiw	r30, 0x02	; 2
    23fa:	04 c0       	rjmp	.+8      	; 0x2404 <strrev+0x18>
    23fc:	7c 91       	ld	r23, X
    23fe:	6d 93       	st	X+, r22
    2400:	70 83       	st	Z, r23
    2402:	62 91       	ld	r22, -Z
    2404:	ae 17       	cp	r26, r30
    2406:	bf 07       	cpc	r27, r31
    2408:	c8 f3       	brcs	.-14     	; 0x23fc <strrev+0x10>
    240a:	08 95       	ret

0000240c <_exit>:
    240c:	f8 94       	cli

0000240e <__stop_program>:
    240e:	ff cf       	rjmp	.-2      	; 0x240e <__stop_program>
