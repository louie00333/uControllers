
Lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007c  00800100  00001afa  00001b8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001afa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e6  0080017c  0080017c  00001c0a  2**0
                  ALLOC
  3 .stab         00004f68  00000000  00000000  00001c0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001cb8  00000000  00000000  00006b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000882c  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00008840  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  0000887c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00008ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00009714  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  0000972e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
       4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      10:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      20:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__vector_8>
      24:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      28:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      30:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__vector_12>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      38:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      40:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__vector_16>
      44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      48:	0c 94 a4 02 	jmp	0x548	; 0x548 <__vector_18>
      4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      54:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      84:	0c 94 78 0a 	jmp	0x14f0	; 0x14f0 <__vector_33>
      88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      8c:	b9 0a       	sbc	r11, r25
      8e:	90 0a       	sbc	r9, r16
      90:	90 0a       	sbc	r9, r16
      92:	90 0a       	sbc	r9, r16
      94:	90 0a       	sbc	r9, r16
      96:	90 0a       	sbc	r9, r16
      98:	90 0a       	sbc	r9, r16
      9a:	90 0a       	sbc	r9, r16
      9c:	b9 0a       	sbc	r11, r25
      9e:	90 0a       	sbc	r9, r16
      a0:	90 0a       	sbc	r9, r16
      a2:	90 0a       	sbc	r9, r16
      a4:	90 0a       	sbc	r9, r16
      a6:	90 0a       	sbc	r9, r16
      a8:	90 0a       	sbc	r9, r16
      aa:	90 0a       	sbc	r9, r16
      ac:	c3 0a       	sbc	r12, r19
      ae:	90 0a       	sbc	r9, r16
      b0:	90 0a       	sbc	r9, r16
      b2:	90 0a       	sbc	r9, r16
      b4:	90 0a       	sbc	r9, r16
      b6:	90 0a       	sbc	r9, r16
      b8:	90 0a       	sbc	r9, r16
      ba:	90 0a       	sbc	r9, r16
      bc:	90 0a       	sbc	r9, r16
      be:	90 0a       	sbc	r9, r16
      c0:	90 0a       	sbc	r9, r16
      c2:	90 0a       	sbc	r9, r16
      c4:	90 0a       	sbc	r9, r16
      c6:	90 0a       	sbc	r9, r16
      c8:	90 0a       	sbc	r9, r16
      ca:	90 0a       	sbc	r9, r16
      cc:	c3 0a       	sbc	r12, r19
      ce:	90 0a       	sbc	r9, r16
      d0:	90 0a       	sbc	r9, r16
      d2:	90 0a       	sbc	r9, r16
      d4:	90 0a       	sbc	r9, r16
      d6:	90 0a       	sbc	r9, r16
      d8:	90 0a       	sbc	r9, r16
      da:	90 0a       	sbc	r9, r16
      dc:	90 0a       	sbc	r9, r16
      de:	90 0a       	sbc	r9, r16
      e0:	90 0a       	sbc	r9, r16
      e2:	90 0a       	sbc	r9, r16
      e4:	90 0a       	sbc	r9, r16
      e6:	90 0a       	sbc	r9, r16
      e8:	90 0a       	sbc	r9, r16
      ea:	90 0a       	sbc	r9, r16
      ec:	da 0a       	sbc	r13, r26
      ee:	90 0a       	sbc	r9, r16
      f0:	90 0a       	sbc	r9, r16
      f2:	90 0a       	sbc	r9, r16
      f4:	90 0a       	sbc	r9, r16
      f6:	90 0a       	sbc	r9, r16
      f8:	90 0a       	sbc	r9, r16
      fa:	90 0a       	sbc	r9, r16
      fc:	de 0a       	sbc	r13, r30
      fe:	90 0a       	sbc	r9, r16
     100:	90 0a       	sbc	r9, r16
     102:	90 0a       	sbc	r9, r16
     104:	90 0a       	sbc	r9, r16
     106:	90 0a       	sbc	r9, r16
     108:	90 0a       	sbc	r9, r16
     10a:	90 0a       	sbc	r9, r16
     10c:	90 0a       	sbc	r9, r16
     10e:	90 0a       	sbc	r9, r16
     110:	90 0a       	sbc	r9, r16
     112:	90 0a       	sbc	r9, r16
     114:	90 0a       	sbc	r9, r16
     116:	90 0a       	sbc	r9, r16
     118:	90 0a       	sbc	r9, r16
     11a:	90 0a       	sbc	r9, r16
     11c:	ec 0a       	sbc	r14, r28
     11e:	90 0a       	sbc	r9, r16
     120:	90 0a       	sbc	r9, r16
     122:	90 0a       	sbc	r9, r16
     124:	90 0a       	sbc	r9, r16
     126:	90 0a       	sbc	r9, r16
     128:	90 0a       	sbc	r9, r16
     12a:	90 0a       	sbc	r9, r16
     12c:	aa 0a       	sbc	r10, r26

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d0 e1       	ldi	r29, 0x10	; 16
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	11 e0       	ldi	r17, 0x01	; 1
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	ea ef       	ldi	r30, 0xFA	; 250
     142:	fa e1       	ldi	r31, 0x1A	; 26
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	ac 37       	cpi	r26, 0x7C	; 124
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	22 e0       	ldi	r18, 0x02	; 2
     156:	ac e7       	ldi	r26, 0x7C	; 124
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	a2 36       	cpi	r26, 0x62	; 98
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 77 0b 	call	0x16ee	; 0x16ee <main>
     168:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <_exit>

0000016c <__bad_interrupt>:
     16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000170 <SPI_read>:
/*********************************************************************/
//              SPI_read(uint8_t currentBarGraph)
// Sends the bar graph data and then reads the SPI port.
/*********************************************************************/
uint16_t SPI_read(uint8_t currentBarGraph){
  PORTB &= 0x7F;
     170:	c7 98       	cbi	0x18, 7	; 24
  SPDR = currentBarGraph;
     172:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){} //wait till 8 bits have been sent
     174:	77 9b       	sbis	0x0e, 7	; 14
     176:	fe cf       	rjmp	.-4      	; 0x174 <SPI_read+0x4>
  //PORTD = 0xFF;
  //PORTD = 0x00;
  PORTE = 0x00;		//TODO: May cause problems with RADIO
     178:	13 b8       	out	0x03, r1	; 3
  PORTE = 0xFF;
     17a:	8f ef       	ldi	r24, 0xFF	; 255
     17c:	83 b9       	out	0x03, r24	; 3
  return(SPDR); //return incoming data from SPDR
     17e:	8f b1       	in	r24, 0x0f	; 15
}
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	08 95       	ret

00000184 <chk_buttons>:
// Adapted to check all buttons from Ganssel's "Guide to Debouncing"            
// Expects active low pushbuttons on PINA port.  Debounce time is determined by 
// external loop delay times 12. 
// Edited to have a state array of size 8 for each button
//******************************************************************************
uint8_t chk_buttons(uint8_t buttons) {
     184:	48 2f       	mov	r20, r24
  //Gansels debounce with the state as an array that is used to check against the values that buttons is at
  static uint16_t state[8] = {0}; //holds present state
  state[buttons] = (state[buttons] << 1) | (! bit_is_clear(PINA, buttons)) | 0xE000;
     186:	e8 2f       	mov	r30, r24
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	99 b3       	in	r25, 0x19	; 25
     18c:	ee 0f       	add	r30, r30
     18e:	ff 1f       	adc	r31, r31
     190:	e9 57       	subi	r30, 0x79	; 121
     192:	fe 4f       	sbci	r31, 0xFE	; 254
     194:	20 81       	ld	r18, Z
     196:	31 81       	ldd	r19, Z+1	; 0x01
     198:	22 0f       	add	r18, r18
     19a:	33 1f       	adc	r19, r19
     19c:	30 6e       	ori	r19, 0xE0	; 224
     19e:	89 2f       	mov	r24, r25
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <chk_buttons+0x24>
     1a4:	95 95       	asr	r25
     1a6:	87 95       	ror	r24
     1a8:	4a 95       	dec	r20
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <chk_buttons+0x20>
     1ac:	81 70       	andi	r24, 0x01	; 1
     1ae:	99 27       	eor	r25, r25
     1b0:	28 2b       	or	r18, r24
     1b2:	39 2b       	or	r19, r25
     1b4:	31 83       	std	Z+1, r19	; 0x01
     1b6:	20 83       	st	Z, r18
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	21 15       	cp	r18, r1
     1bc:	30 4f       	sbci	r19, 0xF0	; 240
     1be:	09 f0       	breq	.+2      	; 0x1c2 <chk_buttons+0x3e>
     1c0:	80 e0       	ldi	r24, 0x00	; 0
  if (state[buttons] == 0xF000) return 1;
  return 0;
}
     1c2:	08 95       	ret

000001c4 <segsum>:
//                                   segment_sum                                    
// takes a 16-bit binary input value and places the appropriate equivalent 4 digit 
// BCD segment code in the array segment_data for display.                       
// array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
//***********************************************************************************
void segsum(uint16_t sum) {
     1c4:	0f 93       	push	r16
     1c6:	1f 93       	push	r17
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	8c 01       	movw	r16, r24
     1ce:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <DecHex>
     1d2:	e3 2f       	mov	r30, r19
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	ef 01       	movw	r28, r30
     1d8:	21 97       	sbiw	r28, 0x01	; 1
  
  uint8_t  i = 0;
  uint8_t  digitNum = 1;
     1da:	21 e0       	ldi	r18, 0x01	; 1
  uint16_t sumPlaceHolder = sum;
  while(i < 4 && sumPlaceHolder > (DecHex-1))	
     1dc:	c8 17       	cp	r28, r24
     1de:	d9 07       	cpc	r29, r25
     1e0:	60 f4       	brcc	.+24     	; 0x1fa <segsum+0x36>
  {
    sumPlaceHolder /= DecHex;
     1e2:	bf 01       	movw	r22, r30
     1e4:	0e 94 c5 0c 	call	0x198a	; 0x198a <__udivmodhi4>
     1e8:	cb 01       	movw	r24, r22
    digitNum++;
     1ea:	2f 5f       	subi	r18, 0xFF	; 255
void segsum(uint16_t sum) {
  
  uint8_t  i = 0;
  uint8_t  digitNum = 1;
  uint16_t sumPlaceHolder = sum;
  while(i < 4 && sumPlaceHolder > (DecHex-1))	
     1ec:	25 30       	cpi	r18, 0x05	; 5
     1ee:	b1 f7       	brne	.-20     	; 0x1dc <segsum+0x18>
      segment_data[1] = hex_to_7seg[(sum/(DecHex*DecHex))%DecHex];
      segment_data[0] = hex_to_7seg[sum/(DecHex*DecHex*DecHex)];
    default:
      break;
  }
}
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	1f 91       	pop	r17
     1f6:	0f 91       	pop	r16
     1f8:	08 95       	ret
    sumPlaceHolder /= DecHex;
    digitNum++;
    i++;
  } 
  // Parses 0-4 digits into seperate segment_data[] locations 
  switch(digitNum)
     1fa:	23 30       	cpi	r18, 0x03	; 3
     1fc:	a1 f0       	breq	.+40     	; 0x226 <segsum+0x62>
     1fe:	24 30       	cpi	r18, 0x04	; 4
     200:	09 f4       	brne	.+2      	; 0x204 <segsum+0x40>
     202:	55 c0       	rjmp	.+170    	; 0x2ae <segsum+0xea>
     204:	22 30       	cpi	r18, 0x02	; 2
     206:	c1 f1       	breq	.+112    	; 0x278 <segsum+0xb4>
  {
    case 1:
      segment_data[4] = hex_to_7seg[sum];
     208:	f8 01       	movw	r30, r16
     20a:	e5 5a       	subi	r30, 0xA5	; 165
     20c:	fe 4f       	sbci	r31, 0xFE	; 254
     20e:	80 81       	ld	r24, Z
     210:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <segment_data+0x4>
      segment_data[3] = hex_to_7seg[0];// 0xFF;
     214:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <hex_to_7seg>
     218:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <segment_data+0x3>
      segment_data[1] = hex_to_7seg[0];//0xFF;
     21c:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <segment_data+0x1>
      segment_data[0] = hex_to_7seg[0];//0xFF;
     220:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <segment_data>
      break;
     224:	e5 cf       	rjmp	.-54     	; 0x1f0 <segsum+0x2c>
      segment_data[3] = hex_to_7seg[(sum / DecHex)];
      segment_data[1] = hex_to_7seg[0];//0xFF;
      segment_data[0] = hex_to_7seg[0];// 0xFF;
      break;
    case 3:
      segment_data[4] = hex_to_7seg[sum % DecHex];
     226:	c8 01       	movw	r24, r16
     228:	bf 01       	movw	r22, r30
     22a:	0e 94 c5 0c 	call	0x198a	; 0x198a <__udivmodhi4>
     22e:	dc 01       	movw	r26, r24
     230:	a5 5a       	subi	r26, 0xA5	; 165
     232:	be 4f       	sbci	r27, 0xFE	; 254
     234:	8c 91       	ld	r24, X
     236:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <segment_data+0x4>
      segment_data[3] = hex_to_7seg[(sum/DecHex)%DecHex];
     23a:	cb 01       	movw	r24, r22
     23c:	bf 01       	movw	r22, r30
     23e:	0e 94 c5 0c 	call	0x198a	; 0x198a <__udivmodhi4>
     242:	fc 01       	movw	r30, r24
     244:	e5 5a       	subi	r30, 0xA5	; 165
     246:	fe 4f       	sbci	r31, 0xFE	; 254
     248:	80 81       	ld	r24, Z
     24a:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <segment_data+0x3>
      segment_data[1] = hex_to_7seg[(sum/(DecHex*DecHex))];
     24e:	33 9f       	mul	r19, r19
     250:	b0 01       	movw	r22, r0
     252:	11 24       	eor	r1, r1
     254:	c8 01       	movw	r24, r16
     256:	0e 94 c5 0c 	call	0x198a	; 0x198a <__udivmodhi4>
     25a:	fb 01       	movw	r30, r22
     25c:	e5 5a       	subi	r30, 0xA5	; 165
     25e:	fe 4f       	sbci	r31, 0xFE	; 254
     260:	80 81       	ld	r24, Z
     262:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <segment_data+0x1>
      segment_data[0] = hex_to_7seg[0];//0xFF;
     266:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <hex_to_7seg>
     26a:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <segment_data>
      segment_data[1] = hex_to_7seg[(sum/(DecHex*DecHex))%DecHex];
      segment_data[0] = hex_to_7seg[sum/(DecHex*DecHex*DecHex)];
    default:
      break;
  }
}
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	1f 91       	pop	r17
     274:	0f 91       	pop	r16
     276:	08 95       	ret
      segment_data[3] = hex_to_7seg[0];// 0xFF;
      segment_data[1] = hex_to_7seg[0];//0xFF;
      segment_data[0] = hex_to_7seg[0];//0xFF;
      break;
    case 2:
      segment_data[4] = hex_to_7seg[(sum % DecHex)];
     278:	c8 01       	movw	r24, r16
     27a:	bf 01       	movw	r22, r30
     27c:	0e 94 c5 0c 	call	0x198a	; 0x198a <__udivmodhi4>
     280:	fc 01       	movw	r30, r24
     282:	e5 5a       	subi	r30, 0xA5	; 165
     284:	fe 4f       	sbci	r31, 0xFE	; 254
     286:	80 81       	ld	r24, Z
     288:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <segment_data+0x4>
      segment_data[3] = hex_to_7seg[(sum / DecHex)];
     28c:	fb 01       	movw	r30, r22
     28e:	e5 5a       	subi	r30, 0xA5	; 165
     290:	fe 4f       	sbci	r31, 0xFE	; 254
     292:	80 81       	ld	r24, Z
     294:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <segment_data+0x3>
      segment_data[1] = hex_to_7seg[0];//0xFF;
     298:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <hex_to_7seg>
     29c:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <segment_data+0x1>
      segment_data[0] = hex_to_7seg[0];// 0xFF;
     2a0:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <segment_data>
      segment_data[1] = hex_to_7seg[(sum/(DecHex*DecHex))%DecHex];
      segment_data[0] = hex_to_7seg[sum/(DecHex*DecHex*DecHex)];
    default:
      break;
  }
}
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	1f 91       	pop	r17
     2aa:	0f 91       	pop	r16
     2ac:	08 95       	ret
      segment_data[3] = hex_to_7seg[(sum/DecHex)%DecHex];
      segment_data[1] = hex_to_7seg[(sum/(DecHex*DecHex))];
      segment_data[0] = hex_to_7seg[0];//0xFF;
      break;
    case 4:
      segment_data[4] = hex_to_7seg[sum % DecHex];
     2ae:	c8 01       	movw	r24, r16
     2b0:	bf 01       	movw	r22, r30
     2b2:	0e 94 c5 0c 	call	0x198a	; 0x198a <__udivmodhi4>
     2b6:	dc 01       	movw	r26, r24
     2b8:	a5 5a       	subi	r26, 0xA5	; 165
     2ba:	be 4f       	sbci	r27, 0xFE	; 254
     2bc:	8c 91       	ld	r24, X
     2be:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <segment_data+0x4>
      segment_data[3] = hex_to_7seg[(sum/DecHex)%DecHex];
     2c2:	cb 01       	movw	r24, r22
     2c4:	bf 01       	movw	r22, r30
     2c6:	0e 94 c5 0c 	call	0x198a	; 0x198a <__udivmodhi4>
     2ca:	dc 01       	movw	r26, r24
     2cc:	a5 5a       	subi	r26, 0xA5	; 165
     2ce:	be 4f       	sbci	r27, 0xFE	; 254
     2d0:	8c 91       	ld	r24, X
     2d2:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <segment_data+0x3>
      segment_data[1] = hex_to_7seg[(sum/(DecHex*DecHex))%DecHex];
     2d6:	33 9f       	mul	r19, r19
     2d8:	90 01       	movw	r18, r0
     2da:	11 24       	eor	r1, r1
     2dc:	c8 01       	movw	r24, r16
     2de:	b9 01       	movw	r22, r18
     2e0:	0e 94 c5 0c 	call	0x198a	; 0x198a <__udivmodhi4>
     2e4:	cb 01       	movw	r24, r22
     2e6:	bf 01       	movw	r22, r30
     2e8:	0e 94 c5 0c 	call	0x198a	; 0x198a <__udivmodhi4>
     2ec:	dc 01       	movw	r26, r24
     2ee:	a5 5a       	subi	r26, 0xA5	; 165
     2f0:	be 4f       	sbci	r27, 0xFE	; 254
     2f2:	8c 91       	ld	r24, X
     2f4:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <segment_data+0x1>
      segment_data[0] = hex_to_7seg[sum/(DecHex*DecHex*DecHex)];
     2f8:	e2 9f       	mul	r30, r18
     2fa:	b0 01       	movw	r22, r0
     2fc:	e3 9f       	mul	r30, r19
     2fe:	70 0d       	add	r23, r0
     300:	f2 9f       	mul	r31, r18
     302:	70 0d       	add	r23, r0
     304:	11 24       	eor	r1, r1
     306:	c8 01       	movw	r24, r16
     308:	0e 94 c5 0c 	call	0x198a	; 0x198a <__udivmodhi4>
     30c:	fb 01       	movw	r30, r22
     30e:	e5 5a       	subi	r30, 0xA5	; 165
     310:	fe 4f       	sbci	r31, 0xFE	; 254
     312:	80 81       	ld	r24, Z
     314:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <segment_data>
    default:
      break;
  }
}
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	1f 91       	pop	r17
     31e:	0f 91       	pop	r16
     320:	08 95       	ret

00000322 <displaySwitch>:
// Takes the segment_data[] array that has the #_DIGIT values and displays it to the 
// current LED digit (displayValue) and returns the next value that will be used for displaying
//***********************************************************************************
uint8_t displaySwitch(uint8_t displayValue)
{
  switch(displayValue){
     322:	82 30       	cpi	r24, 0x02	; 2
     324:	c9 f1       	breq	.+114    	; 0x398 <displaySwitch+0x76>
     326:	88 f4       	brcc	.+34     	; 0x34a <displaySwitch+0x28>
     328:	88 23       	and	r24, r24
     32a:	81 f1       	breq	.+96     	; 0x38c <displaySwitch+0x6a>
     32c:	81 30       	cpi	r24, 0x01	; 1
     32e:	f1 f4       	brne	.+60     	; 0x36c <displaySwitch+0x4a>
    case 0:
      PORTB = 0x07;
      PORTA = segment_data[4];
      break;
    case 1:
      PORTB = 0x17;
     330:	97 e1       	ldi	r25, 0x17	; 23
     332:	98 bb       	out	0x18, r25	; 24
      PORTA = segment_data[3];
     334:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <segment_data+0x3>
     338:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     33a:	ef e9       	ldi	r30, 0x9F	; 159
     33c:	ff e0       	ldi	r31, 0x0F	; 15
     33e:	31 97       	sbiw	r30, 0x01	; 1
     340:	f1 f7       	brne	.-4      	; 0x33e <displaySwitch+0x1c>
     342:	00 c0       	rjmp	.+0      	; 0x344 <displaySwitch+0x22>
     344:	00 00       	nop
    default:
      break;
  } 
  _delay_ms(1);				//Adds delay for screen congruency
  if(displayValue == 4) return 0; 	//Starts display back to 0
  return ++displayValue; 
     346:	8f 5f       	subi	r24, 0xFF	; 255
     348:	08 95       	ret
// Takes the segment_data[] array that has the #_DIGIT values and displays it to the 
// current LED digit (displayValue) and returns the next value that will be used for displaying
//***********************************************************************************
uint8_t displaySwitch(uint8_t displayValue)
{
  switch(displayValue){
     34a:	83 30       	cpi	r24, 0x03	; 3
     34c:	c9 f0       	breq	.+50     	; 0x380 <displaySwitch+0x5e>
     34e:	84 30       	cpi	r24, 0x04	; 4
     350:	69 f4       	brne	.+26     	; 0x36c <displaySwitch+0x4a>
    case 3:
      PORTB = 0x37;
      PORTA = segment_data[1];
      break;
    case 4:
      PORTB = 0x47;
     352:	87 e4       	ldi	r24, 0x47	; 71
     354:	88 bb       	out	0x18, r24	; 24
      PORTA = segment_data[0];
     356:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <segment_data>
     35a:	8b bb       	out	0x1b, r24	; 27
     35c:	8f e9       	ldi	r24, 0x9F	; 159
     35e:	9f e0       	ldi	r25, 0x0F	; 15
     360:	01 97       	sbiw	r24, 0x01	; 1
     362:	f1 f7       	brne	.-4      	; 0x360 <displaySwitch+0x3e>
     364:	00 c0       	rjmp	.+0      	; 0x366 <displaySwitch+0x44>
     366:	00 00       	nop
      break;
    default:
      break;
  } 
  _delay_ms(1);				//Adds delay for screen congruency
  if(displayValue == 4) return 0; 	//Starts display back to 0
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	08 95       	ret
     36c:	ef e9       	ldi	r30, 0x9F	; 159
     36e:	ff e0       	ldi	r31, 0x0F	; 15
     370:	31 97       	sbiw	r30, 0x01	; 1
     372:	f1 f7       	brne	.-4      	; 0x370 <displaySwitch+0x4e>
     374:	00 c0       	rjmp	.+0      	; 0x376 <displaySwitch+0x54>
     376:	00 00       	nop
     378:	84 30       	cpi	r24, 0x04	; 4
     37a:	29 f7       	brne	.-54     	; 0x346 <displaySwitch+0x24>
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	08 95       	ret
    case 2:
      PORTB = 0x27;
      PORTA = segment_data[2];
      break;
    case 3:
      PORTB = 0x37;
     380:	97 e3       	ldi	r25, 0x37	; 55
     382:	98 bb       	out	0x18, r25	; 24
      PORTA = segment_data[1];
     384:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <segment_data+0x1>
     388:	9b bb       	out	0x1b, r25	; 27
      break;
     38a:	d7 cf       	rjmp	.-82     	; 0x33a <displaySwitch+0x18>
//***********************************************************************************
uint8_t displaySwitch(uint8_t displayValue)
{
  switch(displayValue){
    case 0:
      PORTB = 0x07;
     38c:	97 e0       	ldi	r25, 0x07	; 7
     38e:	98 bb       	out	0x18, r25	; 24
      PORTA = segment_data[4];
     390:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <segment_data+0x4>
     394:	9b bb       	out	0x1b, r25	; 27
      break;
     396:	d1 cf       	rjmp	.-94     	; 0x33a <displaySwitch+0x18>
    case 1:
      PORTB = 0x17;
      PORTA = segment_data[3];
      break;
    case 2:
      PORTB = 0x27;
     398:	97 e2       	ldi	r25, 0x27	; 39
     39a:	98 bb       	out	0x18, r25	; 24
      PORTA = segment_data[2];
     39c:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <segment_data+0x2>
     3a0:	9b bb       	out	0x1b, r25	; 27
      break;
     3a2:	cb cf       	rjmp	.-106    	; 0x33a <displaySwitch+0x18>

000003a4 <ButtonCheck>:
// Takes in the current value outputted and returns the adjusted value based on the number
//***********************************************************************************
uint8_t ButtonCheck(uint8_t buttonMode)
{
  //PORTA to input w/ pullups 
  DDRA  = 0x00;	
     3a4:	1a ba       	out	0x1a, r1	; 26
  PORTA = 0xFF;
     3a6:	9f ef       	ldi	r25, 0xFF	; 255
     3a8:	9b bb       	out	0x1b, r25	; 27
  //enable tristate buffer for pushbutton switches via DEC7 on the encoder
  PORTB = 0x70; 
     3aa:	90 e7       	ldi	r25, 0x70	; 112
     3ac:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ae:	95 e3       	ldi	r25, 0x35	; 53
     3b0:	9a 95       	dec	r25
     3b2:	f1 f7       	brne	.-4      	; 0x3b0 <ButtonCheck+0xc>
     3b4:	00 00       	nop
     3b6:	e7 e8       	ldi	r30, 0x87	; 135
     3b8:	f1 e0       	ldi	r31, 0x01	; 1
     3ba:	60 e0       	ldi	r22, 0x00	; 0
     3bc:	70 e0       	ldi	r23, 0x00	; 0
  _delay_us(10);		//BUG"Added delay to get first button to work, need better fix
  while(buttonLoop < 8)
  {     
    if(chk_buttons(buttonLoop))
    {
      buttonMode ^= (1<<buttonLoop); 
     3be:	a1 e0       	ldi	r26, 0x01	; 1
     3c0:	b0 e0       	ldi	r27, 0x00	; 0
// Edited to have a state array of size 8 for each button
//******************************************************************************
uint8_t chk_buttons(uint8_t buttons) {
  //Gansels debounce with the state as an array that is used to check against the values that buttons is at
  static uint16_t state[8] = {0}; //holds present state
  state[buttons] = (state[buttons] << 1) | (! bit_is_clear(PINA, buttons)) | 0xE000;
     3c2:	99 b3       	in	r25, 0x19	; 25
     3c4:	20 81       	ld	r18, Z
     3c6:	31 81       	ldd	r19, Z+1	; 0x01
     3c8:	22 0f       	add	r18, r18
     3ca:	33 1f       	adc	r19, r19
     3cc:	a9 01       	movw	r20, r18
     3ce:	50 6e       	ori	r21, 0xE0	; 224
     3d0:	29 2f       	mov	r18, r25
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	06 2e       	mov	r0, r22
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <ButtonCheck+0x38>
     3d8:	35 95       	asr	r19
     3da:	27 95       	ror	r18
     3dc:	0a 94       	dec	r0
     3de:	e2 f7       	brpl	.-8      	; 0x3d8 <ButtonCheck+0x34>
     3e0:	21 70       	andi	r18, 0x01	; 1
     3e2:	33 27       	eor	r19, r19
     3e4:	24 2b       	or	r18, r20
     3e6:	35 2b       	or	r19, r21
     3e8:	21 93       	st	Z+, r18
     3ea:	31 93       	st	Z+, r19
  if (state[buttons] == 0xF000) return 1;
     3ec:	21 15       	cp	r18, r1
     3ee:	30 4f       	sbci	r19, 0xF0	; 240
     3f0:	39 f4       	brne	.+14     	; 0x400 <__LOCK_REGION_LENGTH__>
  _delay_us(10);		//BUG"Added delay to get first button to work, need better fix
  while(buttonLoop < 8)
  {     
    if(chk_buttons(buttonLoop))
    {
      buttonMode ^= (1<<buttonLoop); 
     3f2:	9d 01       	movw	r18, r26
     3f4:	06 2e       	mov	r0, r22
     3f6:	01 c0       	rjmp	.+2      	; 0x3fa <ButtonCheck+0x56>
     3f8:	22 0f       	add	r18, r18
     3fa:	0a 94       	dec	r0
     3fc:	ea f7       	brpl	.-6      	; 0x3f8 <ButtonCheck+0x54>
     3fe:	82 27       	eor	r24, r18
     400:	6f 5f       	subi	r22, 0xFF	; 255
     402:	7f 4f       	sbci	r23, 0xFF	; 255
  PORTA = 0xFF;
  //enable tristate buffer for pushbutton switches via DEC7 on the encoder
  PORTB = 0x70; 
  uint8_t buttonLoop = 0;
  _delay_us(10);		//BUG"Added delay to get first button to work, need better fix
  while(buttonLoop < 8)
     404:	68 30       	cpi	r22, 0x08	; 8
     406:	71 05       	cpc	r23, r1
     408:	e1 f6       	brne	.-72     	; 0x3c2 <ButtonCheck+0x1e>
    {
      buttonMode ^= (1<<buttonLoop); 
    }
    buttonLoop++;
  }
  DDRA = 0xFF;
     40a:	9f ef       	ldi	r25, 0xFF	; 255
     40c:	9a bb       	out	0x1a, r25	; 26
  return buttonMode;
     40e:	08 95       	ret

00000410 <ClockCounterCorrection>:
//                     ClockCounterCorrection(uint16_t displayValue)                                    
// Takes in a value and ensures it is in the format a clock would use
// Returns value in the format HH:MM 
//***********************************************************************************
uint16_t ClockCounterCorrection(uint16_t displayValue)
{
     410:	48 2f       	mov	r20, r24
  static uint8_t displayValueHours;
  static uint8_t displayValueMins;
  
  displayValueHours = (displayValue / 60);
     412:	28 2f       	mov	r18, r24
     414:	39 2f       	mov	r19, r25
     416:	a9 e8       	ldi	r26, 0x89	; 137
     418:	b8 e8       	ldi	r27, 0x88	; 136
     41a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__umulhisi3>
     41e:	9c 01       	movw	r18, r24
     420:	36 95       	lsr	r19
     422:	27 95       	ror	r18
     424:	32 95       	swap	r19
     426:	22 95       	swap	r18
     428:	2f 70       	andi	r18, 0x0F	; 15
     42a:	23 27       	eor	r18, r19
     42c:	3f 70       	andi	r19, 0x0F	; 15
     42e:	23 27       	eor	r18, r19
  displayValueMins  = (displayValue - (60 * displayValueHours));
  displayValue      = ((displayValueHours * 100) + displayValueMins);
     430:	8c e3       	ldi	r24, 0x3C	; 60
     432:	28 9f       	mul	r18, r24
     434:	40 19       	sub	r20, r0
     436:	11 24       	eor	r1, r1
     438:	84 2f       	mov	r24, r20
     43a:	90 e0       	ldi	r25, 0x00	; 0
  
  return displayValue;
}
     43c:	44 e6       	ldi	r20, 0x64	; 100
     43e:	24 9f       	mul	r18, r20
     440:	80 0d       	add	r24, r0
     442:	91 1d       	adc	r25, r1
     444:	11 24       	eor	r1, r1
     446:	08 95       	ret

00000448 <EncoderValueDirection>:
  //First If statment checks   0B000000__ 
  //Second If statment checks  0B0000__00 
  
  static uint8_t previousEncoderValue = 0x0F;

  if((previousEncoderValue & 0x03) == 0x00 && (currentEncoderValue & 0x03) == 0x01)
     448:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <previousEncoderValue.2197>
     44c:	29 2f       	mov	r18, r25
     44e:	23 70       	andi	r18, 0x03	; 3
     450:	71 f4       	brne	.+28     	; 0x46e <EncoderValueDirection+0x26>
     452:	28 2f       	mov	r18, r24
     454:	23 70       	andi	r18, 0x03	; 3
     456:	21 30       	cpi	r18, 0x01	; 1
     458:	e9 f0       	breq	.+58     	; 0x494 <EncoderValueDirection+0x4c>
     45a:	9c 70       	andi	r25, 0x0C	; 12
    previousEncoderValue = (currentEncoderValue & 0x0F);
    return CCW;   
  }
  
  //Checks the second Encoder
  if((previousEncoderValue & 0x0C) == 0x00 && (currentEncoderValue & 0x0C) == 0x04)
     45c:	91 f4       	brne	.+36     	; 0x482 <EncoderValueDirection+0x3a>
     45e:	98 2f       	mov	r25, r24
     460:	9c 70       	andi	r25, 0x0C	; 12
     462:	94 30       	cpi	r25, 0x04	; 4
     464:	b9 f0       	breq	.+46     	; 0x494 <EncoderValueDirection+0x4c>
  else if((previousEncoderValue & 0x0C) == 0x04 && (currentEncoderValue & 0x0C) == 0x00)
  {
    previousEncoderValue = (currentEncoderValue & 0x0F);
    return CCW;   
  }
  previousEncoderValue = currentEncoderValue;
     466:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <previousEncoderValue.2197>
  return 0;
     46a:	80 e0       	ldi	r24, 0x00	; 0
}
     46c:	08 95       	ret
  if((previousEncoderValue & 0x03) == 0x00 && (currentEncoderValue & 0x03) == 0x01)
  {
    previousEncoderValue = (currentEncoderValue & 0x0F);
    return CW;
  }
  else if((previousEncoderValue & 0x03) == 0x01 && (currentEncoderValue & 0x03) == 0x00)
     46e:	21 30       	cpi	r18, 0x01	; 1
     470:	a1 f7       	brne	.-24     	; 0x45a <EncoderValueDirection+0x12>
     472:	28 2f       	mov	r18, r24
     474:	23 70       	andi	r18, 0x03	; 3
     476:	89 f7       	brne	.-30     	; 0x45a <EncoderValueDirection+0x12>
  {
    previousEncoderValue = (currentEncoderValue & 0x0F);
     478:	8f 70       	andi	r24, 0x0F	; 15
     47a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <previousEncoderValue.2197>
    return CCW;   
     47e:	8f ef       	ldi	r24, 0xFF	; 255
     480:	08 95       	ret
  if((previousEncoderValue & 0x0C) == 0x00 && (currentEncoderValue & 0x0C) == 0x04)
  {
    previousEncoderValue = (currentEncoderValue & 0x0F);
    return CW;
  }
  else if((previousEncoderValue & 0x0C) == 0x04 && (currentEncoderValue & 0x0C) == 0x00)
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	81 f7       	brne	.-32     	; 0x466 <EncoderValueDirection+0x1e>
     486:	98 2f       	mov	r25, r24
     488:	9c 70       	andi	r25, 0x0C	; 12
     48a:	b1 f3       	breq	.-20     	; 0x478 <EncoderValueDirection+0x30>
  {
    previousEncoderValue = (currentEncoderValue & 0x0F);
    return CCW;   
  }
  previousEncoderValue = currentEncoderValue;
     48c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <previousEncoderValue.2197>
  return 0;
     490:	80 e0       	ldi	r24, 0x00	; 0
}
     492:	08 95       	ret
  
  static uint8_t previousEncoderValue = 0x0F;

  if((previousEncoderValue & 0x03) == 0x00 && (currentEncoderValue & 0x03) == 0x01)
  {
    previousEncoderValue = (currentEncoderValue & 0x0F);
     494:	8f 70       	andi	r24, 0x0F	; 15
     496:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <previousEncoderValue.2197>
    return CW;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	08 95       	ret

0000049e <__vector_8>:
//
// External interrupt 7 is on Port E bit 7. The interrupt is triggered on the
// rising edge of Port E bit 7.  The i/o clock must be running to detect the
// edge (not asynchronouslly triggered)
//******************************************************************************
ISR(INT7_vect){STC_interrupt = TRUE;}
     49e:	1f 92       	push	r1
     4a0:	0f 92       	push	r0
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	0f 92       	push	r0
     4a6:	11 24       	eor	r1, r1
     4a8:	8f 93       	push	r24
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <STC_interrupt>
     4b0:	8f 91       	pop	r24
     4b2:	0f 90       	pop	r0
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	0f 90       	pop	r0
     4b8:	1f 90       	pop	r1
     4ba:	18 95       	reti

000004bc <__vector_16>:
// Toggles COLON bits
// Counts Seconds, rolls over every 60, increments and rolls clock over 
// Counts up too 255 (which inidcates 1 sec with 32Khz clk & 128 prescale)
//*********************************************************************************
ISR(TIMER0_OVF_vect)
{
     4bc:	1f 92       	push	r1
     4be:	0f 92       	push	r0
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	0f 92       	push	r0
     4c4:	11 24       	eor	r1, r1
     4c6:	2f 93       	push	r18
     4c8:	3f 93       	push	r19
     4ca:	8f 93       	push	r24
     4cc:	9f 93       	push	r25
  static uint8_t currentSeconds = 0;
  static uint8_t snoozeTimer = 0;
  segment_data[2] ^= 0x03;   
     4ce:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <segment_data+0x2>
     4d2:	83 e0       	ldi	r24, 0x03	; 3
     4d4:	82 27       	eor	r24, r18
     4d6:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <segment_data+0x2>
  // Second Counter
  if(currentSeconds < 60)
     4da:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <currentSeconds.2208>
     4de:	8c 33       	cpi	r24, 0x3C	; 60
     4e0:	a0 f4       	brcc	.+40     	; 0x50a <__vector_16+0x4e>
  {
    if(snoozeFlag == SNOOZEON)
     4e2:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <snoozeFlag>
     4e6:	91 30       	cpi	r25, 0x01	; 1
     4e8:	29 f1       	breq	.+74     	; 0x534 <__vector_16+0x78>
     4ea:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <snoozeTimer.2209>
    {
      snoozeTimer++;
      segment_data[2] ^= 0x04;
    }
    
    currentSeconds++;
     4ee:	8f 5f       	subi	r24, 0xFF	; 255
     4f0:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <currentSeconds.2208>
  {
    currentTime++;
    currentSeconds = 0;
  }

  if(snoozeTimer == 10)
     4f4:	9a 30       	cpi	r25, 0x0A	; 10
     4f6:	c1 f0       	breq	.+48     	; 0x528 <__vector_16+0x6c>
  {
    snoozeFlag = SNOOZEALARM;
    snoozeTimer = 0;
  }
}
     4f8:	9f 91       	pop	r25
     4fa:	8f 91       	pop	r24
     4fc:	3f 91       	pop	r19
     4fe:	2f 91       	pop	r18
     500:	0f 90       	pop	r0
     502:	0f be       	out	0x3f, r0	; 63
     504:	0f 90       	pop	r0
     506:	1f 90       	pop	r1
     508:	18 95       	reti
    }
    
    currentSeconds++;
  }else
  {
    currentTime++;
     50a:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <currentTime>
     50e:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <currentTime+0x1>
     512:	01 96       	adiw	r24, 0x01	; 1
     514:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <currentTime+0x1>
     518:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <currentTime>
    currentSeconds = 0;
     51c:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <currentSeconds.2208>
     520:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <snoozeTimer.2209>
  }

  if(snoozeTimer == 10)
     524:	9a 30       	cpi	r25, 0x0A	; 10
     526:	41 f7       	brne	.-48     	; 0x4f8 <__vector_16+0x3c>
  {
    snoozeFlag = SNOOZEALARM;
     528:	82 e0       	ldi	r24, 0x02	; 2
     52a:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <snoozeFlag>
    snoozeTimer = 0;
     52e:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <snoozeTimer.2209>
  }
}
     532:	e2 cf       	rjmp	.-60     	; 0x4f8 <__vector_16+0x3c>
  // Second Counter
  if(currentSeconds < 60)
  {
    if(snoozeFlag == SNOOZEON)
    {
      snoozeTimer++;
     534:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <snoozeTimer.2209>
     538:	9f 5f       	subi	r25, 0xFF	; 255
     53a:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <snoozeTimer.2209>
      segment_data[2] ^= 0x04;
     53e:	37 e0       	ldi	r19, 0x07	; 7
     540:	23 27       	eor	r18, r19
     542:	20 93 79 01 	sts	0x0179, r18	; 0x800179 <segment_data+0x2>
     546:	d3 cf       	rjmp	.-90     	; 0x4ee <__vector_16+0x32>

00000548 <__vector_18>:
// Once SPACE char is received message is considered over
// When message is over, reset counter for filling buffer, and indicate message sent
//*********************************************************************************
char uart_buff[42] = {' '};
ISR(USART0_RX_vect)
{
     548:	1f 92       	push	r1
     54a:	0f 92       	push	r0
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	0f 92       	push	r0
     550:	11 24       	eor	r1, r1
     552:	0b b6       	in	r0, 0x3b	; 59
     554:	0f 92       	push	r0
     556:	8f 93       	push	r24
     558:	9f 93       	push	r25
     55a:	ef 93       	push	r30
     55c:	ff 93       	push	r31
  static uint8_t counter = 0;
  uart_buff[counter] = UDR0;
     55e:	8c b1       	in	r24, 0x0c	; 12
     560:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <counter.2216>
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	eb 5f       	subi	r30, 0xFB	; 251
     568:	fe 4f       	sbci	r31, 0xFE	; 254
     56a:	80 83       	st	Z, r24
  UDR0 = 0;
     56c:	1c b8       	out	0x0c, r1	; 12
  if(uart_buff[counter] == ' ')
     56e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <counter.2216>
     572:	e8 2f       	mov	r30, r24
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	eb 5f       	subi	r30, 0xFB	; 251
     578:	fe 4f       	sbci	r31, 0xFE	; 254
     57a:	90 81       	ld	r25, Z
     57c:	90 32       	cpi	r25, 0x20	; 32
     57e:	71 f0       	breq	.+28     	; 0x59c <__vector_18+0x54>
  {
    data_complete = 1;
    counter = 0;
  }else
  {
    counter++;
     580:	8f 5f       	subi	r24, 0xFF	; 255
     582:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <counter.2216>
  }
}
     586:	ff 91       	pop	r31
     588:	ef 91       	pop	r30
     58a:	9f 91       	pop	r25
     58c:	8f 91       	pop	r24
     58e:	0f 90       	pop	r0
     590:	0b be       	out	0x3b, r0	; 59
     592:	0f 90       	pop	r0
     594:	0f be       	out	0x3f, r0	; 63
     596:	0f 90       	pop	r0
     598:	1f 90       	pop	r1
     59a:	18 95       	reti
  static uint8_t counter = 0;
  uart_buff[counter] = UDR0;
  UDR0 = 0;
  if(uart_buff[counter] == ' ')
  {
    data_complete = 1;
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <data_complete>
    counter = 0;
     5a2:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <counter.2216>
     5a6:	ef cf       	rjmp	.-34     	; 0x586 <__vector_18+0x3e>

000005a8 <__vector_12>:
//                                   ISR(TIMER1_OVF_vect)                                    
// Triggered when TimerCounter1 overflows
//
//*********************************************************************************
ISR(TIMER1_COMPA_vect)
{   PORTD ^= 0b10000000;      //flips the bit, creating a tone
     5a8:	1f 92       	push	r1
     5aa:	0f 92       	push	r0
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	0f 92       	push	r0
     5b0:	11 24       	eor	r1, r1
     5b2:	8f 93       	push	r24
     5b4:	82 b3       	in	r24, 0x12	; 18
     5b6:	80 58       	subi	r24, 0x80	; 128
     5b8:	82 bb       	out	0x12, r24	; 18
}
     5ba:	8f 91       	pop	r24
     5bc:	0f 90       	pop	r0
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	0f 90       	pop	r0
     5c2:	1f 90       	pop	r1
     5c4:	18 95       	reti

000005c6 <AlarmSetMode>:
// Function entered when the user presses the first button on the button board
// loops until user to inputs time (w/ encoder)
// Once user presses same button, Alarm is set and function is exitted// 
//*********************************************************************************
uint16_t AlarmSetMode(uint8_t alarmOffset)
{
     5c6:	cf 93       	push	r28
     5c8:	c8 2f       	mov	r28, r24
/*********************************************************************/
//              SPI_read(uint8_t currentBarGraph)
// Sends the bar graph data and then reads the SPI port.
/*********************************************************************/
uint16_t SPI_read(uint8_t currentBarGraph){
  PORTB &= 0x7F;
     5ca:	c7 98       	cbi	0x18, 7	; 24
  SPDR = currentBarGraph;
     5cc:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){} //wait till 8 bits have been sent
     5ce:	77 9b       	sbis	0x0e, 7	; 14
     5d0:	fe cf       	rjmp	.-4      	; 0x5ce <AlarmSetMode+0x8>
  //PORTD = 0xFF;
  //PORTD = 0x00;
  PORTE = 0x00;		//TODO: May cause problems with RADIO
     5d2:	13 b8       	out	0x03, r1	; 3
  PORTE = 0xFF;
     5d4:	8f ef       	ldi	r24, 0xFF	; 255
     5d6:	83 b9       	out	0x03, r24	; 3
  return(SPDR); //return incoming data from SPDR
     5d8:	8f b1       	in	r24, 0x0f	; 15
  static uint8_t  currentEncoderValue  = 0;
  static uint16_t encodersDisplayValue  = 0;
  int8_t currentAdjustmentValue = 0;
  static uint16_t  offsetVal = 1439;
  currentEncoderValue = (SPI_read(currentAdjustmentValue));  
  currentAdjustmentValue = EncoderValueDirection(currentEncoderValue);
     5da:	0e 94 24 02 	call	0x448	; 0x448 <EncoderValueDirection>
     5de:	48 2f       	mov	r20, r24
  encodersDisplayValue += currentAdjustmentValue;
     5e0:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <encodersDisplayValue.2226>
     5e4:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <encodersDisplayValue.2226+0x1>
     5e8:	c9 01       	movw	r24, r18
     5ea:	84 0f       	add	r24, r20
     5ec:	91 1d       	adc	r25, r1
     5ee:	47 fd       	sbrc	r20, 7
     5f0:	9a 95       	dec	r25
     5f2:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <encodersDisplayValue.2226+0x1>
     5f6:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <encodersDisplayValue.2226>
  // Checks if the clock will roll backwards behind 0
  // 1439 is clock time for 23 : 59
  if(!alarmOffset)
     5fa:	c1 11       	cpse	r28, r1
     5fc:	1b c0       	rjmp	.+54     	; 0x634 <AlarmSetMode+0x6e>
  {
    offsetVal = 1439;
     5fe:	2f e9       	ldi	r18, 0x9F	; 159
     600:	35 e0       	ldi	r19, 0x05	; 5
     602:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <offsetVal.2228+0x1>
     606:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <offsetVal.2228>
  }else{
    offsetVal = 779;  
  }

  if((encodersDisplayValue == 0) && (currentAdjustmentValue == CCW)) 
     60a:	00 97       	sbiw	r24, 0x00	; 0
     60c:	21 f4       	brne	.+8      	; 0x616 <AlarmSetMode+0x50>
     60e:	4f 3f       	cpi	r20, 0xFF	; 255
     610:	c1 f0       	breq	.+48     	; 0x642 <AlarmSetMode+0x7c>
  {
    if(!offsetVal){ encodersDisplayValue = 0;}
    else{encodersDisplayValue = 0;}//	    encodersDisplayValue = 60;}
  }
  return encodersDisplayValue;
}
     612:	cf 91       	pop	r28
     614:	08 95       	ret
  }

  if((encodersDisplayValue == 0) && (currentAdjustmentValue == CCW)) 
  {
    encodersDisplayValue = offsetVal;
  }else if(encodersDisplayValue > offsetVal)
     616:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <offsetVal.2228>
     61a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <offsetVal.2228+0x1>
     61e:	28 17       	cp	r18, r24
     620:	39 07       	cpc	r19, r25
     622:	b8 f7       	brcc	.-18     	; 0x612 <AlarmSetMode+0x4c>
  {
    if(!offsetVal){ encodersDisplayValue = 0;}
     624:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <encodersDisplayValue.2226+0x1>
     628:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <encodersDisplayValue.2226>
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
    else{encodersDisplayValue = 0;}//	    encodersDisplayValue = 60;}
  }
  return encodersDisplayValue;
}
     630:	cf 91       	pop	r28
     632:	08 95       	ret
  // 1439 is clock time for 23 : 59
  if(!alarmOffset)
  {
    offsetVal = 1439;
  }else{
    offsetVal = 779;  
     634:	2b e0       	ldi	r18, 0x0B	; 11
     636:	33 e0       	ldi	r19, 0x03	; 3
     638:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <offsetVal.2228+0x1>
     63c:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <offsetVal.2228>
     640:	e4 cf       	rjmp	.-56     	; 0x60a <AlarmSetMode+0x44>
  }

  if((encodersDisplayValue == 0) && (currentAdjustmentValue == CCW)) 
  {
    encodersDisplayValue = offsetVal;
     642:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <offsetVal.2228>
     646:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <offsetVal.2228+0x1>
     64a:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <encodersDisplayValue.2226+0x1>
     64e:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <encodersDisplayValue.2226>
  {
    if(!offsetVal){ encodersDisplayValue = 0;}
    else{encodersDisplayValue = 0;}//	    encodersDisplayValue = 60;}
  }
  return encodersDisplayValue;
}
     652:	cf 91       	pop	r28
     654:	08 95       	ret

00000656 <VolumeSetMode>:
/*********************************************************************/
//              SPI_read(uint8_t currentBarGraph)
// Sends the bar graph data and then reads the SPI port.
/*********************************************************************/
uint16_t SPI_read(uint8_t currentBarGraph){
  PORTB &= 0x7F;
     656:	c7 98       	cbi	0x18, 7	; 24
  SPDR = currentBarGraph;
     658:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){} //wait till 8 bits have been sent
     65a:	77 9b       	sbis	0x0e, 7	; 14
     65c:	fe cf       	rjmp	.-4      	; 0x65a <VolumeSetMode+0x4>
  //PORTD = 0xFF;
  //PORTD = 0x00;
  PORTE = 0x00;		//TODO: May cause problems with RADIO
     65e:	13 b8       	out	0x03, r1	; 3
  PORTE = 0xFF;
     660:	8f ef       	ldi	r24, 0xFF	; 255
     662:	83 b9       	out	0x03, r24	; 3
  return(SPDR); //return incoming data from SPDR
     664:	8f b1       	in	r24, 0x0f	; 15
  static uint8_t  currentEncoderValue  = 0;
  static uint16_t encodersVolumeValue  = 0xE0;
  int8_t currentAdjustmentValue = 0;
  
  currentEncoderValue = (SPI_read(currentAdjustmentValue));  
  currentAdjustmentValue = EncoderValueDirection(currentEncoderValue);
     666:	0e 94 24 02 	call	0x448	; 0x448 <EncoderValueDirection>
     66a:	48 2f       	mov	r20, r24
  encodersVolumeValue += currentAdjustmentValue;
     66c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     670:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     674:	c9 01       	movw	r24, r18
     676:	84 0f       	add	r24, r20
     678:	91 1d       	adc	r25, r1
     67a:	47 fd       	sbrc	r20, 7
     67c:	9a 95       	dec	r25
     67e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     682:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  if((encodersVolumeValue == 0) && (currentAdjustmentValue == CCW)) 
     686:	00 97       	sbiw	r24, 0x00	; 0
     688:	19 f4       	brne	.+6      	; 0x690 <VolumeSetMode+0x3a>
     68a:	4f 3f       	cpi	r20, 0xFF	; 255
     68c:	61 f0       	breq	.+24     	; 0x6a6 <VolumeSetMode+0x50>
  }else if(encodersVolumeValue > 0xFF)
  {
    encodersVolumeValue = 0;
  }
  return encodersVolumeValue*2;
}
     68e:	08 95       	ret
  currentAdjustmentValue = EncoderValueDirection(currentEncoderValue);
  encodersVolumeValue += currentAdjustmentValue;
  if((encodersVolumeValue == 0) && (currentAdjustmentValue == CCW)) 
  {
    encodersVolumeValue = 0xFF;
  }else if(encodersVolumeValue > 0xFF)
     690:	8f 3f       	cpi	r24, 0xFF	; 255
     692:	91 05       	cpc	r25, r1
     694:	89 f0       	breq	.+34     	; 0x6b8 <VolumeSetMode+0x62>
     696:	80 f0       	brcs	.+32     	; 0x6b8 <VolumeSetMode+0x62>
  {
    encodersVolumeValue = 0;
     698:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
     69c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	90 e0       	ldi	r25, 0x00	; 0
  }
  return encodersVolumeValue*2;
}
     6a4:	08 95       	ret
  currentEncoderValue = (SPI_read(currentAdjustmentValue));  
  currentAdjustmentValue = EncoderValueDirection(currentEncoderValue);
  encodersVolumeValue += currentAdjustmentValue;
  if((encodersVolumeValue == 0) && (currentAdjustmentValue == CCW)) 
  {
    encodersVolumeValue = 0xFF;
     6a6:	8f ef       	ldi	r24, 0xFF	; 255
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     6ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     6b2:	8e ef       	ldi	r24, 0xFE	; 254
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	08 95       	ret
     6b8:	88 0f       	add	r24, r24
     6ba:	99 1f       	adc	r25, r25
     6bc:	08 95       	ret

000006be <LocalTempSensor>:
// Checks the temperature of the onboard temperature sensor
// Outputs the temperature to the LCD screen
//***********************************************************************************
void LocalTempSensor(uint16_t lm73_temp)
{
  twi_start_rd(LM73_READ,lm73_rd_buf,2);//................ //read temperature data from LM73 (2 bytes) 
     6be:	42 e0       	ldi	r20, 0x02	; 2
     6c0:	60 e6       	ldi	r22, 0x60	; 96
     6c2:	72 e0       	ldi	r23, 0x02	; 2
     6c4:	81 e9       	ldi	r24, 0x91	; 145
     6c6:	0e 94 1c 0b 	call	0x1638	; 0x1638 <twi_start_rd>
     6ca:	8f ec       	ldi	r24, 0xCF	; 207
     6cc:	97 e0       	ldi	r25, 0x07	; 7
     6ce:	01 97       	sbiw	r24, 0x01	; 1
     6d0:	f1 f7       	brne	.-4      	; 0x6ce <LocalTempSensor+0x10>
     6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <LocalTempSensor+0x16>
     6d4:	00 00       	nop
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     6d6:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <lm73_rd_buf>
     6da:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <lm73_rd_buf+0x1>
     6de:	98 27       	eor	r25, r24
     6e0:	89 27       	eor	r24, r25
     6e2:	98 27       	eor	r25, r24
     6e4:	4a e0       	ldi	r20, 0x0A	; 10
     6e6:	69 ed       	ldi	r22, 0xD9	; 217
     6e8:	71 e0       	ldi	r23, 0x01	; 1
     6ea:	88 0f       	add	r24, r24
     6ec:	89 2f       	mov	r24, r25
     6ee:	88 1f       	adc	r24, r24
     6f0:	99 0b       	sbc	r25, r25
     6f2:	91 95       	neg	r25
     6f4:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__itoa_ncheck>
  lm73_temp = (lm73_temp<<8);//................ //shift it into upper byte 
  lm73_temp |= lm73_rd_buf[1];//................ //"OR" in the low temp byte to lm73_temp 
  itoa(lm73_temp>>7 , lcd_string_array, 10);//................ //convert to string in array with itoa() from avr-libc                           

  // Add message to LCD_message buffer
  LCD_message[0] = 'I';
     6f8:	89 e4       	ldi	r24, 0x49	; 73
     6fa:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <LCD_message>
  LCD_message[1] = 'N';
     6fe:	8e e4       	ldi	r24, 0x4E	; 78
     700:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <LCD_message+0x1>
  LCD_message[2] = 'T';
     704:	24 e5       	ldi	r18, 0x54	; 84
     706:	20 93 31 01 	sts	0x0131, r18	; 0x800131 <LCD_message+0x2>
  LCD_message[3] = ':';
     70a:	9a e3       	ldi	r25, 0x3A	; 58
     70c:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <LCD_message+0x3>
  LCD_message[4] = lcd_string_array[0];
     710:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <lcd_string_array>
     714:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <LCD_message+0x4>
  LCD_message[5] = lcd_string_array[1];
     718:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <lcd_string_array+0x1>
     71c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <LCD_message+0x5>
  LCD_message[6] = ' ';
     720:	80 e2       	ldi	r24, 0x20	; 32
     722:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <LCD_message+0x6>
  LCD_message[7] = 'E';
     726:	35 e4       	ldi	r19, 0x45	; 69
     728:	30 93 36 01 	sts	0x0136, r19	; 0x800136 <LCD_message+0x7>
  LCD_message[8] = 'X';
     72c:	38 e5       	ldi	r19, 0x58	; 88
     72e:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <LCD_message+0x8>
  LCD_message[9] = 'T';
     732:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <LCD_message+0x9>
  LCD_message[10] = ':';
     736:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <LCD_message+0xa>
  LCD_message[11] = uart_buff[1];
     73a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <uart_buff+0x1>
     73e:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <LCD_message+0xb>
  LCD_message[12] = uart_buff[2];
     742:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <uart_buff+0x2>
     746:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <LCD_message+0xc>
  LCD_message[13] = uart_buff[3];
     74a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <uart_buff+0x3>
     74e:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <LCD_message+0xd>
  LCD_message[14] = ' ';
     752:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <LCD_message+0xe>
  LCD_message[15] = ' ';
     756:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <LCD_message+0xf>
  
  // Print out either empty spaces or ALARM if alarm activated
  uint8_t fill;
  if(alarmGlobal == OFF)
     75a:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <alarmGlobal>
     75e:	88 23       	and	r24, r24
     760:	09 f1       	breq	.+66     	; 0x7a4 <LocalTempSensor+0xe6>
  {
    fill = 16;
  }else{
    LCD_message[16] = 'A';
     762:	81 e4       	ldi	r24, 0x41	; 65
     764:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <LCD_message+0x10>
    LCD_message[17] = 'L';
     768:	9c e4       	ldi	r25, 0x4C	; 76
     76a:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <LCD_message+0x11>
    LCD_message[18] = 'A';
     76e:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <LCD_message+0x12>
    LCD_message[19] = 'R';
     772:	82 e5       	ldi	r24, 0x52	; 82
     774:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <LCD_message+0x13>
    LCD_message[20] = 'M';
     778:	8d e4       	ldi	r24, 0x4D	; 77
     77a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <LCD_message+0x14>
    fill = 21;
     77e:	85 e1       	ldi	r24, 0x15	; 21
  }
  while(fill != 41)
  {
    LCD_message[fill] = ' ';
     780:	90 e2       	ldi	r25, 0x20	; 32
     782:	e8 2f       	mov	r30, r24
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	e1 5d       	subi	r30, 0xD1	; 209
     788:	fe 4f       	sbci	r31, 0xFE	; 254
     78a:	90 83       	st	Z, r25
    fill++;
     78c:	8f 5f       	subi	r24, 0xFF	; 255
    LCD_message[18] = 'A';
    LCD_message[19] = 'R';
    LCD_message[20] = 'M';
    fill = 21;
  }
  while(fill != 41)
     78e:	89 32       	cpi	r24, 0x29	; 41
     790:	c1 f7       	brne	.-16     	; 0x782 <LocalTempSensor+0xc4>
    fill++;
  }
  
  // Print to LCD if data has completed sending
  // Also needs the encoders to not be in use
  if((buttonPos == 0) && data_complete)
     792:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
     796:	81 11       	cpse	r24, r1
     798:	04 c0       	rjmp	.+8      	; 0x7a2 <LocalTempSensor+0xe4>
     79a:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <data_complete>
     79e:	81 11       	cpse	r24, r1
     7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <LocalTempSensor+0xea>
     7a2:	08 95       	ret
  
  // Print out either empty spaces or ALARM if alarm activated
  uint8_t fill;
  if(alarmGlobal == OFF)
  {
    fill = 16;
     7a4:	80 e1       	ldi	r24, 0x10	; 16
     7a6:	ec cf       	rjmp	.-40     	; 0x780 <LocalTempSensor+0xc2>
  
  // Print to LCD if data has completed sending
  // Also needs the encoders to not be in use
  if((buttonPos == 0) && data_complete)
  {
    refresh_lcd(LCD_message); 
     7a8:	8f e2       	ldi	r24, 0x2F	; 47
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <refresh_lcd>

000007b0 <radio_init>:
//   (^ edge int from radio) bit 7--| | | | | | | |--bit 0 USART0 RX
//(shift/load_n for 74HC165) bit 6----| | | | | |----bit 1 USART0 TX
//                           bit 5------| | | |------bit 2 (new radio reset, active high)
//                  (unused) bit 4--------| |--------bit 3 (TCNT3 PWM output for volume control)

DDRE  |= 0x04; //Port E bit 2 is active high reset for radio 
     7b0:	12 9a       	sbi	0x02, 2	; 2
DDRE  |= 0x40; //Port E bit 6 is shift/load_n for encoder 74HC165
     7b2:	16 9a       	sbi	0x02, 6	; 2
DDRE  |= 0x08; //Port E bit 3 is TCNT3 PWM output for volume
     7b4:	13 9a       	sbi	0x02, 3	; 2
DDRE  |= VOL_PIN;
     7b6:	82 b1       	in	r24, 0x02	; 2
     7b8:	85 60       	ori	r24, 0x05	; 5
     7ba:	82 b9       	out	0x02, r24	; 2
PORTE |= 0x04; //radio reset is on at powerup (active high)
     7bc:	1a 9a       	sbi	0x03, 2	; 3
PORTE |= 0x40; //pulse low to load switch values, else its in shift mode
     7be:	1e 9a       	sbi	0x03, 6	; 3


//Given the hardware setup reflected above, here is the radio reset sequence.
//hardware reset of Si4734
PORTE &= ~(1<<PE7); //int2 initially low to sense TWI mode
     7c0:	1f 98       	cbi	0x03, 7	; 3
DDRE  |= 0x80;      //turn on Port E bit 7 to drive it low
     7c2:	17 9a       	sbi	0x02, 7	; 2
PORTE |=  (1<<PE2); //hardware reset Si4734 
     7c4:	1a 9a       	sbi	0x03, 2	; 3
     7c6:	8f e1       	ldi	r24, 0x1F	; 31
     7c8:	93 e0       	ldi	r25, 0x03	; 3
     7ca:	01 97       	sbiw	r24, 0x01	; 1
     7cc:	f1 f7       	brne	.-4      	; 0x7ca <radio_init+0x1a>
     7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <radio_init+0x20>
     7d0:	00 00       	nop
_delay_us(200);     //hold for 200us, 100us by spec         
PORTE &= ~(1<<PE2); //release reset 
     7d2:	1a 98       	cbi	0x03, 2	; 3
     7d4:	90 ea       	ldi	r25, 0xA0	; 160
     7d6:	9a 95       	dec	r25
     7d8:	f1 f7       	brne	.-4      	; 0x7d6 <radio_init+0x26>
_delay_us(30);      //5us required because of my slow I2C translators I suspect
                    //Si code in "low" has 30us delay...no explaination
DDRE  &= ~(0x80);   //now Port E bit 7 becomes input from the radio interrupt
     7da:	17 98       	cbi	0x02, 7	; 2

//Once its setup, you can set the station and get the received signal strength.

current_fm_freq = 8870; //0x2706, arg2, arg3; 99.9Mhz, 200khz steps
     7dc:	86 ea       	ldi	r24, 0xA6	; 166
     7de:	92 e2       	ldi	r25, 0x22	; 34
     7e0:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <current_fm_freq+0x1>
     7e4:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <current_fm_freq>
fm_pwr_up();            //power up radio
     7e8:	0e 94 6f 05 	call	0xade	; 0xade <fm_pwr_up>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7ec:	2f ef       	ldi	r18, 0xFF	; 255
     7ee:	85 ea       	ldi	r24, 0xA5	; 165
     7f0:	9e e0       	ldi	r25, 0x0E	; 14
     7f2:	21 50       	subi	r18, 0x01	; 1
     7f4:	80 40       	sbci	r24, 0x00	; 0
     7f6:	90 40       	sbci	r25, 0x00	; 0
     7f8:	e1 f7       	brne	.-8      	; 0x7f2 <radio_init+0x42>
     7fa:	00 c0       	rjmp	.+0      	; 0x7fc <radio_init+0x4c>
     7fc:	00 00       	nop
_delay_ms(300);
while(twi_busy()){} //spin while TWI is busy 
     7fe:	0e 94 07 0b 	call	0x160e	; 0x160e <twi_busy>
     802:	81 11       	cpse	r24, r1
     804:	fc cf       	rjmp	.-8      	; 0x7fe <radio_init+0x4e>
fm_tune_freq();     //tune to frequency      
     806:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <fm_tune_freq>

0000080a <radio_on>:
}

//RADIO ON
void radio_on()
{
fm_pwr_up();            //power up radio
     80a:	0e 94 6f 05 	call	0xade	; 0xade <fm_pwr_up>
     80e:	2f ef       	ldi	r18, 0xFF	; 255
     810:	85 ea       	ldi	r24, 0xA5	; 165
     812:	9e e0       	ldi	r25, 0x0E	; 14
     814:	21 50       	subi	r18, 0x01	; 1
     816:	80 40       	sbci	r24, 0x00	; 0
     818:	90 40       	sbci	r25, 0x00	; 0
     81a:	e1 f7       	brne	.-8      	; 0x814 <radio_on+0xa>
     81c:	00 c0       	rjmp	.+0      	; 0x81e <radio_on+0x14>
     81e:	00 00       	nop
_delay_ms(300);
while(twi_busy()){} //spin while TWI is busy 
     820:	0e 94 07 0b 	call	0x160e	; 0x160e <twi_busy>
     824:	81 11       	cpse	r24, r1
     826:	fc cf       	rjmp	.-8      	; 0x820 <radio_on+0x16>
fm_tune_freq();     //tune to frequency      
     828:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <fm_tune_freq>

0000082c <init>:
{
//  TCNT0 - Norm Mode | Using external 32kHz clock | 128 Prescale	!Count to 250 using uint8_t to reach 1 second for clock!
//  TCNT1 - CTC  Mode | Pick freuquency      | Output too PD7		!Outputs to summing amp, which gets outputted to speaker!
//  TCNT2 - Fast PWM  | Output to PB7 (OC2)  				!Controls brightness of LED Display!
//  TCNT3 - Fast PWM  | Output to PE5 (OC3C)				!Controls volume to Audio Amp!
DDRA  = 0xFF;	      		    //set port A as input  				
     82c:	8f ef       	ldi	r24, 0xFF	; 255
     82e:	8a bb       	out	0x1a, r24	; 26
DDRB  = 0xFF; 	      		    //set port B as outputs
     830:	87 bb       	out	0x17, r24	; 23
DDRD  |= (1 << PD7);   		    //Sets PortD pin2 to output
     832:	8f 9a       	sbi	0x11, 7	; 17
DDRE  |= (1 << PE5) | (1 << PE6);   //Sets PortE Pin 6 & 5 to output
     834:	82 b1       	in	r24, 0x02	; 2
     836:	80 66       	ori	r24, 0x60	; 96
     838:	82 b9       	out	0x02, r24	; 2
DDRE  |= (1 << PE2);		    //Sets PortE Pin 2 for Radio_reset to output
     83a:	12 9a       	sbi	0x02, 2	; 2
PORTD = 0x00;   		    //set port D to LOW
     83c:	12 ba       	out	0x12, r1	; 18
PORTB = 0x10;   		    //set port B to start with LED1  	
     83e:	80 e1       	ldi	r24, 0x10	; 16
     840:	88 bb       	out	0x18, r24	; 24

ASSR   |= (1 << AS0);			//Use external 32kHz clock 
     842:	80 b7       	in	r24, 0x30	; 48
     844:	88 60       	ori	r24, 0x08	; 8
     846:	80 bf       	out	0x30, r24	; 48
SPCR   |= (1 << SPE)   | (1 << MSTR);	//Enable SPI communication in mastermode
     848:	8d b1       	in	r24, 0x0d	; 13
     84a:	80 65       	ori	r24, 0x50	; 80
     84c:	8d b9       	out	0x0d, r24	; 13
SPSR    = (1 << SPI2X); 		//SPI at 2x speed (8 MHz)  
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	8e b9       	out	0x0e, r24	; 14
TIMSK  |= (1 << TOIE0) | (1 << OCIE1A);	//enable interrupt on compare & overflow of TCNT1
     852:	87 b7       	in	r24, 0x37	; 55
     854:	81 61       	ori	r24, 0x11	; 17
     856:	87 bf       	out	0x37, r24	; 55
TCCR0  |= (1 << CS00)  | (1 << CS02);	//normal mode, prescale by 128
     858:	83 b7       	in	r24, 0x33	; 51
     85a:	85 60       	ori	r24, 0x05	; 5
     85c:	83 bf       	out	0x33, r24	; 51
TCCR1A  = 0;
     85e:	1f bc       	out	0x2f, r1	; 47
TCCR1B |= (1 << WGM12); 		//CTC mode clear at TOP immediate
     860:	8e b5       	in	r24, 0x2e	; 46
     862:	88 60       	ori	r24, 0x08	; 8
     864:	8e bd       	out	0x2e, r24	; 46
TCCR1C  = 0;
     866:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
TCCR3A |= (1 << COM3C1) | (1 << WGM30);	//Set as output compare to OC3C (PE5)
     86a:	eb e8       	ldi	r30, 0x8B	; 139
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	80 81       	ld	r24, Z
     870:	89 60       	ori	r24, 0x09	; 9
     872:	80 83       	st	Z, r24
TCCR3A |= (1 << WGM32);
     874:	80 81       	ld	r24, Z
     876:	88 60       	ori	r24, 0x08	; 8
     878:	80 83       	st	Z, r24
TCCR3B |= (1 << WGM32) | (1 << CS00); 
     87a:	ea e8       	ldi	r30, 0x8A	; 138
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	80 81       	ld	r24, Z
     880:	89 60       	ori	r24, 0x09	; 9
     882:	80 83       	st	Z, r24
OCR1A  = 0xF0F;
     884:	8f e0       	ldi	r24, 0x0F	; 15
     886:	9f e0       	ldi	r25, 0x0F	; 15
     888:	9b bd       	out	0x2b, r25	; 43
     88a:	8a bd       	out	0x2a, r24	; 42
//OCR3C  = 0xFF;		//Volume
TCCR2  |= (1 << WGM21) | (1 << WGM20) | (1 << COM21) | (1 << CS21); // Set TCNT2 to fast pwm outputting to OC2 (PB7)
     88c:	85 b5       	in	r24, 0x25	; 37
     88e:	8a 66       	ori	r24, 0x6A	; 106
     890:	85 bd       	out	0x25, r24	; 37
ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); 		    // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
     892:	86 b1       	in	r24, 0x06	; 6
     894:	87 60       	ori	r24, 0x07	; 7
     896:	86 b9       	out	0x06, r24	; 6
ADMUX  |= (1 << REFS0); // Set ADC reference to AVCC
     898:	3e 9a       	sbi	0x07, 6	; 7
ADMUX  |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
     89a:	3d 9a       	sbi	0x07, 5	; 7
ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode
     89c:	35 9a       	sbi	0x06, 5	; 6
ADCSRA |= (1 << ADEN);  // Enable ADC
     89e:	37 9a       	sbi	0x06, 7	; 6
ADCSRA |= (1 << ADSC);  // Start A2D Conversions
     8a0:	36 9a       	sbi	0x06, 6	; 6
lcd_init();
     8a2:	0e 94 05 08 	call	0x100a	; 0x100a <lcd_init>
init_twi();//................ //initalize TWI (twi_master.h)  
     8a6:	0e 94 2d 0b 	call	0x165a	; 0x165a <init_twi>
uart_init();
     8aa:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <uart_init>
sei();
     8ae:	78 94       	sei
     8b0:	08 95       	ret

000008b2 <get_int_status>:
//
//TODO: update for interrupts
// 
uint8_t get_int_status(){

    si4734_wr_buf[0] = GET_INT_STATUS;              
     8b2:	84 e1       	ldi	r24, 0x14	; 20
     8b4:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <si4734_wr_buf>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1); //send get_int_status command
     8b8:	41 e0       	ldi	r20, 0x01	; 1
     8ba:	6d e9       	ldi	r22, 0x9D	; 157
     8bc:	71 e0       	ldi	r23, 0x01	; 1
     8be:	82 e2       	ldi	r24, 0x22	; 34
     8c0:	0e 94 0b 0b 	call	0x1616	; 0x1616 <twi_start_wr>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
     8c4:	0e 94 07 0b 	call	0x160e	; 0x160e <twi_busy>
     8c8:	81 11       	cpse	r24, r1
     8ca:	fc cf       	rjmp	.-8      	; 0x8c4 <get_int_status+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8cc:	8f ea       	ldi	r24, 0xAF	; 175
     8ce:	94 e0       	ldi	r25, 0x04	; 4
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	f1 f7       	brne	.-4      	; 0x8d0 <get_int_status+0x1e>
     8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <get_int_status+0x24>
     8d6:	00 00       	nop
    _delay_us(300);        //si4734 process delay
    twi_start_rd(SI4734_ADDRESS, si4734_rd_buf, 1); //get the interrupt status 
     8d8:	41 e0       	ldi	r20, 0x01	; 1
     8da:	6a ec       	ldi	r22, 0xCA	; 202
     8dc:	71 e0       	ldi	r23, 0x01	; 1
     8de:	82 e2       	ldi	r24, 0x22	; 34
     8e0:	0e 94 1c 0b 	call	0x1638	; 0x1638 <twi_start_rd>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
     8e4:	0e 94 07 0b 	call	0x160e	; 0x160e <twi_busy>
     8e8:	81 11       	cpse	r24, r1
     8ea:	fc cf       	rjmp	.-8      	; 0x8e4 <get_int_status+0x32>
    return(si4734_rd_buf[0]);
}
     8ec:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <si4734_rd_buf>
     8f0:	08 95       	ret

000008f2 <fm_tune_freq>:
//
//takes current_fm_freq and sends it to the radio chip
//

void fm_tune_freq(){
  si4734_wr_buf[0] = 0x20;  //fm tune command
     8f2:	80 e2       	ldi	r24, 0x20	; 32
     8f4:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <si4734_wr_buf>
  si4734_wr_buf[1] = 0x00;  //no FREEZE and no FAST tune
     8f8:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <si4734_wr_buf+0x1>
  si4734_wr_buf[2] = (uint8_t)(current_fm_freq >> 8); //freq high byte
     8fc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <current_fm_freq>
     900:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <current_fm_freq+0x1>
     904:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <si4734_wr_buf+0x2>
  si4734_wr_buf[3] = (uint8_t)(current_fm_freq);      //freq low byte
     908:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <si4734_wr_buf+0x3>
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior
     90c:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <si4734_wr_buf+0x4>
  //send fm tune command
  STC_interrupt = FALSE;
     910:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <STC_interrupt>
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 5);
     914:	45 e0       	ldi	r20, 0x05	; 5
     916:	6d e9       	ldi	r22, 0x9D	; 157
     918:	71 e0       	ldi	r23, 0x01	; 1
     91a:	82 e2       	ldi	r24, 0x22	; 34
     91c:	0e 94 0b 0b 	call	0x1616	; 0x1616 <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
     920:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <STC_interrupt>
     924:	88 23       	and	r24, r24
     926:	e1 f3       	breq	.-8      	; 0x920 <fm_tune_freq+0x2e>
}
     928:	08 95       	ret

0000092a <am_tune_freq>:
//
//takes current_am_freq and sends it to the radio chip
//

void am_tune_freq(){
  si4734_wr_buf[0] = AM_TUNE_FREQ; //am tune command
     92a:	80 e4       	ldi	r24, 0x40	; 64
     92c:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <si4734_wr_buf>
  si4734_wr_buf[1] = 0x00;         //no FAST tune
     930:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <si4734_wr_buf+0x1>
  si4734_wr_buf[2] = (uint8_t)(current_am_freq >> 8); //freq high byte
     934:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <current_am_freq>
     938:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <current_am_freq+0x1>
     93c:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <si4734_wr_buf+0x2>
  si4734_wr_buf[3] = (uint8_t)(current_am_freq);      //freq low byte
     940:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <si4734_wr_buf+0x3>
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
     944:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <si4734_wr_buf+0x4>
  si4734_wr_buf[5] = 0x00;  //antenna tuning capactior low byte
     948:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <si4734_wr_buf+0x5>
  //send am tune command
  STC_interrupt = FALSE;
     94c:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <STC_interrupt>
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
     950:	46 e0       	ldi	r20, 0x06	; 6
     952:	6d e9       	ldi	r22, 0x9D	; 157
     954:	71 e0       	ldi	r23, 0x01	; 1
     956:	82 e2       	ldi	r24, 0x22	; 34
     958:	0e 94 0b 0b 	call	0x1616	; 0x1616 <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
     95c:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <STC_interrupt>
     960:	88 23       	and	r24, r24
     962:	e1 f3       	breq	.-8      	; 0x95c <am_tune_freq+0x32>
}
     964:	08 95       	ret

00000966 <sw_tune_freq>:
//
//takes current_sw_freq and sends it to the radio chip
//antcap low byte is 0x01 as per datasheet

void sw_tune_freq(){
  si4734_wr_buf[0] = 0x40;  //am tune command
     966:	ed e9       	ldi	r30, 0x9D	; 157
     968:	f1 e0       	ldi	r31, 0x01	; 1
     96a:	80 e4       	ldi	r24, 0x40	; 64
     96c:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x00;  //no FAST tune
     96e:	11 82       	std	Z+1, r1	; 0x01
  si4734_wr_buf[2] = (uint8_t)(current_sw_freq >> 8); //freq high byte
     970:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <current_sw_freq>
     974:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <current_sw_freq+0x1>
     978:	92 83       	std	Z+2, r25	; 0x02
  si4734_wr_buf[3] = (uint8_t)(current_sw_freq);      //freq low byte
     97a:	83 83       	std	Z+3, r24	; 0x03
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
     97c:	14 82       	std	Z+4, r1	; 0x04
  si4734_wr_buf[5] = 0x01;  //antenna tuning capactior low byte 
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	85 83       	std	Z+5, r24	; 0x05
  //send am tune command
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
     982:	46 e0       	ldi	r20, 0x06	; 6
     984:	bf 01       	movw	r22, r30
     986:	82 e2       	ldi	r24, 0x22	; 34
     988:	0e 94 0b 0b 	call	0x1616	; 0x1616 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     98c:	2f ef       	ldi	r18, 0xFF	; 255
     98e:	87 ee       	ldi	r24, 0xE7	; 231
     990:	93 e0       	ldi	r25, 0x03	; 3
     992:	21 50       	subi	r18, 0x01	; 1
     994:	80 40       	sbci	r24, 0x00	; 0
     996:	90 40       	sbci	r25, 0x00	; 0
     998:	e1 f7       	brne	.-8      	; 0x992 <sw_tune_freq+0x2c>
     99a:	00 c0       	rjmp	.+0      	; 0x99c <sw_tune_freq+0x36>
     99c:	00 00       	nop
     99e:	08 95       	ret

000009a0 <radio_pwr_dwn>:
}//switch      

  eeprom_write_byte(&eeprom_volume, current_volume); //save current volume level
*/
//send fm power down command
    si4734_wr_buf[0] = 0x11;
     9a0:	81 e1       	ldi	r24, 0x11	; 17
     9a2:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <si4734_wr_buf>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
     9a6:	41 e0       	ldi	r20, 0x01	; 1
     9a8:	6d e9       	ldi	r22, 0x9D	; 157
     9aa:	71 e0       	ldi	r23, 0x01	; 1
     9ac:	82 e2       	ldi	r24, 0x22	; 34
     9ae:	0e 94 0b 0b 	call	0x1616	; 0x1616 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9b2:	87 ed       	ldi	r24, 0xD7	; 215
     9b4:	94 e0       	ldi	r25, 0x04	; 4
     9b6:	01 97       	sbiw	r24, 0x01	; 1
     9b8:	f1 f7       	brne	.-4      	; 0x9b6 <radio_pwr_dwn+0x16>
     9ba:	00 c0       	rjmp	.+0      	; 0x9bc <radio_pwr_dwn+0x1c>
     9bc:	00 00       	nop
     9be:	08 95       	ret

000009c0 <fm_rsq_status>:
//inside the chip. 
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_rsq_status(){

    si4734_wr_buf[0] = FM_RSQ_STATUS;            //fm_rsq_status command
     9c0:	83 e2       	ldi	r24, 0x23	; 35
     9c2:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <si4734_wr_buf>
    si4734_wr_buf[1] = FM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
     9cc:	42 e0       	ldi	r20, 0x02	; 2
     9ce:	6d e9       	ldi	r22, 0x9D	; 157
     9d0:	71 e0       	ldi	r23, 0x01	; 1
     9d2:	82 e2       	ldi	r24, 0x22	; 34
     9d4:	0e 94 0b 0b 	call	0x1616	; 0x1616 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
     9d8:	0e 94 07 0b 	call	0x160e	; 0x160e <twi_busy>
     9dc:	81 11       	cpse	r24, r1
     9de:	fc cf       	rjmp	.-8      	; 0x9d8 <fm_rsq_status+0x18>
     9e0:	8f ea       	ldi	r24, 0xAF	; 175
     9e2:	94 e0       	ldi	r25, 0x04	; 4
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <fm_rsq_status+0x24>
     9e8:	00 c0       	rjmp	.+0      	; 0x9ea <fm_rsq_status+0x2a>
     9ea:	00 00       	nop
    _delay_us(300);      //delay for si4734 to process
    //This is a blind wait. Waiting for CTS interrupt here would tell you 
    //when the command is received and has been processed.
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
     9ec:	48 e0       	ldi	r20, 0x08	; 8
     9ee:	66 ea       	ldi	r22, 0xA6	; 166
     9f0:	71 e0       	ldi	r23, 0x01	; 1
     9f2:	82 e2       	ldi	r24, 0x22	; 34
     9f4:	0e 94 1c 0b 	call	0x1638	; 0x1638 <twi_start_rd>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
     9f8:	0e 94 07 0b 	call	0x160e	; 0x160e <twi_busy>
     9fc:	81 11       	cpse	r24, r1
     9fe:	fc cf       	rjmp	.-8      	; 0x9f8 <fm_rsq_status+0x38>
}
     a00:	08 95       	ret

00000a02 <fm_tune_status>:
//is cleared.
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_tune_status(){

    si4734_wr_buf[0] = FM_TUNE_STATUS;            //fm_tune_status command
     a02:	82 e2       	ldi	r24, 0x22	; 34
     a04:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <si4734_wr_buf>
    si4734_wr_buf[1] = FM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
     a0e:	42 e0       	ldi	r20, 0x02	; 2
     a10:	6d e9       	ldi	r22, 0x9D	; 157
     a12:	71 e0       	ldi	r23, 0x01	; 1
     a14:	82 e2       	ldi	r24, 0x22	; 34
     a16:	0e 94 0b 0b 	call	0x1616	; 0x1616 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
     a1a:	0e 94 07 0b 	call	0x160e	; 0x160e <twi_busy>
     a1e:	81 11       	cpse	r24, r1
     a20:	fc cf       	rjmp	.-8      	; 0xa1a <fm_tune_status+0x18>
     a22:	8f ea       	ldi	r24, 0xAF	; 175
     a24:	94 e0       	ldi	r25, 0x04	; 4
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	f1 f7       	brne	.-4      	; 0xa26 <fm_tune_status+0x24>
     a2a:	00 c0       	rjmp	.+0      	; 0xa2c <fm_tune_status+0x2a>
     a2c:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
     a2e:	48 e0       	ldi	r20, 0x08	; 8
     a30:	66 ea       	ldi	r22, 0xA6	; 166
     a32:	71 e0       	ldi	r23, 0x01	; 1
     a34:	82 e2       	ldi	r24, 0x22	; 34
     a36:	0e 94 1c 0b 	call	0x1638	; 0x1638 <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
     a3a:	0e 94 07 0b 	call	0x160e	; 0x160e <twi_busy>
     a3e:	81 11       	cpse	r24, r1
     a40:	fc cf       	rjmp	.-8      	; 0xa3a <fm_tune_status+0x38>
}
     a42:	08 95       	ret

00000a44 <am_tune_status>:
//TODO: could probably just have one tune_status() function
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_tune_status(){

    si4734_wr_buf[0] = AM_TUNE_STATUS;            //fm_tune_status command
     a44:	82 e4       	ldi	r24, 0x42	; 66
     a46:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <si4734_wr_buf>
    si4734_wr_buf[1] = AM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
     a50:	42 e0       	ldi	r20, 0x02	; 2
     a52:	6d e9       	ldi	r22, 0x9D	; 157
     a54:	71 e0       	ldi	r23, 0x01	; 1
     a56:	82 e2       	ldi	r24, 0x22	; 34
     a58:	0e 94 0b 0b 	call	0x1616	; 0x1616 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
     a5c:	0e 94 07 0b 	call	0x160e	; 0x160e <twi_busy>
     a60:	81 11       	cpse	r24, r1
     a62:	fc cf       	rjmp	.-8      	; 0xa5c <am_tune_status+0x18>
     a64:	8f ea       	ldi	r24, 0xAF	; 175
     a66:	94 e0       	ldi	r25, 0x04	; 4
     a68:	01 97       	sbiw	r24, 0x01	; 1
     a6a:	f1 f7       	brne	.-4      	; 0xa68 <am_tune_status+0x24>
     a6c:	00 c0       	rjmp	.+0      	; 0xa6e <am_tune_status+0x2a>
     a6e:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the am tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
     a70:	48 e0       	ldi	r20, 0x08	; 8
     a72:	66 ea       	ldi	r22, 0xA6	; 166
     a74:	71 e0       	ldi	r23, 0x01	; 1
     a76:	82 e2       	ldi	r24, 0x22	; 34
     a78:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <twi_start_rd>

00000a7c <am_rsq_status>:
//
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_rsq_status(){

    si4734_wr_buf[0] = AM_RSQ_STATUS;            //am_rsq_status command
     a7c:	83 e4       	ldi	r24, 0x43	; 67
     a7e:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <si4734_wr_buf>
    si4734_wr_buf[1] = AM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
     a88:	42 e0       	ldi	r20, 0x02	; 2
     a8a:	6d e9       	ldi	r22, 0x9D	; 157
     a8c:	71 e0       	ldi	r23, 0x01	; 1
     a8e:	82 e2       	ldi	r24, 0x22	; 34
     a90:	0e 94 0b 0b 	call	0x1616	; 0x1616 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
     a94:	0e 94 07 0b 	call	0x160e	; 0x160e <twi_busy>
     a98:	81 11       	cpse	r24, r1
     a9a:	fc cf       	rjmp	.-8      	; 0xa94 <am_rsq_status+0x18>
     a9c:	8f ea       	ldi	r24, 0xAF	; 175
     a9e:	94 e0       	ldi	r25, 0x04	; 4
     aa0:	01 97       	sbiw	r24, 0x01	; 1
     aa2:	f1 f7       	brne	.-4      	; 0xaa0 <am_rsq_status+0x24>
     aa4:	00 c0       	rjmp	.+0      	; 0xaa6 <am_rsq_status+0x2a>
     aa6:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
     aa8:	48 e0       	ldi	r20, 0x08	; 8
     aaa:	66 ea       	ldi	r22, 0xA6	; 166
     aac:	71 e0       	ldi	r23, 0x01	; 1
     aae:	82 e2       	ldi	r24, 0x22	; 34
     ab0:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <twi_start_rd>

00000ab4 <set_property>:
//The set property command does not have a indication that it has completed. This
//command is guarnteed by design to finish in 10ms. 
//
void set_property(uint16_t property, uint16_t property_value){

    si4734_wr_buf[0] = SET_PROPERTY;                   //set property command
     ab4:	ed e9       	ldi	r30, 0x9D	; 157
     ab6:	f1 e0       	ldi	r31, 0x01	; 1
     ab8:	22 e1       	ldi	r18, 0x12	; 18
     aba:	20 83       	st	Z, r18
    si4734_wr_buf[1] = 0x00;                           //all zeros
     abc:	11 82       	std	Z+1, r1	; 0x01
    si4734_wr_buf[2] = (uint8_t)(property >> 8);       //property high byte
     abe:	92 83       	std	Z+2, r25	; 0x02
    si4734_wr_buf[3] = (uint8_t)(property);            //property low byte
     ac0:	83 83       	std	Z+3, r24	; 0x03
    si4734_wr_buf[4] = (uint8_t)(property_value >> 8); //property value high byte
     ac2:	74 83       	std	Z+4, r23	; 0x04
    si4734_wr_buf[5] = (uint8_t)(property_value);      //property value low byte
     ac4:	65 83       	std	Z+5, r22	; 0x05
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
     ac6:	46 e0       	ldi	r20, 0x06	; 6
     ac8:	bf 01       	movw	r22, r30
     aca:	82 e2       	ldi	r24, 0x22	; 34
     acc:	0e 94 0b 0b 	call	0x1616	; 0x1616 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ad0:	8f e3       	ldi	r24, 0x3F	; 63
     ad2:	9c e9       	ldi	r25, 0x9C	; 156
     ad4:	01 97       	sbiw	r24, 0x01	; 1
     ad6:	f1 f7       	brne	.-4      	; 0xad4 <set_property+0x20>
     ad8:	00 c0       	rjmp	.+0      	; 0xada <set_property+0x26>
     ada:	00 00       	nop
     adc:	08 95       	ret

00000ade <fm_pwr_up>:
//restore the previous fm frequency  
 //current_fm_freq = eeprom_read_word(&eeprom_fm_freq); //TODO: only this one does not work 
 //current_volume  = eeprom_read_byte(&eeprom_volume);  //TODO: only this one does not work 

//send fm power up command
  si4734_wr_buf[0] = FM_PWR_UP; //powerup command byte
     ade:	ed e9       	ldi	r30, 0x9D	; 157
     ae0:	f1 e0       	ldi	r31, 0x01	; 1
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x50;      //GPO2O enabled, STCINT enabled, use ext. 32khz osc.
     ae6:	80 e5       	ldi	r24, 0x50	; 80
     ae8:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;      //OPMODE = 0x05; analog audio output
     aea:	85 e0       	ldi	r24, 0x05	; 5
     aec:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
     aee:	43 e0       	ldi	r20, 0x03	; 3
     af0:	bf 01       	movw	r22, r30
     af2:	82 e2       	ldi	r24, 0x22	; 34
     af4:	0e 94 0b 0b 	call	0x1616	; 0x1616 <twi_start_wr>
     af8:	2f ef       	ldi	r18, 0xFF	; 255
     afa:	8b ed       	ldi	r24, 0xDB	; 219
     afc:	95 e0       	ldi	r25, 0x05	; 5
     afe:	21 50       	subi	r18, 0x01	; 1
     b00:	80 40       	sbci	r24, 0x00	; 0
     b02:	90 40       	sbci	r25, 0x00	; 0
     b04:	e1 f7       	brne	.-8      	; 0xafe <fm_pwr_up+0x20>
     b06:	00 c0       	rjmp	.+0      	; 0xb08 <fm_pwr_up+0x2a>
     b08:	00 00       	nop
  _delay_ms(120);               //startup delay as specified 
  //The seek/tune interrupt is enabled here. If the STCINT bit is set, a 1.5us
  //low pulse will be output from GPIO2/INT when tune or seek is completed.
  set_property(GPO_IEN, GPO_IEN_STCIEN); //seek_tune complete interrupt
     b0a:	61 e0       	ldi	r22, 0x01	; 1
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <set_property>

00000b16 <am_pwr_up>:
//restore the previous am frequency  
  //current_am_freq = eeprom_read_word(&eeprom_am_freq);
  //current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 

//send am power up command
  si4734_wr_buf[0] = AM_PWR_UP;
     b16:	ed e9       	ldi	r30, 0x9D	; 157
     b18:	f1 e0       	ldi	r31, 0x01	; 1
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x51;//GPO2OEN and XOSCEN selected
     b1e:	81 e5       	ldi	r24, 0x51	; 81
     b20:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;
     b22:	85 e0       	ldi	r24, 0x05	; 5
     b24:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
     b26:	43 e0       	ldi	r20, 0x03	; 3
     b28:	bf 01       	movw	r22, r30
     b2a:	82 e2       	ldi	r24, 0x22	; 34
     b2c:	0e 94 0b 0b 	call	0x1616	; 0x1616 <twi_start_wr>
     b30:	2f ef       	ldi	r18, 0xFF	; 255
     b32:	8b ed       	ldi	r24, 0xDB	; 219
     b34:	95 e0       	ldi	r25, 0x05	; 5
     b36:	21 50       	subi	r18, 0x01	; 1
     b38:	80 40       	sbci	r24, 0x00	; 0
     b3a:	90 40       	sbci	r25, 0x00	; 0
     b3c:	e1 f7       	brne	.-8      	; 0xb36 <am_pwr_up+0x20>
     b3e:	00 c0       	rjmp	.+0      	; 0xb40 <am_pwr_up+0x2a>
     b40:	00 00       	nop
  _delay_ms(120);   
  set_property(GPO_IEN, GPO_IEN_STCIEN);    //Seek/Tune Complete interrupt
     b42:	61 e0       	ldi	r22, 0x01	; 1
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <set_property>

00000b4e <sw_pwr_up>:
//restore the previous sw frequency  
  //current_sw_freq = eeprom_read_word(&eeprom_sw_freq);
  //current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 

//send sw power up command (same as am, only tuning rate is different)
    si4734_wr_buf[0] = AM_PWR_UP; //same cmd as for AM
     b4e:	ed e9       	ldi	r30, 0x9D	; 157
     b50:	f1 e0       	ldi	r31, 0x01	; 1
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	80 83       	st	Z, r24
    si4734_wr_buf[1] = 0x51;
     b56:	81 e5       	ldi	r24, 0x51	; 81
     b58:	81 83       	std	Z+1, r24	; 0x01
    si4734_wr_buf[2] = 0x05;
     b5a:	85 e0       	ldi	r24, 0x05	; 5
     b5c:	82 83       	std	Z+2, r24	; 0x02
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
     b5e:	43 e0       	ldi	r20, 0x03	; 3
     b60:	bf 01       	movw	r22, r30
     b62:	82 e2       	ldi	r24, 0x22	; 34
     b64:	0e 94 0b 0b 	call	0x1616	; 0x1616 <twi_start_wr>
     b68:	2f ef       	ldi	r18, 0xFF	; 255
     b6a:	8b ed       	ldi	r24, 0xDB	; 219
     b6c:	95 e0       	ldi	r25, 0x05	; 5
     b6e:	21 50       	subi	r18, 0x01	; 1
     b70:	80 40       	sbci	r24, 0x00	; 0
     b72:	90 40       	sbci	r25, 0x00	; 0
     b74:	e1 f7       	brne	.-8      	; 0xb6e <sw_pwr_up+0x20>
     b76:	00 c0       	rjmp	.+0      	; 0xb78 <sw_pwr_up+0x2a>
     b78:	00 00       	nop
    _delay_ms(120);   //start up delay

  //set property to disable soft muting for shortwave broadcasts
  set_property(AM_SOFT_MUTE_MAX_ATTENUATION, 0x0000); //cut off soft mute  
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	93 e3       	ldi	r25, 0x33	; 51
     b82:	0e 94 5a 05 	call	0xab4	; 0xab4 <set_property>
  //select 4khz filter BW and engage power line filter
  set_property(AM_CHANNEL_FILTER, (AM_CHFILT_4KHZ | AM_PWR_LINE_NOISE_REJT_FILTER)); 
     b86:	61 e0       	ldi	r22, 0x01	; 1
     b88:	71 e0       	ldi	r23, 0x01	; 1
     b8a:	82 e0       	ldi	r24, 0x02	; 2
     b8c:	91 e3       	ldi	r25, 0x31	; 49
     b8e:	0e 94 5a 05 	call	0xab4	; 0xab4 <set_property>
  set_property(GPO_IEN, GPO_IEN_STCIEN); //Seek/Tune Complete interrupt
     b92:	61 e0       	ldi	r22, 0x01	; 1
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <set_property>

00000b9e <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b9e:	91 e0       	ldi	r25, 0x01	; 1
     ba0:	81 11       	cpse	r24, r1
     ba2:	01 c0       	rjmp	.+2      	; 0xba6 <send_lcd+0x8>
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ba8:	77 9b       	sbis	0x0e, 7	; 14
     baa:	fe cf       	rjmp	.-4      	; 0xba8 <send_lcd+0xa>
  SPDR = byte;                        //send payload
     bac:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bae:	77 9b       	sbis	0x0e, 7	; 14
     bb0:	fe cf       	rjmp	.-4      	; 0xbae <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     bb2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bb6:	88 60       	ori	r24, 0x08	; 8
     bb8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bbc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bc0:	87 7f       	andi	r24, 0xF7	; 247
     bc2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bc6:	08 95       	ret

00000bc8 <refresh_lcd>:
//
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
     bc8:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <i.2094>
     bcc:	82 0f       	add	r24, r18
     bce:	91 1d       	adc	r25, r1
     bd0:	fc 01       	movw	r30, r24
     bd2:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     bd4:	91 e0       	ldi	r25, 0x01	; 1
     bd6:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bd8:	77 9b       	sbis	0x0e, 7	; 14
     bda:	fe cf       	rjmp	.-4      	; 0xbd8 <refresh_lcd+0x10>
  SPDR = byte;                        //send payload
     bdc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bde:	77 9b       	sbis	0x0e, 7	; 14
     be0:	fe cf       	rjmp	.-4      	; 0xbde <refresh_lcd+0x16>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     be2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     be6:	88 60       	ori	r24, 0x08	; 8
     be8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bf0:	87 7f       	andi	r24, 0xF7	; 247
     bf2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
     bf6:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <i.2094>
     bfa:	8f 5f       	subi	r24, 0xFF	; 255
     bfc:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <i.2094>
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
     c00:	80 31       	cpi	r24, 0x10	; 16
     c02:	d9 f0       	breq	.+54     	; 0xc3a <refresh_lcd+0x72>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     c04:	80 32       	cpi	r24, 0x20	; 32
     c06:	09 f0       	breq	.+2      	; 0xc0a <refresh_lcd+0x42>
     c08:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c0a:	85 ed       	ldi	r24, 0xD5	; 213
     c0c:	8a 95       	dec	r24
     c0e:	f1 f7       	brne	.-4      	; 0xc0c <refresh_lcd+0x44>
     c10:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c12:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c14:	77 9b       	sbis	0x0e, 7	; 14
     c16:	fe cf       	rjmp	.-4      	; 0xc14 <refresh_lcd+0x4c>
  SPDR = byte;                        //send payload
     c18:	80 e8       	ldi	r24, 0x80	; 128
     c1a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c1c:	77 9b       	sbis	0x0e, 7	; 14
     c1e:	fe cf       	rjmp	.-4      	; 0xc1c <refresh_lcd+0x54>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c20:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c24:	88 60       	ori	r24, 0x08	; 8
     c26:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c2a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c2e:	87 7f       	andi	r24, 0xF7	; 247
     c30:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     c34:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <i.2094>
     c38:	08 95       	ret
     c3a:	f5 ed       	ldi	r31, 0xD5	; 213
     c3c:	fa 95       	dec	r31
     c3e:	f1 f7       	brne	.-4      	; 0xc3c <refresh_lcd+0x74>
     c40:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c42:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c44:	77 9b       	sbis	0x0e, 7	; 14
     c46:	fe cf       	rjmp	.-4      	; 0xc44 <refresh_lcd+0x7c>
  SPDR = byte;                        //send payload
     c48:	80 ec       	ldi	r24, 0xC0	; 192
     c4a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c4c:	77 9b       	sbis	0x0e, 7	; 14
     c4e:	fe cf       	rjmp	.-4      	; 0xc4c <refresh_lcd+0x84>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c50:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c54:	88 60       	ori	r24, 0x08	; 8
     c56:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c5a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c5e:	87 7f       	andi	r24, 0xF7	; 247
     c60:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c64:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <i.2094>
     c68:	cd cf       	rjmp	.-102    	; 0xc04 <refresh_lcd+0x3c>

00000c6a <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     c6a:	66 0f       	add	r22, r22
     c6c:	66 0f       	add	r22, r22
     c6e:	66 0f       	add	r22, r22
     c70:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c72:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c74:	77 9b       	sbis	0x0e, 7	; 14
     c76:	fe cf       	rjmp	.-4      	; 0xc74 <set_custom_character+0xa>
  SPDR = byte;                        //send payload
     c78:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c7a:	77 9b       	sbis	0x0e, 7	; 14
     c7c:	fe cf       	rjmp	.-4      	; 0xc7a <set_custom_character+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c7e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c82:	28 60       	ori	r18, 0x08	; 8
     c84:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c88:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c8c:	27 7f       	andi	r18, 0xF7	; 247
     c8e:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c92:	25 ed       	ldi	r18, 0xD5	; 213
     c94:	2a 95       	dec	r18
     c96:	f1 f7       	brne	.-4      	; 0xc94 <set_custom_character+0x2a>
     c98:	00 00       	nop
     c9a:	fc 01       	movw	r30, r24
     c9c:	9c 01       	movw	r18, r24
     c9e:	28 5f       	subi	r18, 0xF8	; 248
     ca0:	3f 4f       	sbci	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ca2:	91 e0       	ldi	r25, 0x01	; 1

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     ca4:	81 91       	ld	r24, Z+
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ca6:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ca8:	77 9b       	sbis	0x0e, 7	; 14
     caa:	fe cf       	rjmp	.-4      	; 0xca8 <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
     cac:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cae:	77 9b       	sbis	0x0e, 7	; 14
     cb0:	fe cf       	rjmp	.-4      	; 0xcae <set_custom_character+0x44>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     cb2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cb6:	88 60       	ori	r24, 0x08	; 8
     cb8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cbc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cc0:	87 7f       	andi	r24, 0xF7	; 247
     cc2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cc6:	85 ed       	ldi	r24, 0xD5	; 213
     cc8:	8a 95       	dec	r24
     cca:	f1 f7       	brne	.-4      	; 0xcc8 <set_custom_character+0x5e>
     ccc:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     cce:	e2 17       	cp	r30, r18
     cd0:	f3 07       	cpc	r31, r19
     cd2:	41 f7       	brne	.-48     	; 0xca4 <set_custom_character+0x3a>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     cd4:	08 95       	ret

00000cd6 <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     cd6:	90 e4       	ldi	r25, 0x40	; 64
     cd8:	89 9f       	mul	r24, r25
     cda:	60 0d       	add	r22, r0
     cdc:	11 24       	eor	r1, r1
     cde:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ce0:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ce2:	77 9b       	sbis	0x0e, 7	; 14
     ce4:	fe cf       	rjmp	.-4      	; 0xce2 <set_cursor+0xc>
  SPDR = byte;                        //send payload
     ce6:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ce8:	77 9b       	sbis	0x0e, 7	; 14
     cea:	fe cf       	rjmp	.-4      	; 0xce8 <set_cursor+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     cec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cf0:	88 60       	ori	r24, 0x08	; 8
     cf2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cf6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cfa:	87 7f       	andi	r24, 0xF7	; 247
     cfc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d00:	08 95       	ret

00000d02 <uint2lcd>:
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     d02:	81 11       	cpse	r24, r1
     d04:	13 c0       	rjmp	.+38     	; 0xd2c <uint2lcd+0x2a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d0a:	77 9b       	sbis	0x0e, 7	; 14
     d0c:	fe cf       	rjmp	.-4      	; 0xd0a <uint2lcd+0x8>
  SPDR = byte;                        //send payload
     d0e:	80 e3       	ldi	r24, 0x30	; 48
     d10:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d12:	77 9b       	sbis	0x0e, 7	; 14
     d14:	fe cf       	rjmp	.-4      	; 0xd12 <uint2lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     d16:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d1a:	88 60       	ori	r24, 0x08	; 8
     d1c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d20:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d24:	87 7f       	andi	r24, 0xF7	; 247
     d26:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d2a:	08 95       	ret
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     d2c:	84 36       	cpi	r24, 0x64	; 100
     d2e:	b0 f4       	brcc	.+44     	; 0xd5c <uint2lcd+0x5a>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     d30:	8a 30       	cpi	r24, 0x0A	; 10
     d32:	60 f5       	brcc	.+88     	; 0xd8c <uint2lcd+0x8a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d34:	91 e0       	ldi	r25, 0x01	; 1
     d36:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d38:	77 9b       	sbis	0x0e, 7	; 14
     d3a:	fe cf       	rjmp	.-4      	; 0xd38 <uint2lcd+0x36>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     d3c:	9d ec       	ldi	r25, 0xCD	; 205
     d3e:	89 9f       	mul	r24, r25
     d40:	91 2d       	mov	r25, r1
     d42:	11 24       	eor	r1, r1
     d44:	96 95       	lsr	r25
     d46:	96 95       	lsr	r25
     d48:	96 95       	lsr	r25
     d4a:	2a e0       	ldi	r18, 0x0A	; 10
     d4c:	92 9f       	mul	r25, r18
     d4e:	80 19       	sub	r24, r0
     d50:	11 24       	eor	r1, r1
     d52:	80 5d       	subi	r24, 0xD0	; 208
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     d54:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d56:	77 9b       	sbis	0x0e, 7	; 14
     d58:	fe cf       	rjmp	.-4      	; 0xd56 <uint2lcd+0x54>
     d5a:	dd cf       	rjmp	.-70     	; 0xd16 <uint2lcd+0x14>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     d5c:	99 e2       	ldi	r25, 0x29	; 41
     d5e:	89 9f       	mul	r24, r25
     d60:	91 2d       	mov	r25, r1
     d62:	11 24       	eor	r1, r1
     d64:	92 95       	swap	r25
     d66:	9f 70       	andi	r25, 0x0F	; 15
     d68:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d6a:	21 e0       	ldi	r18, 0x01	; 1
     d6c:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d6e:	77 9b       	sbis	0x0e, 7	; 14
     d70:	fe cf       	rjmp	.-4      	; 0xd6e <uint2lcd+0x6c>
  SPDR = byte;                        //send payload
     d72:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d74:	77 9b       	sbis	0x0e, 7	; 14
     d76:	fe cf       	rjmp	.-4      	; 0xd74 <uint2lcd+0x72>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     d78:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d7c:	98 60       	ori	r25, 0x08	; 8
     d7e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d82:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d86:	97 7f       	andi	r25, 0xF7	; 247
     d88:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     d8c:	99 e2       	ldi	r25, 0x29	; 41
     d8e:	89 9f       	mul	r24, r25
     d90:	91 2d       	mov	r25, r1
     d92:	11 24       	eor	r1, r1
     d94:	92 95       	swap	r25
     d96:	9f 70       	andi	r25, 0x0F	; 15
     d98:	38 2f       	mov	r19, r24
     d9a:	24 e6       	ldi	r18, 0x64	; 100
     d9c:	92 9f       	mul	r25, r18
     d9e:	30 19       	sub	r19, r0
     da0:	11 24       	eor	r1, r1
     da2:	2d ec       	ldi	r18, 0xCD	; 205
     da4:	32 9f       	mul	r19, r18
     da6:	91 2d       	mov	r25, r1
     da8:	11 24       	eor	r1, r1
     daa:	96 95       	lsr	r25
     dac:	96 95       	lsr	r25
     dae:	96 95       	lsr	r25
     db0:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     db2:	21 e0       	ldi	r18, 0x01	; 1
     db4:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     db6:	77 9b       	sbis	0x0e, 7	; 14
     db8:	fe cf       	rjmp	.-4      	; 0xdb6 <uint2lcd+0xb4>
  SPDR = byte;                        //send payload
     dba:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     dbc:	77 9b       	sbis	0x0e, 7	; 14
     dbe:	fe cf       	rjmp	.-4      	; 0xdbc <uint2lcd+0xba>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     dc0:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dc4:	98 60       	ori	r25, 0x08	; 8
     dc6:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dca:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dce:	97 7f       	andi	r25, 0xF7	; 247
     dd0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dd4:	af cf       	rjmp	.-162    	; 0xd34 <uint2lcd+0x32>

00000dd6 <int2lcd>:
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     dd6:	87 ff       	sbrs	r24, 7
    else          {uint2lcd(number);                                            }
     dd8:	0c 94 81 06 	jmp	0xd02	; 0xd02 <uint2lcd>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     de0:	77 9b       	sbis	0x0e, 7	; 14
     de2:	fe cf       	rjmp	.-4      	; 0xde0 <int2lcd+0xa>
  SPDR = byte;                        //send payload
     de4:	9d e2       	ldi	r25, 0x2D	; 45
     de6:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     de8:	77 9b       	sbis	0x0e, 7	; 14
     dea:	fe cf       	rjmp	.-4      	; 0xde8 <int2lcd+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     dec:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     df0:	98 60       	ori	r25, 0x08	; 8
     df2:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     df6:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dfa:	97 7f       	andi	r25, 0xF7	; 247
     dfc:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e00:	95 ed       	ldi	r25, 0xD5	; 213
     e02:	9a 95       	dec	r25
     e04:	f1 f7       	brne	.-4      	; 0xe02 <int2lcd+0x2c>
     e06:	00 00       	nop
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     e08:	81 95       	neg	r24
     e0a:	0c 94 81 06 	jmp	0xd02	; 0xd02 <uint2lcd>

00000e0e <cursor_on>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e0e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e10:	77 9b       	sbis	0x0e, 7	; 14
     e12:	fe cf       	rjmp	.-4      	; 0xe10 <cursor_on+0x2>
  SPDR = byte;                        //send payload
     e14:	8e e0       	ldi	r24, 0x0E	; 14
     e16:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e18:	77 9b       	sbis	0x0e, 7	; 14
     e1a:	fe cf       	rjmp	.-4      	; 0xe18 <cursor_on+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e1c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e20:	88 60       	ori	r24, 0x08	; 8
     e22:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e26:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e2a:	87 7f       	andi	r24, 0xF7	; 247
     e2c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e30:	08 95       	ret

00000e32 <cursor_off>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e32:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e34:	77 9b       	sbis	0x0e, 7	; 14
     e36:	fe cf       	rjmp	.-4      	; 0xe34 <cursor_off+0x2>
  SPDR = byte;                        //send payload
     e38:	8c e0       	ldi	r24, 0x0C	; 12
     e3a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e3c:	77 9b       	sbis	0x0e, 7	; 14
     e3e:	fe cf       	rjmp	.-4      	; 0xe3c <cursor_off+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e40:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e44:	88 60       	ori	r24, 0x08	; 8
     e46:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e4a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e4e:	87 7f       	andi	r24, 0xF7	; 247
     e50:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e54:	08 95       	ret

00000e56 <shift_right>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e56:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e58:	77 9b       	sbis	0x0e, 7	; 14
     e5a:	fe cf       	rjmp	.-4      	; 0xe58 <shift_right+0x2>
  SPDR = byte;                        //send payload
     e5c:	8e e1       	ldi	r24, 0x1E	; 30
     e5e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e60:	77 9b       	sbis	0x0e, 7	; 14
     e62:	fe cf       	rjmp	.-4      	; 0xe60 <shift_right+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e64:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e68:	88 60       	ori	r24, 0x08	; 8
     e6a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e6e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e72:	87 7f       	andi	r24, 0xF7	; 247
     e74:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e78:	08 95       	ret

00000e7a <shift_left>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e7a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e7c:	77 9b       	sbis	0x0e, 7	; 14
     e7e:	fe cf       	rjmp	.-4      	; 0xe7c <shift_left+0x2>
  SPDR = byte;                        //send payload
     e80:	88 e1       	ldi	r24, 0x18	; 24
     e82:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e84:	77 9b       	sbis	0x0e, 7	; 14
     e86:	fe cf       	rjmp	.-4      	; 0xe84 <shift_left+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e88:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e8c:	88 60       	ori	r24, 0x08	; 8
     e8e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e92:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e96:	87 7f       	andi	r24, 0xF7	; 247
     e98:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e9c:	08 95       	ret

00000e9e <strobe_lcd>:
     e9e:	e2 e6       	ldi	r30, 0x62	; 98
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	88 60       	ori	r24, 0x08	; 8
     ea6:	80 83       	st	Z, r24
     ea8:	80 81       	ld	r24, Z
     eaa:	87 7f       	andi	r24, 0xF7	; 247
     eac:	80 83       	st	Z, r24
     eae:	08 95       	ret

00000eb0 <clear_display>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     eb0:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     eb2:	77 9b       	sbis	0x0e, 7	; 14
     eb4:	fe cf       	rjmp	.-4      	; 0xeb2 <clear_display+0x2>
  SPDR = byte;                        //send payload
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     eba:	77 9b       	sbis	0x0e, 7	; 14
     ebc:	fe cf       	rjmp	.-4      	; 0xeba <clear_display+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ebe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ec2:	88 60       	ori	r24, 0x08	; 8
     ec4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ec8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ecc:	87 7f       	andi	r24, 0xF7	; 247
     ece:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ed2:	8f e1       	ldi	r24, 0x1F	; 31
     ed4:	9c e1       	ldi	r25, 0x1C	; 28
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <clear_display+0x26>
     eda:	00 c0       	rjmp	.+0      	; 0xedc <clear_display+0x2c>
     edc:	00 00       	nop
     ede:	08 95       	ret

00000ee0 <cursor_home>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ee0:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ee2:	77 9b       	sbis	0x0e, 7	; 14
     ee4:	fe cf       	rjmp	.-4      	; 0xee2 <cursor_home+0x2>
  SPDR = byte;                        //send payload
     ee6:	82 e0       	ldi	r24, 0x02	; 2
     ee8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     eea:	77 9b       	sbis	0x0e, 7	; 14
     eec:	fe cf       	rjmp	.-4      	; 0xeea <cursor_home+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     eee:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ef2:	88 60       	ori	r24, 0x08	; 8
     ef4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ef8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     efc:	87 7f       	andi	r24, 0xF7	; 247
     efe:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f02:	8f e6       	ldi	r24, 0x6F	; 111
     f04:	97 e1       	ldi	r25, 0x17	; 23
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	f1 f7       	brne	.-4      	; 0xf06 <cursor_home+0x26>
     f0a:	00 c0       	rjmp	.+0      	; 0xf0c <cursor_home+0x2c>
     f0c:	00 00       	nop
     f0e:	08 95       	ret

00000f10 <line2_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f10:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f12:	77 9b       	sbis	0x0e, 7	; 14
     f14:	fe cf       	rjmp	.-4      	; 0xf12 <line2_col1+0x2>
  SPDR = byte;                        //send payload
     f16:	80 ec       	ldi	r24, 0xC0	; 192
     f18:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f1a:	77 9b       	sbis	0x0e, 7	; 14
     f1c:	fe cf       	rjmp	.-4      	; 0xf1a <line2_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f1e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f22:	88 60       	ori	r24, 0x08	; 8
     f24:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f28:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f2c:	87 7f       	andi	r24, 0xF7	; 247
     f2e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f32:	08 95       	ret

00000f34 <line1_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f34:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f36:	77 9b       	sbis	0x0e, 7	; 14
     f38:	fe cf       	rjmp	.-4      	; 0xf36 <line1_col1+0x2>
  SPDR = byte;                        //send payload
     f3a:	80 e8       	ldi	r24, 0x80	; 128
     f3c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f3e:	77 9b       	sbis	0x0e, 7	; 14
     f40:	fe cf       	rjmp	.-4      	; 0xf3e <line1_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f42:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f46:	88 60       	ori	r24, 0x08	; 8
     f48:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f4c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f50:	87 7f       	andi	r24, 0xF7	; 247
     f52:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f56:	08 95       	ret

00000f58 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
     f58:	90 e1       	ldi	r25, 0x10	; 16
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f5a:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     f5c:	20 e2       	ldi	r18, 0x20	; 32
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f5e:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f60:	77 9b       	sbis	0x0e, 7	; 14
     f62:	fe cf       	rjmp	.-4      	; 0xf60 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
     f64:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f66:	77 9b       	sbis	0x0e, 7	; 14
     f68:	fe cf       	rjmp	.-4      	; 0xf66 <fill_spaces+0xe>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f6a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f6e:	88 60       	ori	r24, 0x08	; 8
     f70:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f74:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f78:	87 7f       	andi	r24, 0xF7	; 247
     f7a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f7e:	85 ed       	ldi	r24, 0xD5	; 213
     f80:	8a 95       	dec	r24
     f82:	f1 f7       	brne	.-4      	; 0xf80 <fill_spaces+0x28>
     f84:	00 00       	nop
     f86:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
     f88:	51 f7       	brne	.-44     	; 0xf5e <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
     f8a:	08 95       	ret

00000f8c <char2lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f8c:	91 e0       	ldi	r25, 0x01	; 1
     f8e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f90:	77 9b       	sbis	0x0e, 7	; 14
     f92:	fe cf       	rjmp	.-4      	; 0xf90 <char2lcd+0x4>
  SPDR = byte;                        //send payload
     f94:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f96:	77 9b       	sbis	0x0e, 7	; 14
     f98:	fe cf       	rjmp	.-4      	; 0xf96 <char2lcd+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f9a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f9e:	88 60       	ori	r24, 0x08	; 8
     fa0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fa4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fa8:	87 7f       	andi	r24, 0xF7	; 247
     faa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fae:	08 95       	ret

00000fb0 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
     fb0:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     fb2:	40 e0       	ldi	r20, 0x00	; 0
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	60 e0       	ldi	r22, 0x00	; 0
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     fb8:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     fba:	df 01       	movw	r26, r30
     fbc:	a4 0f       	add	r26, r20
     fbe:	b5 1f       	adc	r27, r21
     fc0:	8c 91       	ld	r24, X
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     fc2:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     fc4:	77 9b       	sbis	0x0e, 7	; 14
     fc6:	fe cf       	rjmp	.-4      	; 0xfc4 <string2lcd+0x14>
  SPDR = byte;                        //send payload
     fc8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     fca:	77 9b       	sbis	0x0e, 7	; 14
     fcc:	fe cf       	rjmp	.-4      	; 0xfca <string2lcd+0x1a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     fce:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fd2:	98 60       	ori	r25, 0x08	; 8
     fd4:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fd8:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fdc:	97 7f       	andi	r25, 0xF7	; 247
     fde:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fe2:	85 ed       	ldi	r24, 0xD5	; 213
     fe4:	8a 95       	dec	r24
     fe6:	f1 f7       	brne	.-4      	; 0xfe4 <string2lcd+0x34>
     fe8:	00 00       	nop
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     fea:	6f 5f       	subi	r22, 0xFF	; 255
     fec:	46 2f       	mov	r20, r22
     fee:	50 e0       	ldi	r21, 0x00	; 0
     ff0:	df 01       	movw	r26, r30
     ff2:	0d 90       	ld	r0, X+
     ff4:	00 20       	and	r0, r0
     ff6:	e9 f7       	brne	.-6      	; 0xff2 <string2lcd+0x42>
     ff8:	9d 01       	movw	r18, r26
     ffa:	2e 1b       	sub	r18, r30
     ffc:	3f 0b       	sbc	r19, r31
     ffe:	22 50       	subi	r18, 0x02	; 2
    1000:	31 09       	sbc	r19, r1
    1002:	24 17       	cp	r18, r20
    1004:	35 07       	cpc	r19, r21
    1006:	c8 f6       	brcc	.-78     	; 0xfba <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
    1008:	08 95       	ret

0000100a <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    100a:	8f ef       	ldi	r24, 0xFF	; 255
    100c:	99 ef       	ldi	r25, 0xF9	; 249
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	f1 f7       	brne	.-4      	; 0x100e <lcd_init+0x4>
    1012:	00 c0       	rjmp	.+0      	; 0x1014 <lcd_init+0xa>
    1014:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
    1016:	88 e0       	ldi	r24, 0x08	; 8
    1018:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    101c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    101e:	77 9b       	sbis	0x0e, 7	; 14
    1020:	fe cf       	rjmp	.-4      	; 0x101e <lcd_init+0x14>
  SPDR = byte;                        //send payload
    1022:	80 e3       	ldi	r24, 0x30	; 48
    1024:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1026:	77 9b       	sbis	0x0e, 7	; 14
    1028:	fe cf       	rjmp	.-4      	; 0x1026 <lcd_init+0x1c>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    102a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    102e:	88 60       	ori	r24, 0x08	; 8
    1030:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1034:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1038:	87 7f       	andi	r24, 0xF7	; 247
    103a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    103e:	8f e5       	ldi	r24, 0x5F	; 95
    1040:	9d e6       	ldi	r25, 0x6D	; 109
    1042:	01 97       	sbiw	r24, 0x01	; 1
    1044:	f1 f7       	brne	.-4      	; 0x1042 <lcd_init+0x38>
    1046:	00 c0       	rjmp	.+0      	; 0x1048 <lcd_init+0x3e>
    1048:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    104a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    104c:	77 9b       	sbis	0x0e, 7	; 14
    104e:	fe cf       	rjmp	.-4      	; 0x104c <lcd_init+0x42>
  SPDR = byte;                        //send payload
    1050:	80 e3       	ldi	r24, 0x30	; 48
    1052:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1054:	77 9b       	sbis	0x0e, 7	; 14
    1056:	fe cf       	rjmp	.-4      	; 0x1054 <lcd_init+0x4a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1058:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    105c:	88 60       	ori	r24, 0x08	; 8
    105e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1062:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1066:	87 7f       	andi	r24, 0xF7	; 247
    1068:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    106c:	8f e5       	ldi	r24, 0x5F	; 95
    106e:	9d e6       	ldi	r25, 0x6D	; 109
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	f1 f7       	brne	.-4      	; 0x1070 <lcd_init+0x66>
    1074:	00 c0       	rjmp	.+0      	; 0x1076 <lcd_init+0x6c>
    1076:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1078:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    107a:	77 9b       	sbis	0x0e, 7	; 14
    107c:	fe cf       	rjmp	.-4      	; 0x107a <lcd_init+0x70>
  SPDR = byte;                        //send payload
    107e:	80 e3       	ldi	r24, 0x30	; 48
    1080:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1082:	77 9b       	sbis	0x0e, 7	; 14
    1084:	fe cf       	rjmp	.-4      	; 0x1082 <lcd_init+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1086:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    108a:	88 60       	ori	r24, 0x08	; 8
    108c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1090:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1094:	87 7f       	andi	r24, 0xF7	; 247
    1096:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    109a:	8f e5       	ldi	r24, 0x5F	; 95
    109c:	9d e6       	ldi	r25, 0x6D	; 109
    109e:	01 97       	sbiw	r24, 0x01	; 1
    10a0:	f1 f7       	brne	.-4      	; 0x109e <lcd_init+0x94>
    10a2:	00 c0       	rjmp	.+0      	; 0x10a4 <lcd_init+0x9a>
    10a4:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    10a6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10a8:	77 9b       	sbis	0x0e, 7	; 14
    10aa:	fe cf       	rjmp	.-4      	; 0x10a8 <lcd_init+0x9e>
  SPDR = byte;                        //send payload
    10ac:	88 e3       	ldi	r24, 0x38	; 56
    10ae:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10b0:	77 9b       	sbis	0x0e, 7	; 14
    10b2:	fe cf       	rjmp	.-4      	; 0x10b0 <lcd_init+0xa6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    10b4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10b8:	88 60       	ori	r24, 0x08	; 8
    10ba:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10be:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10c2:	87 7f       	andi	r24, 0xF7	; 247
    10c4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10c8:	8f e1       	ldi	r24, 0x1F	; 31
    10ca:	9e e4       	ldi	r25, 0x4E	; 78
    10cc:	01 97       	sbiw	r24, 0x01	; 1
    10ce:	f1 f7       	brne	.-4      	; 0x10cc <lcd_init+0xc2>
    10d0:	00 c0       	rjmp	.+0      	; 0x10d2 <lcd_init+0xc8>
    10d2:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    10d4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10d6:	77 9b       	sbis	0x0e, 7	; 14
    10d8:	fe cf       	rjmp	.-4      	; 0x10d6 <lcd_init+0xcc>
  SPDR = byte;                        //send payload
    10da:	88 e0       	ldi	r24, 0x08	; 8
    10dc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10de:	77 9b       	sbis	0x0e, 7	; 14
    10e0:	fe cf       	rjmp	.-4      	; 0x10de <lcd_init+0xd4>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    10e2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10e6:	88 60       	ori	r24, 0x08	; 8
    10e8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10ec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10f0:	87 7f       	andi	r24, 0xF7	; 247
    10f2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10f6:	8f e1       	ldi	r24, 0x1F	; 31
    10f8:	9e e4       	ldi	r25, 0x4E	; 78
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	f1 f7       	brne	.-4      	; 0x10fa <lcd_init+0xf0>
    10fe:	00 c0       	rjmp	.+0      	; 0x1100 <__stack+0x1>
    1100:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1102:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1104:	77 9b       	sbis	0x0e, 7	; 14
    1106:	fe cf       	rjmp	.-4      	; 0x1104 <__stack+0x5>
  SPDR = byte;                        //send payload
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    110c:	77 9b       	sbis	0x0e, 7	; 14
    110e:	fe cf       	rjmp	.-4      	; 0x110c <__stack+0xd>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1110:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1114:	88 60       	ori	r24, 0x08	; 8
    1116:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    111a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    111e:	87 7f       	andi	r24, 0xF7	; 247
    1120:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1124:	8f e1       	ldi	r24, 0x1F	; 31
    1126:	9e e4       	ldi	r25, 0x4E	; 78
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	f1 f7       	brne	.-4      	; 0x1128 <__stack+0x29>
    112c:	00 c0       	rjmp	.+0      	; 0x112e <__stack+0x2f>
    112e:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1130:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1132:	77 9b       	sbis	0x0e, 7	; 14
    1134:	fe cf       	rjmp	.-4      	; 0x1132 <__stack+0x33>
  SPDR = byte;                        //send payload
    1136:	86 e0       	ldi	r24, 0x06	; 6
    1138:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    113a:	77 9b       	sbis	0x0e, 7	; 14
    113c:	fe cf       	rjmp	.-4      	; 0x113a <__stack+0x3b>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    113e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1142:	88 60       	ori	r24, 0x08	; 8
    1144:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1148:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    114c:	87 7f       	andi	r24, 0xF7	; 247
    114e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1152:	8f e1       	ldi	r24, 0x1F	; 31
    1154:	9e e4       	ldi	r25, 0x4E	; 78
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <__stack+0x57>
    115a:	00 c0       	rjmp	.+0      	; 0x115c <__stack+0x5d>
    115c:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    115e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1160:	77 9b       	sbis	0x0e, 7	; 14
    1162:	fe cf       	rjmp	.-4      	; 0x1160 <__stack+0x61>
  SPDR = byte;                        //send payload
    1164:	8c e0       	ldi	r24, 0x0C	; 12
    1166:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1168:	77 9b       	sbis	0x0e, 7	; 14
    116a:	fe cf       	rjmp	.-4      	; 0x1168 <__stack+0x69>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    116c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1170:	88 60       	ori	r24, 0x08	; 8
    1172:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1176:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    117a:	87 7f       	andi	r24, 0xF7	; 247
    117c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1180:	8f e1       	ldi	r24, 0x1F	; 31
    1182:	9e e4       	ldi	r25, 0x4E	; 78
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	f1 f7       	brne	.-4      	; 0x1184 <__stack+0x85>
    1188:	00 c0       	rjmp	.+0      	; 0x118a <__stack+0x8b>
    118a:	00 00       	nop
    118c:	08 95       	ret

0000118e <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
    118e:	4f 92       	push	r4
    1190:	5f 92       	push	r5
    1192:	6f 92       	push	r6
    1194:	7f 92       	push	r7
    1196:	8f 92       	push	r8
    1198:	9f 92       	push	r9
    119a:	af 92       	push	r10
    119c:	bf 92       	push	r11
    119e:	cf 92       	push	r12
    11a0:	df 92       	push	r13
    11a2:	ef 92       	push	r14
    11a4:	ff 92       	push	r15
    11a6:	0f 93       	push	r16
    11a8:	1f 93       	push	r17
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	69 97       	sbiw	r28, 0x19	; 25
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	de bf       	out	0x3e, r29	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	14 2f       	mov	r17, r20
    11c0:	42 2e       	mov	r4, r18
    11c2:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
    11c4:	00 23       	and	r16, r16
    11c6:	79 f0       	breq	.+30     	; 0x11e6 <lcd_int32+0x58>
        bSigned = (qr.quot<0);
    11c8:	6b 01       	movw	r12, r22
    11ca:	7c 01       	movw	r14, r24
    11cc:	cc 24       	eor	r12, r12
    11ce:	f7 fc       	sbrc	r15, 7
    11d0:	c3 94       	inc	r12
    11d2:	dd 24       	eor	r13, r13
    11d4:	ee 24       	eor	r14, r14
    11d6:	ff 24       	eor	r15, r15
    11d8:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
    11da:	6b 01       	movw	r12, r22
    11dc:	7c 01       	movw	r14, r24
    11de:	97 fd       	sbrc	r25, 7
    11e0:	a3 c0       	rjmp	.+326    	; 0x1328 <lcd_int32+0x19a>
    11e2:	c7 01       	movw	r24, r14
    11e4:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
    11e6:	44 20       	and	r4, r4
    11e8:	09 f4       	brne	.+2      	; 0x11ec <lcd_int32+0x5e>
    11ea:	96 c0       	rjmp	.+300    	; 0x1318 <lcd_int32+0x18a>
    11ec:	9e 01       	movw	r18, r28
    11ee:	2f 5f       	subi	r18, 0xFF	; 255
    11f0:	3f 4f       	sbci	r19, 0xFF	; 255
    11f2:	59 01       	movw	r10, r18
    11f4:	49 01       	movw	r8, r18
    11f6:	66 24       	eor	r6, r6
    11f8:	6a 94       	dec	r6
    11fa:	64 0c       	add	r6, r4
    11fc:	71 2c       	mov	r7, r1
    11fe:	3f ef       	ldi	r19, 0xFF	; 255
    1200:	63 1a       	sub	r6, r19
    1202:	73 0a       	sbc	r7, r19
    1204:	6a 0c       	add	r6, r10
    1206:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    1208:	2a e0       	ldi	r18, 0x0A	; 10
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	40 e0       	ldi	r20, 0x00	; 0
    120e:	50 e0       	ldi	r21, 0x00	; 0
    1210:	0e 94 ed 0c 	call	0x19da	; 0x19da <__divmodsi4>
    1214:	e6 2f       	mov	r30, r22
    1216:	2a 8b       	std	Y+18, r18	; 0x12
    1218:	3b 8b       	std	Y+19, r19	; 0x13
    121a:	4c 8b       	std	Y+20, r20	; 0x14
    121c:	5d 8b       	std	Y+21, r21	; 0x15
    121e:	6a 89       	ldd	r22, Y+18	; 0x12
    1220:	7b 89       	ldd	r23, Y+19	; 0x13
    1222:	8c 89       	ldd	r24, Y+20	; 0x14
    1224:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    1226:	20 e3       	ldi	r18, 0x30	; 48
    1228:	2e 0f       	add	r18, r30
    122a:	f4 01       	movw	r30, r8
    122c:	21 93       	st	Z+, r18
    122e:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
    1230:	6e 16       	cp	r6, r30
    1232:	7f 06       	cpc	r7, r31
    1234:	49 f7       	brne	.-46     	; 0x1208 <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    1236:	99 24       	eor	r9, r9
    1238:	93 94       	inc	r9
    123a:	94 0c       	add	r9, r4
    123c:	f5 01       	movw	r30, r10
    123e:	e4 0d       	add	r30, r4
    1240:	f1 1d       	adc	r31, r1
    1242:	2e e2       	ldi	r18, 0x2E	; 46
    1244:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
    1246:	2a e0       	ldi	r18, 0x0A	; 10
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e0       	ldi	r20, 0x00	; 0
    124c:	50 e0       	ldi	r21, 0x00	; 0
    124e:	0e 94 ed 0c 	call	0x19da	; 0x19da <__divmodsi4>
    1252:	e6 2f       	mov	r30, r22
    1254:	2a 8b       	std	Y+18, r18	; 0x12
    1256:	3b 8b       	std	Y+19, r19	; 0x13
    1258:	4c 8b       	std	Y+20, r20	; 0x14
    125a:	5d 8b       	std	Y+21, r21	; 0x15
    125c:	6e 8b       	std	Y+22, r22	; 0x16
    125e:	7f 8b       	std	Y+23, r23	; 0x17
    1260:	88 8f       	std	Y+24, r24	; 0x18
    1262:	99 8f       	std	Y+25, r25	; 0x19
    1264:	6a 89       	ldd	r22, Y+18	; 0x12
    1266:	7b 89       	ldd	r23, Y+19	; 0x13
    1268:	8c 89       	ldd	r24, Y+20	; 0x14
    126a:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    126c:	31 e0       	ldi	r19, 0x01	; 1
    126e:	39 0d       	add	r19, r9
    1270:	d5 01       	movw	r26, r10
    1272:	a9 0d       	add	r26, r9
    1274:	b1 1d       	adc	r27, r1
    1276:	e0 5d       	subi	r30, 0xD0	; 208
    1278:	ec 93       	st	X, r30
    127a:	93 2e       	mov	r9, r19
        }while(qr.quot);
    127c:	61 15       	cp	r22, r1
    127e:	71 05       	cpc	r23, r1
    1280:	81 05       	cpc	r24, r1
    1282:	91 05       	cpc	r25, r1
    1284:	01 f7       	brne	.-64     	; 0x1246 <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
    1286:	11 23       	and	r17, r17
    1288:	61 f0       	breq	.+24     	; 0x12a2 <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    128a:	51 10       	cpse	r5, r1
    128c:	4b c0       	rjmp	.+150    	; 0x1324 <lcd_int32+0x196>
    128e:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    1290:	31 17       	cp	r19, r17
    1292:	38 f4       	brcc	.+14     	; 0x12a2 <lcd_int32+0x114>
    1294:	f5 01       	movw	r30, r10
    1296:	e3 0f       	add	r30, r19
    1298:	f1 1d       	adc	r31, r1
    129a:	90 83       	st	Z, r25
    129c:	3f 5f       	subi	r19, 0xFF	; 255
    129e:	13 13       	cpse	r17, r19
    12a0:	f9 cf       	rjmp	.-14     	; 0x1294 <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    12a2:	00 23       	and	r16, r16
    12a4:	31 f0       	breq	.+12     	; 0x12b2 <lcd_int32+0x124>
    12a6:	f5 01       	movw	r30, r10
    12a8:	e3 0f       	add	r30, r19
    12aa:	f1 1d       	adc	r31, r1
    12ac:	9d e2       	ldi	r25, 0x2D	; 45
    12ae:	90 83       	st	Z, r25
    12b0:	3f 5f       	subi	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    12b2:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    12b4:	31 50       	subi	r19, 0x01	; 1
    12b6:	f5 01       	movw	r30, r10
    12b8:	e3 0f       	add	r30, r19
    12ba:	f1 1d       	adc	r31, r1
    12bc:	90 81       	ld	r25, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    12be:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    12c0:	77 9b       	sbis	0x0e, 7	; 14
    12c2:	fe cf       	rjmp	.-4      	; 0x12c0 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
    12c4:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    12c6:	77 9b       	sbis	0x0e, 7	; 14
    12c8:	fe cf       	rjmp	.-4      	; 0x12c6 <lcd_int32+0x138>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    12ca:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12ce:	98 60       	ori	r25, 0x08	; 8
    12d0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12d4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12d8:	97 7f       	andi	r25, 0xF7	; 247
    12da:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12de:	85 ed       	ldi	r24, 0xD5	; 213
    12e0:	8a 95       	dec	r24
    12e2:	f1 f7       	brne	.-4      	; 0x12e0 <lcd_int32+0x152>
    12e4:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    12e6:	31 11       	cpse	r19, r1
    12e8:	e5 cf       	rjmp	.-54     	; 0x12b4 <lcd_int32+0x126>

}
    12ea:	69 96       	adiw	r28, 0x19	; 25
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	cd bf       	out	0x3d, r28	; 61
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	1f 91       	pop	r17
    12fc:	0f 91       	pop	r16
    12fe:	ff 90       	pop	r15
    1300:	ef 90       	pop	r14
    1302:	df 90       	pop	r13
    1304:	cf 90       	pop	r12
    1306:	bf 90       	pop	r11
    1308:	af 90       	pop	r10
    130a:	9f 90       	pop	r9
    130c:	8f 90       	pop	r8
    130e:	7f 90       	pop	r7
    1310:	6f 90       	pop	r6
    1312:	5f 90       	pop	r5
    1314:	4f 90       	pop	r4
    1316:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    1318:	91 2c       	mov	r9, r1
    131a:	9e 01       	movw	r18, r28
    131c:	2f 5f       	subi	r18, 0xFF	; 255
    131e:	3f 4f       	sbci	r19, 0xFF	; 255
    1320:	59 01       	movw	r10, r18
    1322:	91 cf       	rjmp	.-222    	; 0x1246 <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1324:	90 e3       	ldi	r25, 0x30	; 48
    1326:	b4 cf       	rjmp	.-152    	; 0x1290 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    1328:	f0 94       	com	r15
    132a:	e0 94       	com	r14
    132c:	d0 94       	com	r13
    132e:	c0 94       	com	r12
    1330:	c1 1c       	adc	r12, r1
    1332:	d1 1c       	adc	r13, r1
    1334:	e1 1c       	adc	r14, r1
    1336:	f1 1c       	adc	r15, r1
    1338:	54 cf       	rjmp	.-344    	; 0x11e2 <lcd_int32+0x54>

0000133a <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l, 
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
    133a:	5f 92       	push	r5
    133c:	6f 92       	push	r6
    133e:	7f 92       	push	r7
    1340:	8f 92       	push	r8
    1342:	9f 92       	push	r9
    1344:	af 92       	push	r10
    1346:	bf 92       	push	r11
    1348:	cf 92       	push	r12
    134a:	df 92       	push	r13
    134c:	ef 92       	push	r14
    134e:	ff 92       	push	r15
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	61 97       	sbiw	r28, 0x11	; 17
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	5c 01       	movw	r10, r24
    136a:	96 2e       	mov	r9, r22
    136c:	54 2e       	mov	r5, r20
    136e:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient 
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
    1370:	8b 2c       	mov	r8, r11
    1372:	88 1c       	adc	r8, r8
    1374:	88 24       	eor	r8, r8
    1376:	88 1c       	adc	r8, r8
    1378:	78 2c       	mov	r7, r8
    137a:	9c 01       	movw	r18, r24
    137c:	97 fd       	sbrc	r25, 7
    137e:	9d c0       	rjmp	.+314    	; 0x14ba <lcd_int16+0x180>
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
    1380:	55 20       	and	r5, r5
    1382:	09 f4       	brne	.+2      	; 0x1386 <lcd_int16+0x4c>
    1384:	8e c0       	rjmp	.+284    	; 0x14a2 <lcd_int16+0x168>
    1386:	8e 01       	movw	r16, r28
    1388:	0f 5f       	subi	r16, 0xFF	; 255
    138a:	1f 4f       	sbci	r17, 0xFF	; 255
    138c:	78 01       	movw	r14, r16
    138e:	cc 24       	eor	r12, r12
    1390:	ca 94       	dec	r12
    1392:	c5 0c       	add	r12, r5
    1394:	d1 2c       	mov	r13, r1
    1396:	8f ef       	ldi	r24, 0xFF	; 255
    1398:	c8 1a       	sub	r12, r24
    139a:	d8 0a       	sbc	r13, r24
    139c:	c0 0e       	add	r12, r16
    139e:	d1 1e       	adc	r13, r17
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
    13a0:	6a e0       	ldi	r22, 0x0A	; 10
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	c9 01       	movw	r24, r18
    13a6:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__divmodhi4>
    13aa:	46 2f       	mov	r20, r22
    13ac:	24 2f       	mov	r18, r20
    13ae:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
    13b0:	80 5d       	subi	r24, 0xD0	; 208
    13b2:	f7 01       	movw	r30, r14
    13b4:	81 93       	st	Z+, r24
    13b6:	7f 01       	movw	r14, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
    13b8:	ec 15       	cp	r30, r12
    13ba:	fd 05       	cpc	r31, r13
    13bc:	89 f7       	brne	.-30     	; 0x13a0 <lcd_int16+0x66>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
    13be:	ff 24       	eor	r15, r15
    13c0:	f3 94       	inc	r15
    13c2:	f5 0c       	add	r15, r5
    13c4:	f8 01       	movw	r30, r16
    13c6:	e5 0d       	add	r30, r5
    13c8:	f1 1d       	adc	r31, r1
    13ca:	8e e2       	ldi	r24, 0x2E	; 46
    13cc:	80 83       	st	Z, r24
    13ce:	01 c0       	rjmp	.+2      	; 0x13d2 <lcd_int16+0x98>

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
    13d0:	f9 2e       	mov	r15, r25
        }

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
    13d2:	6a e0       	ldi	r22, 0x0A	; 10
    13d4:	70 e0       	ldi	r23, 0x00	; 0
    13d6:	c9 01       	movw	r24, r18
    13d8:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__divmodhi4>
    13dc:	46 2f       	mov	r20, r22
    13de:	24 2f       	mov	r18, r20
    13e0:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
    13e2:	91 e0       	ldi	r25, 0x01	; 1
    13e4:	9f 0d       	add	r25, r15
    13e6:	f8 01       	movw	r30, r16
    13e8:	ef 0d       	add	r30, r15
    13ea:	f1 1d       	adc	r31, r1
    13ec:	80 5d       	subi	r24, 0xD0	; 208
    13ee:	80 83       	st	Z, r24
        }
        while(qr.quot);
    13f0:	21 15       	cp	r18, r1
    13f2:	31 05       	cpc	r19, r1
    13f4:	69 f7       	brne	.-38     	; 0x13d0 <lcd_int16+0x96>

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
    13f6:	61 10       	cpse	r6, r1
    13f8:	59 c0       	rjmp	.+178    	; 0x14ac <lcd_int16+0x172>
    13fa:	b7 fc       	sbrc	r11, 7
    13fc:	63 c0       	rjmp	.+198    	; 0x14c4 <lcd_int16+0x18a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    13fe:	99 20       	and	r9, r9
    1400:	b1 f0       	breq	.+44     	; 0x142e <lcd_int16+0xf4>
    1402:	68 2d       	mov	r22, r8
    1404:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    1406:	80 e2       	ldi	r24, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    1408:	29 2f       	mov	r18, r25
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	49 2d       	mov	r20, r9
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	46 1b       	sub	r20, r22
    1412:	57 0b       	sbc	r21, r23
    1414:	24 17       	cp	r18, r20
    1416:	35 07       	cpc	r19, r21
    1418:	54 f4       	brge	.+20     	; 0x142e <lcd_int16+0xf4>
    141a:	9f 5f       	subi	r25, 0xFF	; 255
    141c:	f8 01       	movw	r30, r16
    141e:	e2 0f       	add	r30, r18
    1420:	f3 1f       	adc	r31, r19
    1422:	80 83       	st	Z, r24
    1424:	29 2f       	mov	r18, r25
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	24 17       	cp	r18, r20
    142a:	35 07       	cpc	r19, r21
    142c:	b4 f3       	brlt	.-20     	; 0x141a <lcd_int16+0xe0>
        }

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}
    142e:	77 20       	and	r7, r7
    1430:	31 f0       	breq	.+12     	; 0x143e <lcd_int16+0x104>
    1432:	f8 01       	movw	r30, r16
    1434:	e9 0f       	add	r30, r25
    1436:	f1 1d       	adc	r31, r1
    1438:	8d e2       	ldi	r24, 0x2D	; 45
    143a:	80 83       	st	Z, r24
    143c:	9f 5f       	subi	r25, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    143e:	21 e0       	ldi	r18, 0x01	; 1

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1440:	91 50       	subi	r25, 0x01	; 1
    1442:	f8 01       	movw	r30, r16
    1444:	e9 0f       	add	r30, r25
    1446:	f1 1d       	adc	r31, r1
    1448:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    144a:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    144c:	77 9b       	sbis	0x0e, 7	; 14
    144e:	fe cf       	rjmp	.-4      	; 0x144c <lcd_int16+0x112>
  SPDR = byte;                        //send payload
    1450:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1452:	77 9b       	sbis	0x0e, 7	; 14
    1454:	fe cf       	rjmp	.-4      	; 0x1452 <lcd_int16+0x118>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1456:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    145a:	88 60       	ori	r24, 0x08	; 8
    145c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1460:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1464:	87 7f       	andi	r24, 0xF7	; 247
    1466:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    146a:	f5 ed       	ldi	r31, 0xD5	; 213
    146c:	fa 95       	dec	r31
    146e:	f1 f7       	brne	.-4      	; 0x146c <lcd_int16+0x132>
    1470:	00 00       	nop

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1472:	91 11       	cpse	r25, r1
    1474:	e5 cf       	rjmp	.-54     	; 0x1440 <lcd_int16+0x106>
}
    1476:	61 96       	adiw	r28, 0x11	; 17
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	de bf       	out	0x3e, r29	; 62
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	cd bf       	out	0x3d, r28	; 61
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	1f 91       	pop	r17
    1488:	0f 91       	pop	r16
    148a:	ff 90       	pop	r15
    148c:	ef 90       	pop	r14
    148e:	df 90       	pop	r13
    1490:	cf 90       	pop	r12
    1492:	bf 90       	pop	r11
    1494:	af 90       	pop	r10
    1496:	9f 90       	pop	r9
    1498:	8f 90       	pop	r8
    149a:	7f 90       	pop	r7
    149c:	6f 90       	pop	r6
    149e:	5f 90       	pop	r5
    14a0:	08 95       	ret
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
    14a2:	f1 2c       	mov	r15, r1
    14a4:	8e 01       	movw	r16, r28
    14a6:	0f 5f       	subi	r16, 0xFF	; 255
    14a8:	1f 4f       	sbci	r17, 0xFF	; 255
    14aa:	93 cf       	rjmp	.-218    	; 0x13d2 <lcd_int16+0x98>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    14ac:	99 20       	and	r9, r9
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <lcd_int16+0x178>
    14b0:	be cf       	rjmp	.-132    	; 0x142e <lcd_int16+0xf4>
    14b2:	68 2d       	mov	r22, r8
    14b4:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    14b6:	80 e3       	ldi	r24, 0x30	; 48
    14b8:	a7 cf       	rjmp	.-178    	; 0x1408 <lcd_int16+0xce>
    14ba:	22 27       	eor	r18, r18
    14bc:	33 27       	eor	r19, r19
    14be:	28 1b       	sub	r18, r24
    14c0:	39 0b       	sbc	r19, r25
    14c2:	5e cf       	rjmp	.-324    	; 0x1380 <lcd_int16+0x46>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    14c4:	f3 94       	inc	r15
    14c6:	f3 94       	inc	r15
    14c8:	f8 01       	movw	r30, r16
    14ca:	e9 0f       	add	r30, r25
    14cc:	f1 1d       	adc	r31, r1
    14ce:	8d e2       	ldi	r24, 0x2D	; 45
    14d0:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    14d2:	99 20       	and	r9, r9
    14d4:	59 f0       	breq	.+22     	; 0x14ec <lcd_int16+0x1b2>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    14d6:	2f 2d       	mov	r18, r15
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	49 2d       	mov	r20, r9
    14dc:	50 e0       	ldi	r21, 0x00	; 0
    14de:	24 17       	cp	r18, r20
    14e0:	35 07       	cpc	r19, r21
    14e2:	24 f4       	brge	.+8      	; 0x14ec <lcd_int16+0x1b2>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    14e4:	9f 2d       	mov	r25, r15
                bSigned = 0;
    14e6:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    14e8:	80 e2       	ldi	r24, 0x20	; 32
    14ea:	97 cf       	rjmp	.-210    	; 0x141a <lcd_int16+0xe0>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    14ec:	9f 2d       	mov	r25, r15
    14ee:	a7 cf       	rjmp	.-178    	; 0x143e <lcd_int16+0x104>

000014f0 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
    14f0:	1f 92       	push	r1
    14f2:	0f 92       	push	r0
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	0f 92       	push	r0
    14f8:	11 24       	eor	r1, r1
    14fa:	0b b6       	in	r0, 0x3b	; 59
    14fc:	0f 92       	push	r0
    14fe:	2f 93       	push	r18
    1500:	3f 93       	push	r19
    1502:	8f 93       	push	r24
    1504:	9f 93       	push	r25
    1506:	af 93       	push	r26
    1508:	bf 93       	push	r27
    150a:	ef 93       	push	r30
    150c:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    150e:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1512:	8e 2f       	mov	r24, r30
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	fc 01       	movw	r30, r24
    1518:	38 97       	sbiw	r30, 0x08	; 8
    151a:	e1 35       	cpi	r30, 0x51	; 81
    151c:	f1 05       	cpc	r31, r1
    151e:	b0 f0       	brcs	.+44     	; 0x154c <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
    1520:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1524:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <twi_state>
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
    1528:	84 e0       	ldi	r24, 0x04	; 4
    152a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  }//switch
}//TWI_isr
    152e:	ff 91       	pop	r31
    1530:	ef 91       	pop	r30
    1532:	bf 91       	pop	r27
    1534:	af 91       	pop	r26
    1536:	9f 91       	pop	r25
    1538:	8f 91       	pop	r24
    153a:	3f 91       	pop	r19
    153c:	2f 91       	pop	r18
    153e:	0f 90       	pop	r0
    1540:	0b be       	out	0x3b, r0	; 59
    1542:	0f 90       	pop	r0
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	0f 90       	pop	r0
    1548:	1f 90       	pop	r1
    154a:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    154c:	ea 5b       	subi	r30, 0xBA	; 186
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
    1554:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <twi_buf_ptr.1780>
    1558:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <twi_buf>
    155c:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <twi_buf+0x1>
    1560:	e8 0f       	add	r30, r24
    1562:	f1 1d       	adc	r31, r1
    1564:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    1568:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
    156a:	84 e9       	ldi	r24, 0x94	; 148
    156c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;      
    1570:	de cf       	rjmp	.-68     	; 0x152e <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
    1572:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <twi_bus_addr>
    1576:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
      twi_buf_ptr = 0;      //initalize buffer pointer 
    157a:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <twi_buf_ptr.1780>
      TWCR = TWCR_SEND;     //send SLA+RW
    157e:	85 e8       	ldi	r24, 0x85	; 133
    1580:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
    1584:	d4 cf       	rjmp	.-88     	; 0x152e <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
    1586:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <twi_buf_ptr.1780>
    158a:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <twi_msg_size>
    158e:	89 17       	cp	r24, r25
    1590:	60 f7       	brcc	.-40     	; 0x156a <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
    1592:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <twi_buf>
    1596:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <twi_buf+0x1>
    159a:	91 e0       	ldi	r25, 0x01	; 1
    159c:	98 0f       	add	r25, r24
    159e:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <twi_buf_ptr.1780>
    15a2:	e8 0f       	add	r30, r24
    15a4:	f1 1d       	adc	r31, r1
    15a6:	80 81       	ld	r24, Z
    15a8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
        TWCR = TWCR_SEND;               //send next byte 
    15ac:	85 e8       	ldi	r24, 0x85	; 133
    15ae:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    15b2:	bd cf       	rjmp	.-134    	; 0x152e <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
    15b4:	85 ea       	ldi	r24, 0xA5	; 165
    15b6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
    15ba:	b9 cf       	rjmp	.-142    	; 0x152e <__vector_33+0x3e>
    15bc:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <twi_buf_ptr.1780>
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    15c0:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <twi_msg_size>
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	28 17       	cp	r18, r24
    15cc:	39 07       	cpc	r19, r25
    15ce:	dc f4       	brge	.+54     	; 0x1606 <__vector_33+0x116>
    15d0:	85 ec       	ldi	r24, 0xC5	; 197
    15d2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    15d6:	ab cf       	rjmp	.-170    	; 0x152e <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    15d8:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <twi_buf>
    15dc:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <twi_buf+0x1>
    15e0:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <twi_buf_ptr.1780>
    15e4:	21 e0       	ldi	r18, 0x01	; 1
    15e6:	28 0f       	add	r18, r24
    15e8:	20 93 98 01 	sts	0x0198, r18	; 0x800198 <twi_buf_ptr.1780>
    15ec:	e8 0f       	add	r30, r24
    15ee:	f1 1d       	adc	r31, r1
    15f0:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    15f4:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    15f6:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <twi_msg_size>
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	28 17       	cp	r18, r24
    1602:	39 07       	cpc	r19, r25
    1604:	2c f3       	brlt	.-54     	; 0x15d0 <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
    1606:	85 e8       	ldi	r24, 0x85	; 133
    1608:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    160c:	90 cf       	rjmp	.-224    	; 0x152e <__vector_33+0x3e>

0000160e <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    160e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
}
    1612:	81 70       	andi	r24, 0x01	; 1
    1614:	08 95       	ret

00001616 <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1616:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
    161a:	90 fd       	sbrc	r25, 0
    161c:	fc cf       	rjmp	.-8      	; 0x1616 <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
    161e:	8e 7f       	andi	r24, 0xFE	; 254
    1620:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <twi_bus_addr>
  twi_buf = twi_data;                   //load pointer to write buffer
    1624:	70 93 0b 02 	sts	0x020B, r23	; 0x80020b <twi_buf+0x1>
    1628:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <twi_buf>
  twi_msg_size = byte_cnt;              //load size of xfer 
    162c:	40 93 0d 02 	sts	0x020D, r20	; 0x80020d <twi_msg_size>
  TWCR = TWCR_START;                    //initiate START
    1630:	85 ea       	ldi	r24, 0xA5	; 165
    1632:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1636:	08 95       	ret

00001638 <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1638:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
    163c:	90 fd       	sbrc	r25, 0
    163e:	fc cf       	rjmp	.-8      	; 0x1638 <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
    1640:	81 60       	ori	r24, 0x01	; 1
    1642:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <twi_bus_addr>
  twi_buf = twi_data;                  //load pointer to write buffer
    1646:	70 93 0b 02 	sts	0x020B, r23	; 0x80020b <twi_buf+0x1>
    164a:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <twi_buf>
  twi_msg_size = byte_cnt;             //load size of xfer 
    164e:	40 93 0d 02 	sts	0x020D, r20	; 0x80020d <twi_msg_size>
  TWCR = TWCR_START;                   //initiate START
    1652:	85 ea       	ldi	r24, 0xA5	; 165
    1654:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1658:	08 95       	ret

0000165a <init_twi>:
//10K pullups are present on the board
//for alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
    165a:	8f ef       	ldi	r24, 0xFF	; 255
    165c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  TWSR = 0x00;     //prescaler value = 1
    1660:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  TWBR = TWI_TWBR; //defined in twi_master.h 
    1664:	8c e0       	ldi	r24, 0x0C	; 12
    1666:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    166a:	08 95       	ret

0000166c <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    166c:	5d 9b       	sbis	0x0b, 5	; 11
    166e:	fe cf       	rjmp	.-4      	; 0x166c <uart_putc>
    UDR0 = data;    // Send data byte
    1670:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1672:	5d 9b       	sbis	0x0b, 5	; 11
    1674:	fe cf       	rjmp	.-4      	; 0x1672 <uart_putc+0x6>
}
    1676:	08 95       	ret

00001678 <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    1678:	fc 01       	movw	r30, r24
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
    167a:	90 81       	ld	r25, Z
    167c:	99 23       	and	r25, r25
    167e:	49 f0       	breq	.+18     	; 0x1692 <uart_puts+0x1a>
    1680:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1682:	5d 9b       	sbis	0x0b, 5	; 11
    1684:	fe cf       	rjmp	.-4      	; 0x1682 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
    1686:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1688:	5d 9b       	sbis	0x0b, 5	; 11
    168a:	fe cf       	rjmp	.-4      	; 0x1688 <uart_puts+0x10>
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
    168c:	91 91       	ld	r25, Z+
    168e:	91 11       	cpse	r25, r1
    1690:	f8 cf       	rjmp	.-16     	; 0x1682 <uart_puts+0xa>
    1692:	08 95       	ret

00001694 <uart_puts_p>:
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
    1694:	9c 01       	movw	r18, r24
    1696:	fc 01       	movw	r30, r24
    1698:	44 91       	lpm	r20, Z
    169a:	44 23       	and	r20, r20
    169c:	69 f0       	breq	.+26     	; 0x16b8 <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
    169e:	01 96       	adiw	r24, 0x01	; 1
    16a0:	f9 01       	movw	r30, r18
    16a2:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    16a4:	5d 9b       	sbis	0x0b, 5	; 11
    16a6:	fe cf       	rjmp	.-4      	; 0x16a4 <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
    16a8:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    16aa:	5d 9b       	sbis	0x0b, 5	; 11
    16ac:	fe cf       	rjmp	.-4      	; 0x16aa <uart_puts_p+0x16>
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
    16ae:	9c 01       	movw	r18, r24
    16b0:	fc 01       	movw	r30, r24
    16b2:	44 91       	lpm	r20, Z
    16b4:	41 11       	cpse	r20, r1
    16b6:	f3 cf       	rjmp	.-26     	; 0x169e <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
    16b8:	08 95       	ret

000016ba <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
    16ba:	8a b1       	in	r24, 0x0a	; 10
    16bc:	88 69       	ori	r24, 0x98	; 152
    16be:	8a b9       	out	0x0a, r24	; 10
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);  //INTERRUPS DISABLED!!!

//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) ;
//async operation, no parity,  one stop bit, 8-bit characters
UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
    16c0:	e5 e9       	ldi	r30, 0x95	; 149
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	86 60       	ori	r24, 0x06	; 6
    16c8:	80 83       	st	Z, r24
UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
    16ca:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
    16ce:	87 e6       	ldi	r24, 0x67	; 103
    16d0:	89 b9       	out	0x09, r24	; 9
    16d2:	08 95       	ret

000016d4 <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    16d4:	80 e8       	ldi	r24, 0x80	; 128
    16d6:	9e e3       	ldi	r25, 0x3E	; 62
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <uart_getc+0xa>
    16da:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
    16dc:	21 f0       	breq	.+8      	; 0x16e6 <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    16de:	5f 9b       	sbis	0x0b, 7	; 11
    16e0:	fc cf       	rjmp	.-8      	; 0x16da <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
    16e2:	8c b1       	in	r24, 0x0c	; 12
    16e4:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
    16e6:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
    16e8:	08 95       	ret

000016ea <lm73_temp_convert>:
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	08 95       	ret

000016ee <main>:
// Radio Init;
//set to KRKT radio albany
}
//***********************************************************************************
int main()
{
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	00 d0       	rcall	.+0      	; 0x16f4 <main+0x6>
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
init();
    16f8:	0e 94 16 04 	call	0x82c	; 0x82c <init>
uint8_t  alarmON = OFF;
uint8_t  alarmSET = ON;
uint8_t  alarmOffset = 0;

//set LM73 mode for reading temperature by loading pointer register
lm73_wr_buf[0] = (&lm73_temp);		//load lm73_wr_buf[0] with temperature pointer address
    16fc:	ce 01       	movw	r24, r28
    16fe:	01 96       	adiw	r24, 0x01	; 1
    1700:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <lm73_wr_buf>
twi_start_wr(LM73_WRITE,lm73_wr_buf,2); //start the TWI write process
    1704:	42 e0       	ldi	r20, 0x02	; 2
    1706:	6e e5       	ldi	r22, 0x5E	; 94
    1708:	72 e0       	ldi	r23, 0x02	; 2
    170a:	80 e9       	ldi	r24, 0x90	; 144
    170c:	0e 94 0b 0b 	call	0x1616	; 0x1616 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1710:	8f e3       	ldi	r24, 0x3F	; 63
    1712:	9f e1       	ldi	r25, 0x1F	; 31
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <main+0x26>
    1718:	00 c0       	rjmp	.+0      	; 0x171a <main+0x2c>
    171a:	00 00       	nop
_delay_ms(2);    			//wait for the xfer to finish

clear_display(); //clean up the display
    171c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <clear_display>
uint16_t lm73_temp;  			//a place to assemble the temperature from the lm73
uint8_t  currentButtonsPressed = 0;	//Stores buttons that are currently pressed (holds value when pressed)
uint8_t  currentDisplayDigit = 0;       //Current LED to display on (0 == 1's digit
uint16_t displayValue = 0;	        //Current value to display on LEDs
uint16_t alarmValue = 1;	        //Current value held by the alarm
uint8_t  alarmActivated = OFF;		//If the Alarm is ON or OFF, initialize to OFF
    1720:	e1 2c       	mov	r14, r1
init();
uint16_t lm73_temp;  			//a place to assemble the temperature from the lm73
uint8_t  currentButtonsPressed = 0;	//Stores buttons that are currently pressed (holds value when pressed)
uint8_t  currentDisplayDigit = 0;       //Current LED to display on (0 == 1's digit
uint16_t displayValue = 0;	        //Current value to display on LEDs
uint16_t alarmValue = 1;	        //Current value held by the alarm
    1722:	cc 24       	eor	r12, r12
    1724:	c3 94       	inc	r12
    1726:	d1 2c       	mov	r13, r1
{
init();
uint16_t lm73_temp;  			//a place to assemble the temperature from the lm73
uint8_t  currentButtonsPressed = 0;	//Stores buttons that are currently pressed (holds value when pressed)
uint8_t  currentDisplayDigit = 0;       //Current LED to display on (0 == 1's digit
uint16_t displayValue = 0;	        //Current value to display on LEDs
    1728:	00 e0       	ldi	r16, 0x00	; 0
    172a:	61 2c       	mov	r6, r1
int main()
{
init();
uint16_t lm73_temp;  			//a place to assemble the temperature from the lm73
uint8_t  currentButtonsPressed = 0;	//Stores buttons that are currently pressed (holds value when pressed)
uint8_t  currentDisplayDigit = 0;       //Current LED to display on (0 == 1's digit
    172c:	f1 2c       	mov	r15, r1
//***********************************************************************************
int main()
{
init();
uint16_t lm73_temp;  			//a place to assemble the temperature from the lm73
uint8_t  currentButtonsPressed = 0;	//Stores buttons that are currently pressed (holds value when pressed)
    172e:	10 e0       	ldi	r17, 0x00	; 0
    1730:	a4 e6       	ldi	r26, 0x64	; 100
    1732:	aa 2e       	mov	r10, r26
    1734:	b4 ec       	ldi	r27, 0xC4	; 196
    1736:	bb 2e       	mov	r11, r27
      if(alarmActivated)
      {
        TCCR1B &= (0 << CS11);
        TCCR1B &= (0 << CS12);
        OCR3C   = 0;
	snoozeFlag = SNOOZEON;	
    1738:	99 24       	eor	r9, r9
    173a:	93 94       	inc	r9
  }else if(currentButtonsPressed == 0x02)
  {
      alarmActivated = OFF;
      alarmGlobal    = OFF;
      snoozeFlag = SNOOZEOFF;
      segment_data[2] |= (0xFF);      
    173c:	77 24       	eor	r7, r7
    173e:	7a 94       	dec	r7
  if(ADCH >= 400)
  {
    OCR2 = 5;
  }else if(ADCH < 20)
  {
    OCR2 = 240;	  
    1740:	80 ef       	ldi	r24, 0xF0	; 240
    1742:	88 2e       	mov	r8, r24
    1744:	14 c0       	rjmp	.+40     	; 0x176e <main+0x80>
    1746:	83 bc       	out	0x23, r8	; 35
    OCR2 = 255- ADCH;
  }
  //OCR2  = ADCH//395 + (2 * (450 - ADCH));	   

  // Turn ON alarm if SNOOZE timedout
  if(snoozeFlag == SNOOZEALARM)
    1748:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <snoozeFlag>
    174c:	82 30       	cpi	r24, 0x02	; 2
    174e:	09 f4       	brne	.+2      	; 0x1752 <main+0x64>
    1750:	4d c0       	rjmp	.+154    	; 0x17ec <main+0xfe>
    alarmGlobal = ON;
  }

  // Alarm is reached and activated, either by timer or by snooze reached
  // Play alarm
  if(alarmActivated && ((currentTime == alarmValue) || (snoozeFlag == SNOOZEALARM)) && (snoozeFlag != SNOOZEON) && (currentButtonsPressed != 0x01))
    1752:	e1 10       	cpse	r14, r1
    1754:	4d c0       	rjmp	.+154    	; 0x17f0 <main+0x102>
  if(alarmActivated && alarmSET)
  {
    alarmSET = OFF; 
  }
  
  LocalTempSensor(lm73_temp);
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	9a 81       	ldd	r25, Y+2	; 0x02
    175a:	0e 94 5f 03 	call	0x6be	; 0x6be <LocalTempSensor>
  // Turn minute input to HH:MM 
  displayValue = ClockCounterCorrection(displayValue);
  
  // Display to LED screen
  segsum(displayValue);						//Divide the decimal value to the segment_data[] array
    175e:	80 2f       	mov	r24, r16
    1760:	96 2d       	mov	r25, r6
    1762:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <segsum>
  currentDisplayDigit = displaySwitch(currentDisplayDigit);	//Display the current values stored in segment_data[] to current LED 
    1766:	8f 2d       	mov	r24, r15
    1768:	0e 94 91 01 	call	0x322	; 0x322 <displaySwitch>
    176c:	f8 2e       	mov	r15, r24

while(1){
  
  // Button Functionality
  // Pole Buttons
  currentButtonsPressed = ButtonCheck(currentButtonsPressed);
    176e:	81 2f       	mov	r24, r17
    1770:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <ButtonCheck>
    1774:	18 2f       	mov	r17, r24
  
  // Buttons (1):
  // Enter Setting mode (sets time or alarm)
  if(currentButtonsPressed == 0x01)
    1776:	81 30       	cpi	r24, 0x01	; 1
    1778:	09 f4       	brne	.+2      	; 0x177c <main+0x8e>
    177a:	aa c0       	rjmp	.+340    	; 0x18d0 <main+0x1e2>
      buttonPos    = 1;
      alarmValue   = AlarmSetMode(alarmOffset);
      displayValue = alarmValue;   
  // Buttons (2):
  // Restart Mode (restarts everything) 
  }else if(currentButtonsPressed == 0x02)
    177c:	82 30       	cpi	r24, 0x02	; 2
    177e:	09 f4       	brne	.+2      	; 0x1782 <main+0x94>
    1780:	c8 c0       	rjmp	.+400    	; 0x1912 <main+0x224>
      alarmON = OFF;
      clear_display();
  
  // Buttons (1, 2):
  // Sets Alarm 
  }else if(currentButtonsPressed == 0x03)
    1782:	83 30       	cpi	r24, 0x03	; 3
    1784:	09 f4       	brne	.+2      	; 0x1788 <main+0x9a>
    1786:	59 c0       	rjmp	.+178    	; 0x183a <main+0x14c>
      currentButtonsPressed = (0x00);
    buttonPos = 0;  
  
  // Buttons (3):
  // SNOOZE if Alarm is Set/On    
  }else if(currentButtonsPressed == 0x04)
    1788:	84 30       	cpi	r24, 0x04	; 4
    178a:	09 f4       	brne	.+2      	; 0x178e <main+0xa0>
    178c:	7a c0       	rjmp	.+244    	; 0x1882 <main+0x194>
      currentButtonsPressed = (0x00);
    buttonPos = 0;  
  
  // Buttons (1, 3):
  // Set Time
  }else if(currentButtonsPressed == 0x05)
    178e:	85 30       	cpi	r24, 0x05	; 5
    1790:	09 f4       	brne	.+2      	; 0x1794 <main+0xa6>
    1792:	d6 c0       	rjmp	.+428    	; 0x1940 <main+0x252>
    currentButtonsPressed = (0x00);
    buttonPos = 0;  
  
  // Display CurrentTime
  
  }else if(currentButtonsPressed == 0x08)
    1794:	88 30       	cpi	r24, 0x08	; 8
    1796:	09 f4       	brne	.+2      	; 0x179a <main+0xac>
    1798:	db c0       	rjmp	.+438    	; 0x1950 <main+0x262>
  {
    radio_on();
    //alarmOffset ^= 0x01;
    //currentButtonsPressed = (0x00);
  }else{
    displayValue = currentTime;
    179a:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <currentTime>
    179e:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <currentTime+0x1>
    17a2:	9a 01       	movw	r18, r20
    17a4:	a9 e8       	ldi	r26, 0x89	; 137
    17a6:	b8 e8       	ldi	r27, 0x88	; 136
    17a8:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__umulhisi3>
    17ac:	96 95       	lsr	r25
    17ae:	87 95       	ror	r24
    17b0:	92 95       	swap	r25
    17b2:	82 95       	swap	r24
    17b4:	8f 70       	andi	r24, 0x0F	; 15
    17b6:	89 27       	eor	r24, r25
    17b8:	9f 70       	andi	r25, 0x0F	; 15
    17ba:	89 27       	eor	r24, r25
    17bc:	b8 9e       	mul	r11, r24
    17be:	40 0d       	add	r20, r0
    17c0:	11 24       	eor	r1, r1
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	8a 9d       	mul	r24, r10
    17c6:	40 0d       	add	r20, r0
    17c8:	51 1d       	adc	r21, r1
    17ca:	11 24       	eor	r1, r1
    17cc:	04 2f       	mov	r16, r20
    17ce:	65 2e       	mov	r6, r21
    currentButtonsPressed = (0x00);  
    17d0:	10 e0       	ldi	r17, 0x00	; 0
  }

  // Brightness of LED based off Photoresistor
  if(ADCH >= 400)
    17d2:	85 b1       	in	r24, 0x05	; 5
  {
    OCR2 = 5;
  }else if(ADCH < 20)
    17d4:	85 b1       	in	r24, 0x05	; 5
    17d6:	84 31       	cpi	r24, 0x14	; 20
    17d8:	08 f4       	brcc	.+2      	; 0x17dc <main+0xee>
    17da:	b5 cf       	rjmp	.-150    	; 0x1746 <main+0x58>
  {
    OCR2 = 240;	  
  }else{
    OCR2 = 255- ADCH;
    17dc:	85 b1       	in	r24, 0x05	; 5
    17de:	80 95       	com	r24
    17e0:	83 bd       	out	0x23, r24	; 35
  }
  //OCR2  = ADCH//395 + (2 * (450 - ADCH));	   

  // Turn ON alarm if SNOOZE timedout
  if(snoozeFlag == SNOOZEALARM)
    17e2:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <snoozeFlag>
    17e6:	82 30       	cpi	r24, 0x02	; 2
    17e8:	09 f0       	breq	.+2      	; 0x17ec <main+0xfe>
    17ea:	b3 cf       	rjmp	.-154    	; 0x1752 <main+0x64>
  {
    alarmActivated = ON;
    alarmGlobal = ON;
    17ec:	90 92 7d 01 	sts	0x017D, r9	; 0x80017d <alarmGlobal>
  }

  // Alarm is reached and activated, either by timer or by snooze reached
  // Play alarm
  if(alarmActivated && ((currentTime == alarmValue) || (snoozeFlag == SNOOZEALARM)) && (snoozeFlag != SNOOZEON) && (currentButtonsPressed != 0x01))
    17f0:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <currentTime>
    17f4:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <currentTime+0x1>
    17f8:	c8 16       	cp	r12, r24
    17fa:	d9 06       	cpc	r13, r25
    17fc:	39 f0       	breq	.+14     	; 0x180c <main+0x11e>
    17fe:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <snoozeFlag>
    1802:	82 30       	cpi	r24, 0x02	; 2
    1804:	19 f0       	breq	.+6      	; 0x180c <main+0x11e>
    1806:	ee 24       	eor	r14, r14
    1808:	e3 94       	inc	r14
    180a:	a5 cf       	rjmp	.-182    	; 0x1756 <main+0x68>
    180c:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <snoozeFlag>
    1810:	81 30       	cpi	r24, 0x01	; 1
    1812:	c9 f3       	breq	.-14     	; 0x1806 <main+0x118>
    1814:	11 30       	cpi	r17, 0x01	; 1
    1816:	b9 f3       	breq	.-18     	; 0x1806 <main+0x118>
  {
    //TCCR1B |= (1 << WGM12) | (1<<CS11) | (1<<CS10); 		//CTC mode clear at TOP immediate
    OCR3C   = VolumeSetMode();
    1818:	0e 94 2b 03 	call	0x656	; 0x656 <VolumeSetMode>
    181c:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    1820:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    alarmON = ON;
    radio_init(); 
    1824:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <radio_init>
    buttonPos = 1;
    1828:	90 92 7c 01 	sts	0x017C, r9	; 0x80017c <__data_end>
    OCR3C  = 0x00;		//Volume
    182c:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    1830:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    1834:	ee 24       	eor	r14, r14
    1836:	e3 94       	inc	r14
    1838:	8e cf       	rjmp	.-228    	; 0x1756 <main+0x68>
  // Buttons (1, 2):
  // Sets Alarm 
  }else if(currentButtonsPressed == 0x03)
  {
      alarmActivated = ON;
      alarmGlobal = ON;
    183a:	90 92 7d 01 	sts	0x017D, r9	; 0x80017d <alarmGlobal>
      segment_data[2] &= 0xFB;      
    183e:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <segment_data+0x2>
    1842:	8b 7f       	andi	r24, 0xFB	; 251
    1844:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <segment_data+0x2>
      currentButtonsPressed = (0x00);
    buttonPos = 0;  
    1848:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <__data_end>
    184c:	20 2f       	mov	r18, r16
    184e:	36 2d       	mov	r19, r6
    1850:	a9 e8       	ldi	r26, 0x89	; 137
    1852:	b8 e8       	ldi	r27, 0x88	; 136
    1854:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__umulhisi3>
    1858:	96 95       	lsr	r25
    185a:	87 95       	ror	r24
    185c:	92 95       	swap	r25
    185e:	82 95       	swap	r24
    1860:	8f 70       	andi	r24, 0x0F	; 15
    1862:	89 27       	eor	r24, r25
    1864:	9f 70       	andi	r25, 0x0F	; 15
    1866:	89 27       	eor	r24, r25
    1868:	b8 9e       	mul	r11, r24
    186a:	00 0d       	add	r16, r0
    186c:	11 24       	eor	r1, r1
    186e:	10 e0       	ldi	r17, 0x00	; 0
    1870:	8a 9d       	mul	r24, r10
    1872:	00 0d       	add	r16, r0
    1874:	11 1d       	adc	r17, r1
    1876:	11 24       	eor	r1, r1
    1878:	61 2e       	mov	r6, r17
  
  // Buttons (1, 2):
  // Sets Alarm 
  }else if(currentButtonsPressed == 0x03)
  {
      alarmActivated = ON;
    187a:	ee 24       	eor	r14, r14
    187c:	e3 94       	inc	r14
      alarmGlobal = ON;
      segment_data[2] &= 0xFB;      
      currentButtonsPressed = (0x00);
    187e:	10 e0       	ldi	r17, 0x00	; 0
    1880:	a8 cf       	rjmp	.-176    	; 0x17d2 <main+0xe4>
  
  // Buttons (3):
  // SNOOZE if Alarm is Set/On    
  }else if(currentButtonsPressed == 0x04)
  {
      if(alarmActivated)
    1882:	ee 20       	and	r14, r14
    1884:	51 f0       	breq	.+20     	; 0x189a <main+0x1ac>
      {
        TCCR1B &= (0 << CS11);
    1886:	8e b5       	in	r24, 0x2e	; 46
    1888:	1e bc       	out	0x2e, r1	; 46
        TCCR1B &= (0 << CS12);
    188a:	8e b5       	in	r24, 0x2e	; 46
    188c:	1e bc       	out	0x2e, r1	; 46
        OCR3C   = 0;
    188e:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    1892:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	snoozeFlag = SNOOZEON;	
    1896:	90 92 81 01 	sts	0x0181, r9	; 0x800181 <snoozeFlag>
  // Set Time
  }else if(currentButtonsPressed == 0x05)
  {
    currentTime = AlarmSetMode(alarmOffset);
    currentButtonsPressed = (0x00);
    buttonPos = 0;  
    189a:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <__data_end>
    189e:	20 2f       	mov	r18, r16
    18a0:	36 2d       	mov	r19, r6
    18a2:	a9 e8       	ldi	r26, 0x89	; 137
    18a4:	b8 e8       	ldi	r27, 0x88	; 136
    18a6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__umulhisi3>
    18aa:	96 95       	lsr	r25
    18ac:	87 95       	ror	r24
    18ae:	92 95       	swap	r25
    18b0:	82 95       	swap	r24
    18b2:	8f 70       	andi	r24, 0x0F	; 15
    18b4:	89 27       	eor	r24, r25
    18b6:	9f 70       	andi	r25, 0x0F	; 15
    18b8:	89 27       	eor	r24, r25
    18ba:	b8 9e       	mul	r11, r24
    18bc:	00 0d       	add	r16, r0
    18be:	11 24       	eor	r1, r1
    18c0:	10 e0       	ldi	r17, 0x00	; 0
    18c2:	8a 9d       	mul	r24, r10
    18c4:	00 0d       	add	r16, r0
    18c6:	11 1d       	adc	r17, r1
    18c8:	11 24       	eor	r1, r1
    18ca:	61 2e       	mov	r6, r17
  // Buttons (1, 3):
  // Set Time
  }else if(currentButtonsPressed == 0x05)
  {
    currentTime = AlarmSetMode(alarmOffset);
    currentButtonsPressed = (0x00);
    18cc:	10 e0       	ldi	r17, 0x00	; 0
    18ce:	81 cf       	rjmp	.-254    	; 0x17d2 <main+0xe4>
  
  // Buttons (1):
  // Enter Setting mode (sets time or alarm)
  if(currentButtonsPressed == 0x01)
  {
      buttonPos    = 1;
    18d0:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
      alarmValue   = AlarmSetMode(alarmOffset);
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <AlarmSetMode>
    18da:	6c 01       	movw	r12, r24
    18dc:	9c 01       	movw	r18, r24
    18de:	a9 e8       	ldi	r26, 0x89	; 137
    18e0:	b8 e8       	ldi	r27, 0x88	; 136
    18e2:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__umulhisi3>
    18e6:	9c 01       	movw	r18, r24
    18e8:	36 95       	lsr	r19
    18ea:	27 95       	ror	r18
    18ec:	32 95       	swap	r19
    18ee:	22 95       	swap	r18
    18f0:	2f 70       	andi	r18, 0x0F	; 15
    18f2:	23 27       	eor	r18, r19
    18f4:	3f 70       	andi	r19, 0x0F	; 15
    18f6:	23 27       	eor	r18, r19
    18f8:	9c 2d       	mov	r25, r12
    18fa:	b2 9e       	mul	r11, r18
    18fc:	90 0d       	add	r25, r0
    18fe:	11 24       	eor	r1, r1
    1900:	89 2f       	mov	r24, r25
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	2a 9d       	mul	r18, r10
    1906:	80 0d       	add	r24, r0
    1908:	91 1d       	adc	r25, r1
    190a:	11 24       	eor	r1, r1
    190c:	08 2f       	mov	r16, r24
    190e:	69 2e       	mov	r6, r25
    1910:	60 cf       	rjmp	.-320    	; 0x17d2 <main+0xe4>
  // Buttons (2):
  // Restart Mode (restarts everything) 
  }else if(currentButtonsPressed == 0x02)
  {
      alarmActivated = OFF;
      alarmGlobal    = OFF;
    1912:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <alarmGlobal>
      snoozeFlag = SNOOZEOFF;
    1916:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <snoozeFlag>
      segment_data[2] |= (0xFF);      
    191a:	70 92 79 01 	sts	0x0179, r7	; 0x800179 <segment_data+0x2>
      currentButtonsPressed = (0x00);
    buttonPos = 0;  
    191e:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <__data_end>
      OCR3C = 0;
    1922:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    1926:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
      displayValue = 0;	        
      alarmValue = 1;	        
      //alarmActivated = OFF;
      //alarmGlobal    = OFF;
      alarmON = OFF;
      clear_display();
    192a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <clear_display>
    192e:	00 e0       	ldi	r16, 0x00	; 0
    1930:	61 2c       	mov	r6, r1
      displayValue = alarmValue;   
  // Buttons (2):
  // Restart Mode (restarts everything) 
  }else if(currentButtonsPressed == 0x02)
  {
      alarmActivated = OFF;
    1932:	e1 2c       	mov	r14, r1
    buttonPos = 0;  
      OCR3C = 0;
      currentButtonsPressed = 0;	
      currentDisplayDigit = 0;       
      displayValue = 0;	        
      alarmValue = 1;	        
    1934:	cc 24       	eor	r12, r12
    1936:	c3 94       	inc	r12
    1938:	d1 2c       	mov	r13, r1
      segment_data[2] |= (0xFF);      
      currentButtonsPressed = (0x00);
    buttonPos = 0;  
      OCR3C = 0;
      currentButtonsPressed = 0;	
      currentDisplayDigit = 0;       
    193a:	f1 2c       	mov	r15, r1
      snoozeFlag = SNOOZEOFF;
      segment_data[2] |= (0xFF);      
      currentButtonsPressed = (0x00);
    buttonPos = 0;  
      OCR3C = 0;
      currentButtonsPressed = 0;	
    193c:	10 e0       	ldi	r17, 0x00	; 0
    193e:	49 cf       	rjmp	.-366    	; 0x17d2 <main+0xe4>
  
  // Buttons (1, 3):
  // Set Time
  }else if(currentButtonsPressed == 0x05)
  {
    currentTime = AlarmSetMode(alarmOffset);
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <AlarmSetMode>
    1946:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <currentTime+0x1>
    194a:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <currentTime>
    194e:	a5 cf       	rjmp	.-182    	; 0x189a <main+0x1ac>
  
  // Display CurrentTime
  
  }else if(currentButtonsPressed == 0x08)
  {
    radio_on();
    1950:	0e 94 05 04 	call	0x80a	; 0x80a <radio_on>
    1954:	20 2f       	mov	r18, r16
    1956:	36 2d       	mov	r19, r6
    1958:	a9 e8       	ldi	r26, 0x89	; 137
    195a:	b8 e8       	ldi	r27, 0x88	; 136
    195c:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__umulhisi3>
    1960:	9c 01       	movw	r18, r24
    1962:	36 95       	lsr	r19
    1964:	27 95       	ror	r18
    1966:	32 95       	swap	r19
    1968:	22 95       	swap	r18
    196a:	2f 70       	andi	r18, 0x0F	; 15
    196c:	23 27       	eor	r18, r19
    196e:	3f 70       	andi	r19, 0x0F	; 15
    1970:	23 27       	eor	r18, r19
    1972:	b2 9e       	mul	r11, r18
    1974:	00 0d       	add	r16, r0
    1976:	11 24       	eor	r1, r1
    1978:	80 2f       	mov	r24, r16
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	2a 9d       	mul	r18, r10
    197e:	80 0d       	add	r24, r0
    1980:	91 1d       	adc	r25, r1
    1982:	11 24       	eor	r1, r1
    1984:	08 2f       	mov	r16, r24
    1986:	69 2e       	mov	r6, r25
    1988:	24 cf       	rjmp	.-440    	; 0x17d2 <main+0xe4>

0000198a <__udivmodhi4>:
    198a:	aa 1b       	sub	r26, r26
    198c:	bb 1b       	sub	r27, r27
    198e:	51 e1       	ldi	r21, 0x11	; 17
    1990:	07 c0       	rjmp	.+14     	; 0x19a0 <__udivmodhi4_ep>

00001992 <__udivmodhi4_loop>:
    1992:	aa 1f       	adc	r26, r26
    1994:	bb 1f       	adc	r27, r27
    1996:	a6 17       	cp	r26, r22
    1998:	b7 07       	cpc	r27, r23
    199a:	10 f0       	brcs	.+4      	; 0x19a0 <__udivmodhi4_ep>
    199c:	a6 1b       	sub	r26, r22
    199e:	b7 0b       	sbc	r27, r23

000019a0 <__udivmodhi4_ep>:
    19a0:	88 1f       	adc	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	5a 95       	dec	r21
    19a6:	a9 f7       	brne	.-22     	; 0x1992 <__udivmodhi4_loop>
    19a8:	80 95       	com	r24
    19aa:	90 95       	com	r25
    19ac:	bc 01       	movw	r22, r24
    19ae:	cd 01       	movw	r24, r26
    19b0:	08 95       	ret

000019b2 <__divmodhi4>:
    19b2:	97 fb       	bst	r25, 7
    19b4:	07 2e       	mov	r0, r23
    19b6:	16 f4       	brtc	.+4      	; 0x19bc <__divmodhi4+0xa>
    19b8:	00 94       	com	r0
    19ba:	07 d0       	rcall	.+14     	; 0x19ca <__divmodhi4_neg1>
    19bc:	77 fd       	sbrc	r23, 7
    19be:	09 d0       	rcall	.+18     	; 0x19d2 <__divmodhi4_neg2>
    19c0:	0e 94 c5 0c 	call	0x198a	; 0x198a <__udivmodhi4>
    19c4:	07 fc       	sbrc	r0, 7
    19c6:	05 d0       	rcall	.+10     	; 0x19d2 <__divmodhi4_neg2>
    19c8:	3e f4       	brtc	.+14     	; 0x19d8 <__divmodhi4_exit>

000019ca <__divmodhi4_neg1>:
    19ca:	90 95       	com	r25
    19cc:	81 95       	neg	r24
    19ce:	9f 4f       	sbci	r25, 0xFF	; 255
    19d0:	08 95       	ret

000019d2 <__divmodhi4_neg2>:
    19d2:	70 95       	com	r23
    19d4:	61 95       	neg	r22
    19d6:	7f 4f       	sbci	r23, 0xFF	; 255

000019d8 <__divmodhi4_exit>:
    19d8:	08 95       	ret

000019da <__divmodsi4>:
    19da:	05 2e       	mov	r0, r21
    19dc:	97 fb       	bst	r25, 7
    19de:	1e f4       	brtc	.+6      	; 0x19e6 <__divmodsi4+0xc>
    19e0:	00 94       	com	r0
    19e2:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <__negsi2>
    19e6:	57 fd       	sbrc	r21, 7
    19e8:	07 d0       	rcall	.+14     	; 0x19f8 <__divmodsi4_neg2>
    19ea:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__udivmodsi4>
    19ee:	07 fc       	sbrc	r0, 7
    19f0:	03 d0       	rcall	.+6      	; 0x19f8 <__divmodsi4_neg2>
    19f2:	4e f4       	brtc	.+18     	; 0x1a06 <__divmodsi4_exit>
    19f4:	0c 94 04 0d 	jmp	0x1a08	; 0x1a08 <__negsi2>

000019f8 <__divmodsi4_neg2>:
    19f8:	50 95       	com	r21
    19fa:	40 95       	com	r20
    19fc:	30 95       	com	r19
    19fe:	21 95       	neg	r18
    1a00:	3f 4f       	sbci	r19, 0xFF	; 255
    1a02:	4f 4f       	sbci	r20, 0xFF	; 255
    1a04:	5f 4f       	sbci	r21, 0xFF	; 255

00001a06 <__divmodsi4_exit>:
    1a06:	08 95       	ret

00001a08 <__negsi2>:
    1a08:	90 95       	com	r25
    1a0a:	80 95       	com	r24
    1a0c:	70 95       	com	r23
    1a0e:	61 95       	neg	r22
    1a10:	7f 4f       	sbci	r23, 0xFF	; 255
    1a12:	8f 4f       	sbci	r24, 0xFF	; 255
    1a14:	9f 4f       	sbci	r25, 0xFF	; 255
    1a16:	08 95       	ret

00001a18 <__tablejump2__>:
    1a18:	ee 0f       	add	r30, r30
    1a1a:	ff 1f       	adc	r31, r31
    1a1c:	00 24       	eor	r0, r0
    1a1e:	00 1c       	adc	r0, r0
    1a20:	0b be       	out	0x3b, r0	; 59
    1a22:	07 90       	elpm	r0, Z+
    1a24:	f6 91       	elpm	r31, Z
    1a26:	e0 2d       	mov	r30, r0
    1a28:	09 94       	ijmp

00001a2a <__umulhisi3>:
    1a2a:	a2 9f       	mul	r26, r18
    1a2c:	b0 01       	movw	r22, r0
    1a2e:	b3 9f       	mul	r27, r19
    1a30:	c0 01       	movw	r24, r0
    1a32:	a3 9f       	mul	r26, r19
    1a34:	70 0d       	add	r23, r0
    1a36:	81 1d       	adc	r24, r1
    1a38:	11 24       	eor	r1, r1
    1a3a:	91 1d       	adc	r25, r1
    1a3c:	b2 9f       	mul	r27, r18
    1a3e:	70 0d       	add	r23, r0
    1a40:	81 1d       	adc	r24, r1
    1a42:	11 24       	eor	r1, r1
    1a44:	91 1d       	adc	r25, r1
    1a46:	08 95       	ret

00001a48 <__udivmodsi4>:
    1a48:	a1 e2       	ldi	r26, 0x21	; 33
    1a4a:	1a 2e       	mov	r1, r26
    1a4c:	aa 1b       	sub	r26, r26
    1a4e:	bb 1b       	sub	r27, r27
    1a50:	fd 01       	movw	r30, r26
    1a52:	0d c0       	rjmp	.+26     	; 0x1a6e <__udivmodsi4_ep>

00001a54 <__udivmodsi4_loop>:
    1a54:	aa 1f       	adc	r26, r26
    1a56:	bb 1f       	adc	r27, r27
    1a58:	ee 1f       	adc	r30, r30
    1a5a:	ff 1f       	adc	r31, r31
    1a5c:	a2 17       	cp	r26, r18
    1a5e:	b3 07       	cpc	r27, r19
    1a60:	e4 07       	cpc	r30, r20
    1a62:	f5 07       	cpc	r31, r21
    1a64:	20 f0       	brcs	.+8      	; 0x1a6e <__udivmodsi4_ep>
    1a66:	a2 1b       	sub	r26, r18
    1a68:	b3 0b       	sbc	r27, r19
    1a6a:	e4 0b       	sbc	r30, r20
    1a6c:	f5 0b       	sbc	r31, r21

00001a6e <__udivmodsi4_ep>:
    1a6e:	66 1f       	adc	r22, r22
    1a70:	77 1f       	adc	r23, r23
    1a72:	88 1f       	adc	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	1a 94       	dec	r1
    1a78:	69 f7       	brne	.-38     	; 0x1a54 <__udivmodsi4_loop>
    1a7a:	60 95       	com	r22
    1a7c:	70 95       	com	r23
    1a7e:	80 95       	com	r24
    1a80:	90 95       	com	r25
    1a82:	9b 01       	movw	r18, r22
    1a84:	ac 01       	movw	r20, r24
    1a86:	bd 01       	movw	r22, r26
    1a88:	cf 01       	movw	r24, r30
    1a8a:	08 95       	ret

00001a8c <__itoa_ncheck>:
    1a8c:	bb 27       	eor	r27, r27
    1a8e:	4a 30       	cpi	r20, 0x0A	; 10
    1a90:	31 f4       	brne	.+12     	; 0x1a9e <__itoa_ncheck+0x12>
    1a92:	99 23       	and	r25, r25
    1a94:	22 f4       	brpl	.+8      	; 0x1a9e <__itoa_ncheck+0x12>
    1a96:	bd e2       	ldi	r27, 0x2D	; 45
    1a98:	90 95       	com	r25
    1a9a:	81 95       	neg	r24
    1a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9e:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__utoa_common>

00001aa2 <__utoa_ncheck>:
    1aa2:	bb 27       	eor	r27, r27

00001aa4 <__utoa_common>:
    1aa4:	fb 01       	movw	r30, r22
    1aa6:	55 27       	eor	r21, r21
    1aa8:	aa 27       	eor	r26, r26
    1aaa:	88 0f       	add	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	aa 1f       	adc	r26, r26
    1ab0:	a4 17       	cp	r26, r20
    1ab2:	10 f0       	brcs	.+4      	; 0x1ab8 <__utoa_common+0x14>
    1ab4:	a4 1b       	sub	r26, r20
    1ab6:	83 95       	inc	r24
    1ab8:	50 51       	subi	r21, 0x10	; 16
    1aba:	b9 f7       	brne	.-18     	; 0x1aaa <__utoa_common+0x6>
    1abc:	a0 5d       	subi	r26, 0xD0	; 208
    1abe:	aa 33       	cpi	r26, 0x3A	; 58
    1ac0:	08 f0       	brcs	.+2      	; 0x1ac4 <__utoa_common+0x20>
    1ac2:	a9 5d       	subi	r26, 0xD9	; 217
    1ac4:	a1 93       	st	Z+, r26
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	79 f7       	brne	.-34     	; 0x1aa8 <__utoa_common+0x4>
    1aca:	b1 11       	cpse	r27, r1
    1acc:	b1 93       	st	Z+, r27
    1ace:	11 92       	st	Z+, r1
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <strrev>

00001ad6 <strrev>:
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	fc 01       	movw	r30, r24
    1ada:	67 2f       	mov	r22, r23
    1adc:	71 91       	ld	r23, Z+
    1ade:	77 23       	and	r23, r23
    1ae0:	e1 f7       	brne	.-8      	; 0x1ada <strrev+0x4>
    1ae2:	32 97       	sbiw	r30, 0x02	; 2
    1ae4:	04 c0       	rjmp	.+8      	; 0x1aee <strrev+0x18>
    1ae6:	7c 91       	ld	r23, X
    1ae8:	6d 93       	st	X+, r22
    1aea:	70 83       	st	Z, r23
    1aec:	62 91       	ld	r22, -Z
    1aee:	ae 17       	cp	r26, r30
    1af0:	bf 07       	cpc	r27, r31
    1af2:	c8 f3       	brcs	.-14     	; 0x1ae6 <strrev+0x10>
    1af4:	08 95       	ret

00001af6 <_exit>:
    1af6:	f8 94       	cli

00001af8 <__stop_program>:
    1af8:	ff cf       	rjmp	.-2      	; 0x1af8 <__stop_program>
